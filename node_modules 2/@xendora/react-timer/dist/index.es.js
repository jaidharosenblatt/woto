import { Component } from 'react';
import PropTypes from 'prop-types';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

var ReactTimer =
/*#__PURE__*/
function (_Component) {
  _inherits(ReactTimer, _Component);

  function ReactTimer(props) {
    var _this;

    _classCallCheck(this, ReactTimer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactTimer).call(this, props));
    _this.state = {
      value: props.start || 0
    };
    _this.timer = null;
    return _this;
  }

  _createClass(ReactTimer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          onTick = _this$props.onTick,
          interval = _this$props.interval,
          end = _this$props.end,
          onEnd = _this$props.onEnd;
      this.timer = setInterval(function () {
        _this2.setState(function (_ref) {
          var value = _ref.value;
          return {
            value: onTick(value)
          };
        }, function () {
          var currentValue = _this2.state.value;

          if (end(currentValue)) {
            clearInterval(_this2.timer);
            onEnd(currentValue);
          }
        });
      }, interval);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.timer) {
        clearInterval(this.timer);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var value = this.state.value;
      return children(value);
    }
  }]);

  return ReactTimer;
}(Component);

ReactTimer.defaultProps = {
  interval: 1000,
  onEnd: function onEnd() {},
  onTick: function onTick() {}
};
ReactTimer.propTypes = {
  children: PropTypes.func.isRequired,
  start: PropTypes.number.isRequired,
  end: PropTypes.func.isRequired,
  interval: PropTypes.number,
  onTick: PropTypes.func,
  onEnd: PropTypes.func
};

export default ReactTimer;
//# sourceMappingURL=index.es.js.map
