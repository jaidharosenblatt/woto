{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/App.js\";\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { loadUser } from \"../redux/auth/actionCreators\";\nimport { loadCourses } from \"../redux/courses/actions/student\";\nimport { Notifications } from \"react-push-notification\";\nimport { pollDiscussions, pollQuestions } from \"../redux/courses/actions/fetches\";\nimport { stopPageLoading } from \"../redux/status/actionCreators\";\nimport selectors from \"../redux/selectors\";\nimport LoadingScreen from \"./util-components/spinner/LoadingScreen\";\nimport SignedOutRoutes from \"./layout/SignedOutRoutes\";\nimport Container from \"./layout/signed-in-content/Container\";\nimport GlobalModals from \"./modals/redux/ReduxModals\";\nimport GlobalAlerts from \"./layout/GlobalAlerts\";\nimport Schedule from \"./course/calendar/Schedule\";\nimport \"./App.less\";\nimport { getToken } from \"../api/tokenService\";\nimport { useInterval } from \"../util/useInterval\";\n/**\n * Renders our app =D\n * Specify paths where navbar should be hidden otherwise\n * assumes that all pages will be wrapped in navbar\n * Uses styling from \"App.less\"\n */\n\nconst App = props => {\n  const _loadUser = props.loadUser;\n  const _loadCourses = props.loadCourses;\n  const _stopPageLoading = props.stopPageLoading;\n  const {\n    isVerified\n  } = props;\n  const courseLength = props.courses.length; // Polling for session updates every 30 seconds\n  // useInterval(() => {\n  //   props.pollDiscussions();\n  // }, 30000);\n  // Polling for question updates every 5 seconds\n\n  useInterval(() => {\n    props.pollQuestions();\n  }, 10000);\n  useEffect(() => {\n    async function loadData() {\n      if (isVerified) {\n        await _loadCourses();\n      }\n\n      await _loadUser();\n    }\n\n    if (getToken() && courseLength === 0) {\n      loadData();\n    } else {\n      _stopPageLoading();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [_loadUser, _loadCourses, _stopPageLoading, isVerified]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Schedule, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Notifications, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LoadingScreen, {\n    loading: props.pageLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GlobalModals, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(GlobalAlerts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    render: () => {\n      return props.isAuthenticated ? /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 23\n        }\n      }) : /*#__PURE__*/React.createElement(SignedOutRoutes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 23\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  })))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    courses: selectors.getSortedCourses(state),\n    pageLoading: selectors.getPageLoading(state),\n    isAuthenticated: selectors.getAuthenticationStatus(state),\n    isVerified: selectors.getVerificationStatus(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loadUser,\n  loadCourses,\n  stopPageLoading,\n  pollQuestions,\n  pollDiscussions\n})(App);","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/App.js"],"names":["React","useEffect","BrowserRouter","Route","Switch","connect","loadUser","loadCourses","Notifications","pollDiscussions","pollQuestions","stopPageLoading","selectors","LoadingScreen","SignedOutRoutes","Container","GlobalModals","GlobalAlerts","Schedule","getToken","useInterval","App","props","_loadUser","_loadCourses","_stopPageLoading","isVerified","courseLength","courses","length","loadData","pageLoading","isAuthenticated","mapStateToProps","state","getSortedCourses","getPageLoading","getAuthenticationStatus","getVerificationStatus"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AAEA,SACEC,eADF,EAEEC,aAFF,QAGO,kCAHP;AAIA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAO,YAAP;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA;;;;;;;AAMA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACrB,QAAMC,SAAS,GAAGD,KAAK,CAAChB,QAAxB;AACA,QAAMkB,YAAY,GAAGF,KAAK,CAACf,WAA3B;AACA,QAAMkB,gBAAgB,GAAGH,KAAK,CAACX,eAA/B;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAiBJ,KAAvB;AACA,QAAMK,YAAY,GAAGL,KAAK,CAACM,OAAN,CAAcC,MAAnC,CALqB,CAOrB;AACA;AACA;AACA;AAEA;;AACAT,EAAAA,WAAW,CAAC,MAAM;AAChBE,IAAAA,KAAK,CAACZ,aAAN;AACD,GAFU,EAER,KAFQ,CAAX;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe6B,QAAf,GAA0B;AACxB,UAAIJ,UAAJ,EAAgB;AACd,cAAMF,YAAY,EAAlB;AACD;;AACD,YAAMD,SAAS,EAAf;AACD;;AAED,QAAIJ,QAAQ,MAAMQ,YAAY,KAAK,CAAnC,EAAsC;AACpCG,MAAAA,QAAQ;AACT,KAFD,MAEO;AACLL,MAAAA,gBAAgB;AACjB,KAZa,CAad;;AACD,GAdQ,EAcN,CAACF,SAAD,EAAYC,YAAZ,EAA0BC,gBAA1B,EAA4CC,UAA5C,CAdM,CAAT;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEJ,KAAK,CAACS,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAE,MAAM;AACZ,aAAOT,KAAK,CAACU,eAAN,gBACL,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,gBAGL,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF;AAKD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF,CADF,CAHF,CADF;AAyBD,CA1DD;;AA4DA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLN,IAAAA,OAAO,EAAEhB,SAAS,CAACuB,gBAAV,CAA2BD,KAA3B,CADJ;AAELH,IAAAA,WAAW,EAAEnB,SAAS,CAACwB,cAAV,CAAyBF,KAAzB,CAFR;AAGLF,IAAAA,eAAe,EAAEpB,SAAS,CAACyB,uBAAV,CAAkCH,KAAlC,CAHZ;AAILR,IAAAA,UAAU,EAAEd,SAAS,CAAC0B,qBAAV,CAAgCJ,KAAhC;AAJP,GAAP;AAMD,CAPD;;AASA,eAAe7B,OAAO,CAAC4B,eAAD,EAAkB;AACtC3B,EAAAA,QADsC;AAEtCC,EAAAA,WAFsC;AAGtCI,EAAAA,eAHsC;AAItCD,EAAAA,aAJsC;AAKtCD,EAAAA;AALsC,CAAlB,CAAP,CAMZY,GANY,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport { loadUser } from \"../redux/auth/actionCreators\";\nimport { loadCourses } from \"../redux/courses/actions/student\";\nimport { Notifications } from \"react-push-notification\";\n\nimport {\n  pollDiscussions,\n  pollQuestions,\n} from \"../redux/courses/actions/fetches\";\nimport { stopPageLoading } from \"../redux/status/actionCreators\";\nimport selectors from \"../redux/selectors\";\n\nimport LoadingScreen from \"./util-components/spinner/LoadingScreen\";\nimport SignedOutRoutes from \"./layout/SignedOutRoutes\";\nimport Container from \"./layout/signed-in-content/Container\";\nimport GlobalModals from \"./modals/redux/ReduxModals\";\nimport GlobalAlerts from \"./layout/GlobalAlerts\";\nimport Schedule from \"./course/calendar/Schedule\"\n\nimport \"./App.less\";\nimport { getToken } from \"../api/tokenService\";\nimport { useInterval } from \"../util/useInterval\";\n/**\n * Renders our app =D\n * Specify paths where navbar should be hidden otherwise\n * assumes that all pages will be wrapped in navbar\n * Uses styling from \"App.less\"\n */\nconst App = (props) => {\n  const _loadUser = props.loadUser;\n  const _loadCourses = props.loadCourses;\n  const _stopPageLoading = props.stopPageLoading;\n  const { isVerified } = props;\n  const courseLength = props.courses.length;\n\n  // Polling for session updates every 30 seconds\n  // useInterval(() => {\n  //   props.pollDiscussions();\n  // }, 30000);\n\n  // Polling for question updates every 5 seconds\n  useInterval(() => {\n    props.pollQuestions();\n  }, 10000);\n\n  useEffect(() => {\n    async function loadData() {\n      if (isVerified) {\n        await _loadCourses();\n      }\n      await _loadUser();\n    }\n\n    if (getToken() && courseLength === 0) {\n      loadData();\n    } else {\n      _stopPageLoading();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_loadUser, _loadCourses, _stopPageLoading, isVerified]);\n\n  return (\n    <div className=\"App\">\n      <Schedule/>\n      <Notifications />\n      <BrowserRouter>\n        <LoadingScreen loading={props.pageLoading}>\n          <GlobalModals>\n            <GlobalAlerts>\n              <Switch>\n                <Route\n                  render={() => {\n                    return props.isAuthenticated ? (\n                      <Container />\n                    ) : (\n                      <SignedOutRoutes />\n                    );\n                  }}\n                />\n              </Switch>\n            </GlobalAlerts>\n          </GlobalModals>\n        </LoadingScreen>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    courses: selectors.getSortedCourses(state),\n    pageLoading: selectors.getPageLoading(state),\n    isAuthenticated: selectors.getAuthenticationStatus(state),\n    isVerified: selectors.getVerificationStatus(state),\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loadUser,\n  loadCourses,\n  stopPageLoading,\n  pollQuestions,\n  pollDiscussions,\n})(App);\n"]},"metadata":{},"sourceType":"module"}