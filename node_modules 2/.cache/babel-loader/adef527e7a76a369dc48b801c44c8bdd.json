{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport RelativeTimeFormat from 'relative-time-format';\nimport Cache from './cache';\nimport grade from './grade';\nimport chooseLocale from './locale';\nimport { twitterStyle, timeStyle, defaultStyle } from './style';\nimport { addLocaleData, getLocaleData as _getLocaleData } from './LocaleDataStore'; // const EXTRA_STYLES = [\n// \t'long-convenient',\n// \t'long-time',\n// \t'short-convenient',\n// \t'short-time',\n// \t'tiny'\n// ]\n// Valid time units.\n\nvar UNITS = ['now', // The rest are the same as in `Intl.RelativeTimeFormat`.\n'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'];\n\nvar JavascriptTimeAgo = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n   */\n  function JavascriptTimeAgo() {\n    var locales = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, JavascriptTimeAgo); // Convert `locales` to an array.\n\n\n    if (typeof locales === 'string') {\n      locales = [locales];\n    } // Choose the most appropriate locale\n    // (one of the previously added ones)\n    // based on the list of preferred `locales` supplied by the user.\n\n\n    this.locale = chooseLocale(locales.concat(RelativeTimeFormat.getDefaultLocale()), _getLocaleData); // Use `Intl.NumberFormat` for formatting numbers (when available).\n\n    if (typeof Intl !== 'undefined' && Intl.NumberFormat) {\n      this.numberFormat = new Intl.NumberFormat(this.locale);\n    } // Cache `Intl.RelativeTimeFormat` instance.\n\n\n    this.relativeTimeFormatCache = new Cache();\n  } // Formats the relative date/time.\n  //\n  // @return {string} Returns the formatted relative date/time.\n  //\n  // @param {(Object|string)} [style] - Relative date/time formatting style.\n  //\n  // @param {string[]} [style.units] - A list of allowed time units\n  //                                  (e.g. ['second', 'minute', 'hour', …])\n  //\n  // @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.\n  //                                    If this function returns a value, then\n  //                                    the `.format()` call will return that value.\n  //                                    Otherwise it has no effect.\n  //\n  // @param {string} [style.flavour] - e.g. \"long\", \"short\", \"tiny\", etc.\n  //\n  // @param {Object[]} [style.gradation] - Time scale gradation steps.\n  //\n  // @param {string} style.gradation[].unit - Time interval measurement unit.\n  //                                          (e.g. ['second', 'minute', 'hour', …])\n  //\n  // @param {Number} style.gradation[].factor - Time interval measurement unit factor.\n  //                                            (e.g. `60` for 'minute')\n  //\n  // @param {Number} [style.gradation[].granularity] - A step for the unit's \"amount\" value.\n  //                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)\n  //\n  // @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.\n  //                                                 (e.g. `45` seconds for 'minute').\n  //                                                 There can also be specific `threshold_[unit]`\n  //                                                 thresholds for fine-tuning.\n  //\n\n\n  _createClass(JavascriptTimeAgo, [{\n    key: \"format\",\n    value: function format(input) {\n      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultStyle;\n\n      if (typeof style === 'string') {\n        switch (style) {\n          case 'twitter':\n            style = twitterStyle;\n            break;\n\n          case 'time':\n            style = timeStyle;\n            break;\n\n          default:\n            style = defaultStyle;\n        }\n      }\n\n      var _getDateAndTimeBeingF = getDateAndTimeBeingFormatted(input),\n          date = _getDateAndTimeBeingF.date,\n          time = _getDateAndTimeBeingF.time; // Get locale messages for this formatting flavour\n\n\n      var _this$getLocaleData = this.getLocaleData(style.flavour),\n          flavour = _this$getLocaleData.flavour,\n          localeData = _this$getLocaleData.localeData; // Can pass a custom `now`, e.g. for testing purposes.\n      // Technically it doesn't belong to `style`\n      // but since this is an undocumented internal feature,\n      // taking it from the `style` argument will do (for now).\n\n\n      var now = style.now || Date.now(); // how much time elapsed (in seconds)\n\n      var elapsed = (now - time) / 1000; // in seconds\n      // `custom` – A function of `{ elapsed, time, date, now, locale }`.\n      // If this function returns a value, then the `.format()` call will return that value.\n      // Otherwise the relative date/time is formatted as usual.\n      // This feature is currently not used anywhere and is here\n      // just for providing the ultimate customization point\n      // in case anyone would ever need that. Prefer using\n      // `gradation[step].format(value, locale)` instead.\n      //\n      // I guess `custom` is deprecated and will be removed\n      // in some future major version release.\n      //\n\n      if (style.custom) {\n        var custom = style.custom({\n          now: now,\n          date: date,\n          time: time,\n          elapsed: elapsed,\n          locale: this.locale\n        });\n\n        if (custom !== undefined) {\n          return custom;\n        }\n      } // Available time interval measurement units.\n\n\n      var units = getTimeIntervalMeasurementUnits(localeData, style.units); // If no available time unit is suitable, just output an empty string.\n\n      if (units.length === 0) {\n        console.error(\"Units \\\"\".concat(units.join(', '), \"\\\" were not found in locale data for \\\"\").concat(this.locale, \"\\\".\"));\n        return '';\n      } // Choose the appropriate time measurement unit\n      // and get the corresponding rounded time amount.\n\n\n      var step = grade(elapsed, now, units, style.gradation); // If no time unit is suitable, just output an empty string.\n      // E.g. when \"now\" unit is not available\n      // and \"second\" has a threshold of `0.5`\n      // (e.g. the \"canonical\" grading scale).\n\n      if (!step) {\n        return '';\n      }\n\n      if (step.format) {\n        return step.format(date || time, this.locale);\n      }\n\n      var unit = step.unit,\n          factor = step.factor,\n          granularity = step.granularity;\n      var amount = Math.abs(elapsed) / factor; // Apply granularity to the time amount\n      // (and fallback to the previous step\n      //  if the first level of granularity\n      //  isn't met by this amount)\n\n      if (granularity) {\n        // Recalculate the elapsed time amount based on granularity\n        amount = Math.round(amount / granularity) * granularity;\n      } // `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\n\n\n      if (unit === 'now') {\n        return getNowMessage(localeData, -1 * Math.sign(elapsed));\n      }\n\n      switch (flavour) {\n        case 'long':\n        case 'short':\n        case 'narrow':\n          // Format `value` using `Intl.RelativeTimeFormat`.\n          return this.getFormatter(flavour).format(-1 * Math.sign(elapsed) * Math.round(amount), unit);\n\n        default:\n          // Format `value`.\n          // (mimicks `Intl.RelativeTimeFormat` with the addition of extra styles)\n          return this.formatValue(-1 * Math.sign(elapsed) * Math.round(amount), unit, localeData);\n      }\n    }\n    /**\r\n     * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n     * @param  {number} value\r\n     * @param  {string} unit\r\n     * @param  {object} localeData — Relative time messages for the flavor.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value, unit, localeData) {\n      return this.getRule(value, unit, localeData).replace('{0}', this.formatNumber(Math.abs(value)));\n    }\n    /**\r\n     * Returns formatting rule for `value` in `units` (either in past or in future).\r\n     * @param {number} value - Time interval value.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @param  {object} localeData — Relative time messages for the flavor.\r\n     * @return {string}\r\n     * @example\r\n     * // Returns \"{0} days ago\"\r\n     * getRule(-2, \"day\")\r\n     */\n\n  }, {\n    key: \"getRule\",\n    value: function getRule(value, unit, localeData) {\n      var unitRules = localeData[unit]; // Bundle size optimization technique.\n\n      if (typeof unitRules === 'string') {\n        return unitRules;\n      } // Choose either \"past\" or \"future\" based on time `value` sign.\n      // If \"past\" is same as \"future\" then they're stored as \"other\".\n      // If there's only \"other\" then it's being collapsed.\n\n\n      var quantifierRules = unitRules[value <= 0 ? 'past' : 'future'] || unitRules; // Bundle size optimization technique.\n\n      if (typeof quantifierRules === 'string') {\n        return quantifierRules;\n      } // Quantify `value`.\n\n\n      var quantify = _getLocaleData(this.locale).quantify;\n\n      var quantifier = quantify && quantify(Math.abs(value)); // There seems to be no such locale in CLDR\n      // for which `quantify` is missing\n      // and still `past` and `future` messages\n      // contain something other than \"other\".\n\n      /* istanbul ignore next */\n\n      quantifier = quantifier || 'other'; // \"other\" rule is supposed to always be present.\n      // If only \"other\" rule is present then \"rules\" is not an object and is a string.\n\n      return quantifierRules[quantifier] || quantifierRules.other;\n    }\n    /**\r\n     * Formats a number into a string.\r\n     * Uses `Intl.NumberFormat` when available.\r\n     * @param  {number} number\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatNumber\",\n    value: function formatNumber(number) {\n      return this.numberFormat ? this.numberFormat.format(number) : String(number);\n    }\n    /**\r\n     * Returns an `Intl.RelativeTimeFormat` for a given `flavor`.\r\n     * @param {string} flavor\r\n     * @return {object} `Intl.RelativeTimeFormat` instance\r\n     */\n\n  }, {\n    key: \"getFormatter\",\n    value: function getFormatter(flavor) {\n      // `Intl.RelativeTimeFormat` instance creation is assumed a\n      // lengthy operation so the instances are cached and reused.\n      return this.relativeTimeFormatCache.get(this.locale, flavor) || this.relativeTimeFormatCache.put(this.locale, flavor, new RelativeTimeFormat(this.locale, {\n        style: flavor\n      }));\n    }\n    /**\r\n     * Gets locale messages for this formatting flavour\r\n     *\r\n     * @param {(string|string[])} flavour - Relative date/time formatting flavour.\r\n     *                                      If it's an array then all flavours are tried in order.\r\n     *\r\n     * @returns {Object} Returns an object of shape { flavour, localeData }\r\n     */\n\n  }, {\n    key: \"getLocaleData\",\n    value: function getLocaleData() {\n      var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : []; // Get relative time formatting rules for this locale\n\n      var localeData = _getLocaleData(this.locale); // Convert `flavour` to an array.\n\n\n      if (typeof flavour === 'string') {\n        flavour = [flavour];\n      } // \"long\" flavour is the default one.\n      // (it's always present)\n\n\n      flavour = flavour.concat('long'); // Find a suitable flavour.\n\n      for (var _iterator = flavour, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _ = _ref;\n\n        if (localeData[_]) {\n          return {\n            flavour: _,\n            localeData: localeData[_]\n          };\n        }\n      } // Can't happen - \"long\" flavour is always present.\n      // throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale \"${this.locale}\".`)\n\n    }\n  }]);\n\n  return JavascriptTimeAgo;\n}();\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\n\n\nexport { JavascriptTimeAgo as default };\nJavascriptTimeAgo.getDefaultLocale = RelativeTimeFormat.getDefaultLocale;\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\n\nJavascriptTimeAgo.setDefaultLocale = RelativeTimeFormat.setDefaultLocale;\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\n\nJavascriptTimeAgo.addLocale = function (localeData) {\n  addLocaleData(localeData);\n  RelativeTimeFormat.addLocale(localeData);\n};\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\n\n\nJavascriptTimeAgo.locale = JavascriptTimeAgo.addLocale; // Normalizes `.format()` `time` argument.\n\nfunction getDateAndTimeBeingFormatted(input) {\n  if (input.constructor === Date || isMockedDate(input)) {\n    return {\n      date: input,\n      time: input.getTime()\n    };\n  }\n\n  if (typeof input === 'number') {\n    return {\n      time: input // `date` is not required for formatting\n      // relative times unless \"twitter\" preset is used.\n      // date : new Date(input)\n\n    };\n  } // For some weird reason istanbul doesn't see this `throw` covered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unsupported relative time formatter input: \".concat(_typeof(input), \", \").concat(input));\n} // During testing via some testing libraries `Date`s aren't actually `Date`s.\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\n\n\nfunction isMockedDate(object) {\n  return _typeof(object) === 'object' && typeof object.getTime === 'function';\n} // Get available time interval measurement units.\n\n\nfunction getTimeIntervalMeasurementUnits(localeData, restrictedSetOfUnits) {\n  // All available time interval measurement units.\n  var units = Object.keys(localeData); // If only a specific set of available\n  // time measurement units can be used.\n\n  if (restrictedSetOfUnits) {\n    // Reduce available time interval measurement units\n    // based on user's preferences.\n    units = restrictedSetOfUnits.filter(function (_) {\n      return units.indexOf(_) >= 0;\n    });\n  } // Stock `Intl.RelativeTimeFormat` locale data doesn't have \"now\" units.\n  // So either \"now\" is present in extended locale data\n  // or it's taken from \".second.current\".\n\n\n  if ((!restrictedSetOfUnits || restrictedSetOfUnits.indexOf('now') >= 0) && units.indexOf('now') < 0) {\n    if (localeData.second.current) {\n      units.unshift('now');\n    }\n  }\n\n  return units;\n}\n\nfunction getNowMessage(localeData, value) {\n  // Specific \"now\" message form extended locale data (if present).\n  if (localeData.now) {\n    // Bundle size optimization technique.\n    if (typeof localeData.now === 'string') {\n      return localeData.now;\n    } // Not handling `value === 0` as `localeData.now.current` here\n    // because it wouldn't make sense: \"now\" is a moment,\n    // so one can't possibly differentiate between a\n    // \"previous\" moment, a \"current\" moment and a \"next moment\".\n    // It can only be differentiated between \"past\" and \"future\".\n\n\n    if (value <= 0) {\n      return localeData.now.past;\n    } else {\n      return localeData.now.future;\n    }\n  } // Use \".second.current\" as \"now\" message.\n\n\n  return localeData.second.current; // If this function was called then\n  // it means that either \"now\" unit messages are\n  // available or \".second.current\" message is present.\n}","map":{"version":3,"sources":["../source/JavascriptTimeAgo.js"],"names":["getLocaleData","UNITS","JavascriptTimeAgo","locales","chooseLocale","RelativeTimeFormat","Intl","input","style","defaultStyle","date","time","getDateAndTimeBeingFormatted","flavour","localeData","now","Date","elapsed","custom","locale","units","getTimeIntervalMeasurementUnits","console","step","grade","unit","factor","granularity","amount","Math","getNowMessage","value","unitRules","quantifierRules","quantify","quantifier","number","String","flavor","_","addLocaleData","isMockedDate","object","Object","restrictedSetOfUnits"],"mappings":"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","sourcesContent":["import RelativeTimeFormat from 'relative-time-format'\r\n\r\nimport Cache from './cache'\r\nimport grade from './grade'\r\nimport chooseLocale from './locale'\r\nimport { twitterStyle, timeStyle, defaultStyle } from './style'\r\n\r\nimport {\r\n\taddLocaleData,\r\n\tgetLocaleData\r\n} from './LocaleDataStore'\r\n\r\n// const EXTRA_STYLES = [\r\n// \t'long-convenient',\r\n// \t'long-time',\r\n// \t'short-convenient',\r\n// \t'short-time',\r\n// \t'tiny'\r\n// ]\r\n\r\n// Valid time units.\r\nconst UNITS = [\r\n\t'now',\r\n\t// The rest are the same as in `Intl.RelativeTimeFormat`.\r\n\t'second',\r\n\t'minute',\r\n\t'hour',\r\n\t'day',\r\n\t'week',\r\n\t'month',\r\n\t'quarter',\r\n\t'year'\r\n]\r\n\r\nexport default class JavascriptTimeAgo\r\n{\r\n\t/**\r\n\t * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n\t */\r\n\tconstructor(locales = [])\r\n\t{\r\n\t\t// Convert `locales` to an array.\r\n\t\tif (typeof locales === 'string') {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\t// (one of the previously added ones)\r\n\t\t// based on the list of preferred `locales` supplied by the user.\r\n\t\tthis.locale = chooseLocale(\r\n\t\t\tlocales.concat(RelativeTimeFormat.getDefaultLocale()),\r\n\t\t\tgetLocaleData\r\n\t\t)\r\n\r\n\t\t// Use `Intl.NumberFormat` for formatting numbers (when available).\r\n\t\tif (typeof Intl !== 'undefined' && Intl.NumberFormat) {\r\n\t\t\tthis.numberFormat = new Intl.NumberFormat(this.locale)\r\n\t\t}\r\n\r\n\t\t// Cache `Intl.RelativeTimeFormat` instance.\r\n\t\tthis.relativeTimeFormatCache = new Cache()\r\n\t}\r\n\r\n\t// Formats the relative date/time.\r\n\t//\r\n\t// @return {string} Returns the formatted relative date/time.\r\n\t//\r\n\t// @param {(Object|string)} [style] - Relative date/time formatting style.\r\n\t//\r\n\t// @param {string[]} [style.units] - A list of allowed time units\r\n\t//                                  (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.\r\n\t//                                    If this function returns a value, then\r\n\t//                                    the `.format()` call will return that value.\r\n\t//                                    Otherwise it has no effect.\r\n\t//\r\n\t// @param {string} [style.flavour] - e.g. \"long\", \"short\", \"tiny\", etc.\r\n\t//\r\n\t// @param {Object[]} [style.gradation] - Time scale gradation steps.\r\n\t//\r\n\t// @param {string} style.gradation[].unit - Time interval measurement unit.\r\n\t//                                          (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Number} style.gradation[].factor - Time interval measurement unit factor.\r\n\t//                                            (e.g. `60` for 'minute')\r\n\t//\r\n\t// @param {Number} [style.gradation[].granularity] - A step for the unit's \"amount\" value.\r\n\t//                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)\r\n\t//\r\n\t// @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.\r\n\t//                                                 (e.g. `45` seconds for 'minute').\r\n\t//                                                 There can also be specific `threshold_[unit]`\r\n\t//                                                 thresholds for fine-tuning.\r\n\t//\r\n\tformat(input, style = defaultStyle)\r\n\t{\r\n\t\tif (typeof style === 'string')\r\n\t\t{\r\n\t\t\tswitch (style)\r\n\t\t\t{\r\n\t\t\t\tcase 'twitter':\r\n\t\t\t\t\tstyle = twitterStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'time':\r\n\t\t\t\t\tstyle = timeStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstyle = defaultStyle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst { date, time } = getDateAndTimeBeingFormatted(input)\r\n\r\n\t\t// Get locale messages for this formatting flavour\r\n\t\tconst { flavour, localeData } = this.getLocaleData(style.flavour)\r\n\r\n\t\t// Can pass a custom `now`, e.g. for testing purposes.\r\n\t\t// Technically it doesn't belong to `style`\r\n\t\t// but since this is an undocumented internal feature,\r\n\t\t// taking it from the `style` argument will do (for now).\r\n\t\tconst now = style.now || Date.now()\r\n\r\n\t\t// how much time elapsed (in seconds)\r\n\t\tconst elapsed = (now - time) / 1000 // in seconds\r\n\r\n\t\t// `custom` – A function of `{ elapsed, time, date, now, locale }`.\r\n\t\t// If this function returns a value, then the `.format()` call will return that value.\r\n\t\t// Otherwise the relative date/time is formatted as usual.\r\n\t\t// This feature is currently not used anywhere and is here\r\n\t\t// just for providing the ultimate customization point\r\n\t\t// in case anyone would ever need that. Prefer using\r\n\t\t// `gradation[step].format(value, locale)` instead.\r\n\t\t//\r\n\t\t// I guess `custom` is deprecated and will be removed\r\n\t\t// in some future major version release.\r\n\t\t//\r\n\t\tif (style.custom)\r\n\t\t{\r\n\t\t\tconst custom = style.custom({\r\n\t\t\t\tnow,\r\n\t\t\t\tdate,\r\n\t\t\t\ttime,\r\n\t\t\t\telapsed,\r\n\t\t\t\tlocale : this.locale\r\n\t\t\t})\r\n\r\n\t\t\tif (custom !== undefined) {\r\n\t\t\t\treturn custom\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Available time interval measurement units.\r\n\t\tconst units = getTimeIntervalMeasurementUnits(localeData, style.units)\r\n\t\t// If no available time unit is suitable, just output an empty string.\r\n\t\tif (units.length === 0) {\r\n\t\t\tconsole.error(`Units \"${units.join(', ')}\" were not found in locale data for \"${this.locale}\".`)\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\t// Choose the appropriate time measurement unit\r\n\t\t// and get the corresponding rounded time amount.\r\n\t\tconst step = grade(\r\n\t\t\telapsed,\r\n\t\t\tnow,\r\n\t\t\tunits,\r\n\t\t\tstyle.gradation\r\n\t\t)\r\n\r\n\t\t// If no time unit is suitable, just output an empty string.\r\n\t\t// E.g. when \"now\" unit is not available\r\n\t\t// and \"second\" has a threshold of `0.5`\r\n\t\t// (e.g. the \"canonical\" grading scale).\r\n\t\tif (!step) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\tif (step.format) {\r\n\t\t\treturn step.format(date || time, this.locale)\r\n\t\t}\r\n\r\n\t\tconst { unit, factor, granularity } = step\r\n\r\n\t\tlet amount = Math.abs(elapsed) / factor\r\n\r\n\t\t// Apply granularity to the time amount\r\n\t\t// (and fallback to the previous step\r\n\t\t//  if the first level of granularity\r\n\t\t//  isn't met by this amount)\r\n\t\tif (granularity) {\r\n\t\t\t// Recalculate the elapsed time amount based on granularity\r\n\t\t\tamount = Math.round(amount / granularity) * granularity\r\n\t\t}\r\n\r\n\t\t// `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\r\n\t\tif (unit === 'now') {\r\n\t\t\treturn getNowMessage(localeData, -1 * Math.sign(elapsed))\r\n\t\t}\r\n\r\n\t\tswitch (flavour) {\r\n\t\t\tcase 'long':\r\n\t\t\tcase 'short':\r\n\t\t\tcase 'narrow':\r\n\t\t\t\t// Format `value` using `Intl.RelativeTimeFormat`.\r\n\t\t\t\treturn this.getFormatter(flavour).format(-1 * Math.sign(elapsed) * Math.round(amount), unit)\r\n\t\t\tdefault:\r\n\t\t\t\t// Format `value`.\r\n\t\t\t\t// (mimicks `Intl.RelativeTimeFormat` with the addition of extra styles)\r\n\t\t\t\treturn this.formatValue(-1 * Math.sign(elapsed) * Math.round(amount), unit, localeData)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n\t * @param  {number} value\r\n\t * @param  {string} unit\r\n\t * @param  {object} localeData — Relative time messages for the flavor.\r\n\t * @return {string}\r\n\t */\r\n\tformatValue(value, unit, localeData) {\r\n\t\treturn this.getRule(value, unit, localeData).replace('{0}', this.formatNumber(Math.abs(value)))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns formatting rule for `value` in `units` (either in past or in future).\r\n\t * @param {number} value - Time interval value.\r\n\t * @param {string} unit - Time interval measurement unit.\r\n\t * @param  {object} localeData — Relative time messages for the flavor.\r\n\t * @return {string}\r\n\t * @example\r\n\t * // Returns \"{0} days ago\"\r\n\t * getRule(-2, \"day\")\r\n\t */\r\n\tgetRule(value, unit, localeData) {\r\n\t\tconst unitRules = localeData[unit]\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof unitRules === 'string') {\r\n\t\t\treturn unitRules\r\n\t\t}\r\n\t\t// Choose either \"past\" or \"future\" based on time `value` sign.\r\n\t\t// If \"past\" is same as \"future\" then they're stored as \"other\".\r\n\t\t// If there's only \"other\" then it's being collapsed.\r\n\t\tconst quantifierRules = unitRules[value <= 0 ? 'past' : 'future'] || unitRules\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof quantifierRules === 'string') {\r\n\t\t\treturn quantifierRules\r\n\t\t}\r\n\t\t// Quantify `value`.\r\n\t\tconst quantify = getLocaleData(this.locale).quantify\r\n\t\tlet quantifier = quantify && quantify(Math.abs(value))\r\n\t\t// There seems to be no such locale in CLDR\r\n\t\t// for which `quantify` is missing\r\n\t\t// and still `past` and `future` messages\r\n\t\t// contain something other than \"other\".\r\n\t\t/* istanbul ignore next */\r\n\t\tquantifier = quantifier || 'other'\r\n\t\t// \"other\" rule is supposed to always be present.\r\n\t\t// If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n\t\treturn quantifierRules[quantifier] || quantifierRules.other\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a number into a string.\r\n\t * Uses `Intl.NumberFormat` when available.\r\n\t * @param  {number} number\r\n\t * @return {string}\r\n\t */\r\n\tformatNumber(number) {\r\n\t\treturn this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `Intl.RelativeTimeFormat` for a given `flavor`.\r\n\t * @param {string} flavor\r\n\t * @return {object} `Intl.RelativeTimeFormat` instance\r\n\t */\r\n\tgetFormatter(flavor) {\r\n\t\t// `Intl.RelativeTimeFormat` instance creation is assumed a\r\n\t\t// lengthy operation so the instances are cached and reused.\r\n\t\treturn this.relativeTimeFormatCache.get(this.locale, flavor) ||\r\n\t\t\tthis.relativeTimeFormatCache.put(this.locale, flavor, new RelativeTimeFormat(this.locale, { style: flavor }))\r\n\t}\r\n\r\n\t/**\r\n\t * Gets locale messages for this formatting flavour\r\n\t *\r\n\t * @param {(string|string[])} flavour - Relative date/time formatting flavour.\r\n\t *                                      If it's an array then all flavours are tried in order.\r\n\t *\r\n\t * @returns {Object} Returns an object of shape { flavour, localeData }\r\n\t */\r\n\tgetLocaleData(flavour = []) {\r\n\t\t// Get relative time formatting rules for this locale\r\n\t\tconst localeData = getLocaleData(this.locale)\r\n\r\n\t\t// Convert `flavour` to an array.\r\n\t\tif (typeof flavour === 'string') {\r\n\t\t\tflavour = [flavour]\r\n\t\t}\r\n\r\n\t\t// \"long\" flavour is the default one.\r\n\t\t// (it's always present)\r\n\t\tflavour = flavour.concat('long')\r\n\r\n\t\t// Find a suitable flavour.\r\n\t\tfor (const _ of flavour) {\r\n\t\t\tif (localeData[_]) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tflavour : _,\r\n\t\t\t\t\tlocaleData : localeData[_]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Can't happen - \"long\" flavour is always present.\r\n\t\t// throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale \"${this.locale}\".`)\r\n\t}\r\n}\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nJavascriptTimeAgo.getDefaultLocale = RelativeTimeFormat.getDefaultLocale\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nJavascriptTimeAgo.setDefaultLocale = RelativeTimeFormat.setDefaultLocale\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nJavascriptTimeAgo.addLocale = function(localeData) {\r\n\taddLocaleData(localeData)\r\n\tRelativeTimeFormat.addLocale(localeData)\r\n}\r\n\r\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\r\nJavascriptTimeAgo.locale = JavascriptTimeAgo.addLocale\r\n\r\n// Normalizes `.format()` `time` argument.\r\nfunction getDateAndTimeBeingFormatted(input)\r\n{\r\n\tif (input.constructor === Date || isMockedDate(input))\r\n\t{\r\n\t\treturn {\r\n\t\t\tdate : input,\r\n\t\t\ttime : input.getTime()\r\n\t\t}\r\n\t}\r\n\r\n\tif (typeof input === 'number')\r\n\t{\r\n\t\treturn {\r\n\t\t\ttime : input,\r\n\t\t\t// `date` is not required for formatting\r\n\t\t\t// relative times unless \"twitter\" preset is used.\r\n\t\t\t// date : new Date(input)\r\n\t\t}\r\n\t}\r\n\r\n\t// For some weird reason istanbul doesn't see this `throw` covered.\r\n\t/* istanbul ignore next */\r\n\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// During testing via some testing libraries `Date`s aren't actually `Date`s.\r\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\r\nfunction isMockedDate(object) {\r\n\treturn typeof object === 'object' && typeof object.getTime === 'function'\r\n}\r\n\r\n// Get available time interval measurement units.\r\nfunction getTimeIntervalMeasurementUnits(localeData, restrictedSetOfUnits)\r\n{\r\n\t// All available time interval measurement units.\r\n\tlet units = Object.keys(localeData)\r\n\r\n\t// If only a specific set of available\r\n\t// time measurement units can be used.\r\n\tif (restrictedSetOfUnits) {\r\n\t\t// Reduce available time interval measurement units\r\n\t\t// based on user's preferences.\r\n\t\tunits = restrictedSetOfUnits.filter(_ => units.indexOf(_) >= 0)\r\n\t}\r\n\r\n\t// Stock `Intl.RelativeTimeFormat` locale data doesn't have \"now\" units.\r\n\t// So either \"now\" is present in extended locale data\r\n\t// or it's taken from \".second.current\".\r\n\tif ((!restrictedSetOfUnits || restrictedSetOfUnits.indexOf('now') >= 0) &&\r\n\t\tunits.indexOf('now') < 0) {\r\n\t\tif (localeData.second.current) {\r\n\t\t\tunits.unshift('now')\r\n\t\t}\r\n\t}\r\n\r\n\treturn units\r\n}\r\n\r\nfunction getNowMessage(localeData, value) {\r\n\t// Specific \"now\" message form extended locale data (if present).\r\n\tif (localeData.now) {\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof localeData.now === 'string') {\r\n\t\t\treturn localeData.now\r\n\t\t}\r\n\t\t// Not handling `value === 0` as `localeData.now.current` here\r\n\t\t// because it wouldn't make sense: \"now\" is a moment,\r\n\t\t// so one can't possibly differentiate between a\r\n\t\t// \"previous\" moment, a \"current\" moment and a \"next moment\".\r\n\t\t// It can only be differentiated between \"past\" and \"future\".\r\n\t\tif (value <= 0) {\r\n\t\t\treturn localeData.now.past\r\n\t\t} else {\r\n\t\t\treturn localeData.now.future\r\n\t\t}\r\n\t}\r\n\t// Use \".second.current\" as \"now\" message.\r\n\treturn localeData.second.current\r\n\t// If this function was called then\r\n\t// it means that either \"now\" unit messages are\r\n\t// available or \".second.current\" message is present.\r\n}"]},"metadata":{},"sourceType":"module"}