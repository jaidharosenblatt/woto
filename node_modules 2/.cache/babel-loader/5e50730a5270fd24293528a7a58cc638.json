{"ast":null,"code":"import actionTypes from \"./actionTypes\";\n/**\n * Create a dispatch to start local loading in redux\n * @returns {Object} function to dispatch\n */\n\nexport function startLoading() {\n  return {\n    type: actionTypes.START_LOADING\n  };\n}\n/**\n * Create a dispatch to stop local loading in redux\n * @returns {Object} function to dispatch\n */\n\nexport function stopLoading() {\n  return {\n    type: actionTypes.STOP_LOADING\n  };\n}\n/**\n * Create a dispatch to start page loading in redux\n * @returns {Object} function to dispatch\n */\n\nexport function startPageLoading() {\n  return {\n    type: actionTypes.START_PAGE_LOADING\n  };\n}\n/**\n * Create a dispatch to stop page loading in redux\n * @returns {Object} function to dispatch\n */\n\nexport function stopPageLoading() {\n  return {\n    type: actionTypes.STOP_PAGE_LOADING\n  };\n}\n/**\n * Create an object for redux error dispatch\n * @returns {Object} function to dispatch\n */\n\nexport function clearError() {\n  return {\n    type: actionTypes.CLEAR_ERROR\n  };\n}\n/**\n * Create error message\n * @param {String} error type of error\n * @returns {Object} to dispatch to redux ex: \"There was an issue with \"\n */\n\nexport function setServerError(error) {\n  const errorMessage = \"There was an issue with \" + error;\n  return {\n    type: actionTypes.SET_SERVER_ERROR,\n    payload: errorMessage\n  };\n}\n/**\n * Create error message\n * @param {String} error type of error\n * @returns {Object} to dispatch to redux ex: \"There was an issue with \"\n */\n\nexport function clearServerError() {\n  return {\n    type: actionTypes.SET_SERVER_ERROR,\n    payload: undefined\n  };\n}\n/**\n * Create error message\n * @param {String} error type of error\n * @returns {Object} to dispatch to redux ex: \"There was an issue with \"\n */\n\nexport function setCustomServerError(error) {\n  return {\n    type: actionTypes.SET_SERVER_ERROR,\n    payload: error\n  };\n}\n/**\n * Create error message\n * @param {String} errorMessage type of error\n * @returns {Object} to dispatch to redux ex: \"There was an issue with \"\n */\n\nexport function setError(errorMessage) {\n  return {\n    type: actionTypes.SET_ERROR,\n    payload: errorMessage\n  };\n}\n/**\n * Create a success message\n * @param {String} message\n * @returns {Object} to dispatch to redux\n */\n\nexport function setSuccessMessage(message) {\n  return {\n    type: actionTypes.SET_SUCCESS,\n    payload: message\n  };\n}\n/**\n * Create a success message\n * @param {String} message\n * @returns {Object} to dispatch to redux\n */\n\nexport function setServerSuccessMessage(message) {\n  return {\n    type: actionTypes.SET_SERVER_SUCCESS,\n    payload: message\n  };\n}\n/**\n * Clear the success message\n * @returns {Object} to dispatch to redux\n */\n\nexport function clearServerSuccessMessage() {\n  return {\n    type: actionTypes.SET_SERVER_SUCCESS,\n    payload: undefined\n  };\n}\n/**\n * Clear the success message\n * @param {String} message\n * @returns {Object} to dispatch to redux\n */\n\nexport function clearSuccessMessage() {\n  return {\n    type: actionTypes.SET_SUCCESS,\n    payload: undefined\n  };\n}\n/**\n * Set status for roster\n * @param {Object} status including errors, successes\n * @returns {Object} to dispatch to redux\n */\n\nexport function setRosterStatus(status) {\n  return {\n    type: actionTypes.SET_ROSTER_STATUS,\n    payload: status\n  };\n}\n/**\n * Reset status for roster\n * @returns {Object} to dispatch to redux\n */\n\nexport function resetRosterStatus() {\n  return {\n    type: actionTypes.SET_ROSTER_STATUS,\n    payload: undefined\n  };\n}\n/**\n * Clear the modal status in redux\n * @param {String} the key of the modal from modalTypes.js\n * @returns {Object} to dispatch to redux\n */\n\nexport function setModalKey(key) {\n  return {\n    payload: key,\n    type: actionTypes.SET_MODAL_KEY\n  };\n}\n/**\n * Clear the modal status in redux\n * @returns {Object} to dispatch to redux\n */\n\nexport function clearModalKey() {\n  return {\n    type: actionTypes.CLEAR_MODAL_KEY\n  };\n}\n/**\n * Prevent modal from causing additional modal popups\n * TODO remove once sockets are implemented\n * @returns {Object} to dispatch to redux\n */\n\nexport function blockModal() {\n  return {\n    type: actionTypes.BLOCK_MODAL\n  };\n}\n/**\n * Reset the status state in redux\n * @returns {Object} to dispatch to redux\n */\n\nexport function resetStatus() {\n  return {\n    type: actionTypes.RESET\n  };\n}","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/status/actionCreators.js"],"names":["actionTypes","startLoading","type","START_LOADING","stopLoading","STOP_LOADING","startPageLoading","START_PAGE_LOADING","stopPageLoading","STOP_PAGE_LOADING","clearError","CLEAR_ERROR","setServerError","error","errorMessage","SET_SERVER_ERROR","payload","clearServerError","undefined","setCustomServerError","setError","SET_ERROR","setSuccessMessage","message","SET_SUCCESS","setServerSuccessMessage","SET_SERVER_SUCCESS","clearServerSuccessMessage","clearSuccessMessage","setRosterStatus","status","SET_ROSTER_STATUS","resetRosterStatus","setModalKey","key","SET_MODAL_KEY","clearModalKey","CLEAR_MODAL_KEY","blockModal","BLOCK_MODAL","resetStatus","RESET"],"mappings":"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","sourcesContent":["import actionTypes from \"./actionTypes\";\n\n/**\n * Create a dispatch to start local loading in redux\n * @returns {Object} function to dispatch\n */\nexport function startLoading() {\n  return {\n    type: actionTypes.START_LOADING,\n  };\n}\n\n/**\n * Create a dispatch to stop local loading in redux\n * @returns {Object} function to dispatch\n */\nexport function stopLoading() {\n  return {\n    type: actionTypes.STOP_LOADING,\n  };\n}\n\n/**\n * Create a dispatch to start page loading in redux\n * @returns {Object} function to dispatch\n */\nexport function startPageLoading() {\n  return {\n    type: actionTypes.START_PAGE_LOADING,\n  };\n}\n\n/**\n * Create a dispatch to stop page loading in redux\n * @returns {Object} function to dispatch\n */\nexport function stopPageLoading() {\n  return {\n    type: actionTypes.STOP_PAGE_LOADING,\n  };\n}\n\n/**\n * Create an object for redux error dispatch\n * @returns {Object} function to dispatch\n */\nexport function clearError() {\n  return {\n    type: actionTypes.CLEAR_ERROR,\n  };\n}\n\n/**\n * Create error message\n * @param {String} error type of error\n * @returns {Object} to dispatch to redux ex: \"There was an issue with \"\n */\nexport function setServerError(error) {\n  const errorMessage = \"There was an issue with \" + error;\n  return {\n    type: actionTypes.SET_SERVER_ERROR,\n    payload: errorMessage,\n  };\n}\n\n/**\n * Create error message\n * @param {String} error type of error\n * @returns {Object} to dispatch to redux ex: \"There was an issue with \"\n */\nexport function clearServerError() {\n  return {\n    type: actionTypes.SET_SERVER_ERROR,\n    payload: undefined,\n  };\n}\n\n/**\n * Create error message\n * @param {String} error type of error\n * @returns {Object} to dispatch to redux ex: \"There was an issue with \"\n */\nexport function setCustomServerError(error) {\n  return {\n    type: actionTypes.SET_SERVER_ERROR,\n    payload: error,\n  };\n}\n\n/**\n * Create error message\n * @param {String} errorMessage type of error\n * @returns {Object} to dispatch to redux ex: \"There was an issue with \"\n */\nexport function setError(errorMessage) {\n  return {\n    type: actionTypes.SET_ERROR,\n    payload: errorMessage,\n  };\n}\n\n/**\n * Create a success message\n * @param {String} message\n * @returns {Object} to dispatch to redux\n */\nexport function setSuccessMessage(message) {\n  return {\n    type: actionTypes.SET_SUCCESS,\n    payload: message,\n  };\n}\n\n/**\n * Create a success message\n * @param {String} message\n * @returns {Object} to dispatch to redux\n */\nexport function setServerSuccessMessage(message) {\n  return {\n    type: actionTypes.SET_SERVER_SUCCESS,\n    payload: message,\n  };\n}\n\n/**\n * Clear the success message\n * @returns {Object} to dispatch to redux\n */\nexport function clearServerSuccessMessage() {\n  return {\n    type: actionTypes.SET_SERVER_SUCCESS,\n    payload: undefined,\n  };\n}\n\n/**\n * Clear the success message\n * @param {String} message\n * @returns {Object} to dispatch to redux\n */\nexport function clearSuccessMessage() {\n  return {\n    type: actionTypes.SET_SUCCESS,\n    payload: undefined,\n  };\n}\n\n/**\n * Set status for roster\n * @param {Object} status including errors, successes\n * @returns {Object} to dispatch to redux\n */\nexport function setRosterStatus(status) {\n  return {\n    type: actionTypes.SET_ROSTER_STATUS,\n    payload: status,\n  };\n}\n\n/**\n * Reset status for roster\n * @returns {Object} to dispatch to redux\n */\nexport function resetRosterStatus() {\n  return {\n    type: actionTypes.SET_ROSTER_STATUS,\n    payload: undefined,\n  };\n}\n\n/**\n * Clear the modal status in redux\n * @param {String} the key of the modal from modalTypes.js\n * @returns {Object} to dispatch to redux\n */\nexport function setModalKey(key) {\n  return {\n    payload: key,\n    type: actionTypes.SET_MODAL_KEY,\n  };\n}\n\n/**\n * Clear the modal status in redux\n * @returns {Object} to dispatch to redux\n */\nexport function clearModalKey() {\n  return {\n    type: actionTypes.CLEAR_MODAL_KEY,\n  };\n}\n\n/**\n * Prevent modal from causing additional modal popups\n * TODO remove once sockets are implemented\n * @returns {Object} to dispatch to redux\n */\nexport function blockModal() {\n  return {\n    type: actionTypes.BLOCK_MODAL,\n  };\n}\n\n/**\n * Reset the status state in redux\n * @returns {Object} to dispatch to redux\n */\nexport function resetStatus() {\n  return {\n    type: actionTypes.RESET,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}