{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/analytics/tables/questionTable/expandRow.js\";\nimport React from \"react\";\nimport { Row, Col, Space } from \"antd\";\nimport { DownOutlined, UpOutlined } from \"@ant-design/icons\";\n/**\n * Expand row entry and seperate fields into two cols\n * @param {*} col1 list of fields to put on left side of expand\n * @param {*} col2 list of fields to put on right side of expand\n */\n\nexport const expandRow = (col1, col2) => {\n  return {\n    expandedRowRender: row => {\n      return /*#__PURE__*/React.createElement(Row, {\n        align: \"middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        span: 12,\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Space, {\n        direction: \"vertical\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }\n      }, col1.map(field => {\n        const value = row[field.label.toLowerCase()];\n\n        if (field.label && value) {\n          return /*#__PURE__*/React.createElement(\"p\", {\n            key: field.label,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 26\n            }\n          }, `${field.label}: ${value}`);\n        }\n\n        return null;\n      }))), /*#__PURE__*/React.createElement(Col, {\n        span: 12,\n        align: \"right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Space, {\n        direction: \"vertical\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      }, col2.map(field => {\n        const value = row[field.label.toLowerCase()];\n\n        if (field.label && value) {\n          return /*#__PURE__*/React.createElement(\"p\", {\n            key: field.label,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 26\n            }\n          }, `${field.label}: ${value}`);\n        }\n\n        return null;\n      }))));\n    },\n    rowExpandable: row => row.details !== undefined || row.concepts !== undefined,\n    expandIcon: ({\n      expanded,\n      onExpand,\n      record\n    }) => expanded ? /*#__PURE__*/React.createElement(DownOutlined, {\n      onClick: e => onExpand(record, e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }) : /*#__PURE__*/React.createElement(UpOutlined, {\n      onClick: e => onExpand(record, e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    })\n  };\n};\n/**\n * Seperate fields of course\n * @param {Array} questionTemplate from session or course\n * @returns {Array} inTable fields to display in cols\n * @returns {JSX} expand unused fields into a row\n */\n\nexport const separateFields = questionTemplate => {\n  let inTable = [];\n  let detailFieldsCol1 = [];\n  let detailFieldsCol2 = [];\n  let index = 0;\n  questionTemplate.forEach(field => {\n    if (field.showInTable) {\n      inTable.push(field);\n    } else {\n      if (index % 2 === 0) {\n        detailFieldsCol1.push(field);\n      } else {\n        detailFieldsCol2.push(field);\n      }\n\n      index++;\n    }\n  });\n  const expand = expandRow(detailFieldsCol1, detailFieldsCol2);\n  return {\n    expand,\n    inTable\n  };\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/analytics/tables/questionTable/expandRow.js"],"names":["React","Row","Col","Space","DownOutlined","UpOutlined","expandRow","col1","col2","expandedRowRender","row","map","field","value","label","toLowerCase","rowExpandable","details","undefined","concepts","expandIcon","expanded","onExpand","record","e","separateFields","questionTemplate","inTable","detailFieldsCol1","detailFieldsCol2","index","forEach","showInTable","push","expand"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Row, Col, Space } from \"antd\";\nimport { DownOutlined, UpOutlined } from \"@ant-design/icons\";\n\n/**\n * Expand row entry and seperate fields into two cols\n * @param {*} col1 list of fields to put on left side of expand\n * @param {*} col2 list of fields to put on right side of expand\n */\nexport const expandRow = (col1, col2) => {\n  return {\n    expandedRowRender: (row) => {\n      return (\n        <Row align=\"middle\">\n          <Col span={12} align=\"left\">\n            <Space direction=\"vertical\">\n              {col1.map((field) => {\n                const value = row[field.label.toLowerCase()];\n                if (field.label && value) {\n                  return <p key={field.label}>{`${field.label}: ${value}`}</p>;\n                }\n                return null;\n              })}\n            </Space>\n          </Col>\n          <Col span={12} align=\"right\">\n            <Space direction=\"vertical\">\n              {col2.map((field) => {\n                const value = row[field.label.toLowerCase()];\n                if (field.label && value) {\n                  return <p key={field.label}>{`${field.label}: ${value}`}</p>;\n                }\n                return null;\n              })}\n            </Space>\n          </Col>\n        </Row>\n      );\n    },\n    rowExpandable: (row) =>\n      row.details !== undefined || row.concepts !== undefined,\n    expandIcon: ({ expanded, onExpand, record }) =>\n      expanded ? (\n        <DownOutlined onClick={(e) => onExpand(record, e)} />\n      ) : (\n        <UpOutlined onClick={(e) => onExpand(record, e)} />\n      ),\n  };\n};\n\n/**\n * Seperate fields of course\n * @param {Array} questionTemplate from session or course\n * @returns {Array} inTable fields to display in cols\n * @returns {JSX} expand unused fields into a row\n */\nexport const separateFields = (questionTemplate) => {\n  let inTable = [];\n  let detailFieldsCol1 = [];\n  let detailFieldsCol2 = [];\n  let index = 0;\n\n  questionTemplate.forEach((field) => {\n    if (field.showInTable) {\n      inTable.push(field);\n    } else {\n      if (index % 2 === 0) {\n        detailFieldsCol1.push(field);\n      } else {\n        detailFieldsCol2.push(field);\n      }\n      index++;\n    }\n  });\n\n  const expand = expandRow(detailFieldsCol1, detailFieldsCol2);\n  return {\n    expand,\n    inTable,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}