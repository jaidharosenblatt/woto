{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { canonical, day, hour, getStep, getDate } from '../gradation';\nimport { intlDateTimeFormatSupported } from '../locale'; // A cache for `Intl.DateTimeFormat` twitter formatters\n// for various locales (is a global variable).\n\nvar formatters = {}; // Twitter style relative time formatting.\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\n// Seconds, minutes and hours are shown relatively,\n// and other intervals can be shown using full date format.\n\nexport default {\n  // Twitter gradation is derived from \"canonical\" gradation\n  // adjusting its \"minute\" `threshold` to be 45.\n  gradation: [// Minutes\n  _objectSpread({}, getStep(canonical, 'minute'), {\n    // Starts showing `1m` after `59s`.\n    threshold: 59.5\n  }), // Hours\n  _objectSpread({}, getStep(canonical, 'hour'), {\n    // After `59m` it will show `1h`.\n    threshold: 59.5 * 60\n  }), // If `date` and `now` happened the same year,\n  // then only output month and day.\n  {\n    threshold: day - 0.5 * hour,\n    format: function format(value, locale) {\n      // Whether can use `Intl.DateTimeFormat`.\n      // If `Intl` is not available,\n      // or the locale is not supported,\n      // then don't override the default labels.\n\n      /* istanbul ignore if */\n      if (!intlDateTimeFormatSupported()) {\n        return;\n      }\n      /* istanbul ignore else */\n\n\n      if (!formatters[locale]) {\n        formatters[locale] = {};\n      }\n      /* istanbul ignore else */\n\n\n      if (!formatters[locale].this_year) {\n        // \"Apr 11\" (MMMd)\n        formatters[locale].this_year = new Intl.DateTimeFormat(locale, {\n          month: 'short',\n          day: 'numeric'\n        });\n      } // Output month and day.\n\n\n      return formatters[locale].this_year.format(getDate(value));\n    }\n  }, // If `date` and `now` happened in defferent years,\n  // then output day, month and year.\n  {\n    threshold: function threshold(now, future) {\n      if (future) {\n        // Jan 1st 00:00 of the next year.\n        var nextYear = new Date(new Date(now).getFullYear() + 1, 0);\n        return (nextYear.getTime() - now) / 1000;\n      } else {\n        // Jan 1st of the current year.\n        var thisYear = new Date(new Date(now).getFullYear(), 0);\n        return (now - thisYear.getTime()) / 1000;\n      }\n    },\n    format: function format(value, locale) {\n      // Whether can use `Intl.DateTimeFormat`.\n      // If `Intl` is not available,\n      // or the locale is not supported,\n      // then don't override the default labels.\n\n      /* istanbul ignore if */\n      if (!intlDateTimeFormatSupported()) {\n        return;\n      }\n      /* istanbul ignore if */\n\n\n      if (!formatters[locale]) {\n        formatters[locale] = {};\n      }\n      /* istanbul ignore else */\n\n\n      if (!formatters[locale].other) {\n        // \"Apr 11, 2017\" (yMMMd)\n        formatters[locale].other = new Intl.DateTimeFormat(locale, {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric'\n        });\n      } // Output day, month and year.\n\n\n      return formatters[locale].other.format(getDate(value));\n    }\n  }],\n  flavour: ['tiny', 'short-time', 'narrow', 'short']\n};","map":{"version":3,"sources":["../../source/style/twitter.js"],"names":["formatters","gradation","getStep","threshold","day","format","intlDateTimeFormatSupported","Intl","month","getDate","nextYear","thisYear","now","year","flavour"],"mappings":"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","sourcesContent":["import { canonical, day, hour, getStep, getDate } from '../gradation'\r\nimport { intlDateTimeFormatSupported } from '../locale'\r\n\r\n// A cache for `Intl.DateTimeFormat` twitter formatters\r\n// for various locales (is a global variable).\r\nconst formatters = {}\r\n\r\n// Twitter style relative time formatting.\r\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\r\n// Seconds, minutes and hours are shown relatively,\r\n// and other intervals can be shown using full date format.\r\nexport default\r\n{\r\n\t// Twitter gradation is derived from \"canonical\" gradation\r\n\t// adjusting its \"minute\" `threshold` to be 45.\r\n\tgradation: [\r\n\t\t// Minutes\r\n\t\t{\r\n\t\t\t...getStep(canonical, 'minute'),\r\n\t\t\t// Starts showing `1m` after `59s`.\r\n\t\t\tthreshold: 59.5\r\n\t\t},\r\n\t\t// Hours\r\n\t\t{\r\n\t\t\t...getStep(canonical, 'hour'),\r\n\t\t\t// After `59m` it will show `1h`.\r\n\t\t\tthreshold: 59.5 * 60,\r\n\t\t},\r\n\t\t// If `date` and `now` happened the same year,\r\n\t\t// then only output month and day.\r\n\t\t{\r\n\t\t\tthreshold: day - 0.5 * hour,\r\n\t\t\tformat(value, locale) {\r\n\t\t\t\t// Whether can use `Intl.DateTimeFormat`.\r\n\t\t\t\t// If `Intl` is not available,\r\n\t\t\t\t// or the locale is not supported,\r\n\t\t\t\t// then don't override the default labels.\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!intlDateTimeFormatSupported()) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale]) {\r\n\t\t\t\t\tformatters[locale] = {}\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale].this_year) {\r\n\t\t\t\t\t// \"Apr 11\" (MMMd)\r\n\t\t\t\t\tformatters[locale].this_year = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\t\t\tmonth : 'short',\r\n\t\t\t\t\t\tday   : 'numeric'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t// Output month and day.\r\n\t\t\t\treturn formatters[locale].this_year.format(getDate(value))\r\n\t\t\t}\r\n\t\t},\r\n\t\t// If `date` and `now` happened in defferent years,\r\n\t\t// then output day, month and year.\r\n\t\t{\r\n\t\t\tthreshold(now, future) {\r\n\t\t\t\tif (future) {\r\n\t\t\t\t\t// Jan 1st 00:00 of the next year.\r\n\t\t\t\t\tconst nextYear = new Date(new Date(now).getFullYear() + 1, 0)\r\n\t\t\t\t\treturn (nextYear.getTime() - now) / 1000\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Jan 1st of the current year.\r\n\t\t\t\t\tconst thisYear = new Date(new Date(now).getFullYear(), 0)\r\n\t\t\t\t\treturn (now - thisYear.getTime()) / 1000\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tformat(value, locale) {\r\n\t\t\t\t// Whether can use `Intl.DateTimeFormat`.\r\n\t\t\t\t// If `Intl` is not available,\r\n\t\t\t\t// or the locale is not supported,\r\n\t\t\t\t// then don't override the default labels.\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!intlDateTimeFormatSupported()) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!formatters[locale]) {\r\n\t\t\t\t\tformatters[locale] = {}\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale].other) {\r\n\t\t\t\t\t// \"Apr 11, 2017\" (yMMMd)\r\n\t\t\t\t\tformatters[locale].other = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\t\t\tyear  : 'numeric',\r\n\t\t\t\t\t\tmonth : 'short',\r\n\t\t\t\t\t\tday   : 'numeric'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t// Output day, month and year.\r\n\t\t\t\treturn formatters[locale].other.format(getDate(value))\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\r\n\tflavour: [\r\n\t\t'tiny',\r\n\t\t'short-time',\r\n\t\t'narrow',\r\n\t\t'short'\r\n\t]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}