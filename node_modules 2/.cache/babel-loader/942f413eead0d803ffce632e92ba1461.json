{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/layout/GlobalAlerts.js\";\nimport { message } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../redux/selectors\";\nimport { clearServerError, clearServerSuccessMessage } from \"../../redux/status/actionCreators\";\n/**\n * Wrap child components in an alert\n * Check redux for error state and if it exists display an alert\n * @param {Array} children\n */\n\nconst GlobalAlerts = props => {\n  const {\n    serverError,\n    serverSuccess\n  } = props;\n  const _clearSuccessMessage = props.clearServerSuccessMessage;\n  const _clearError = props.clearServerError;\n  useEffect(() => {\n    if (serverError) {\n      message.error(serverError);\n    }\n\n    if (serverSuccess) {\n      message.success(serverSuccess);\n    }\n\n    if (serverError || serverSuccess) {\n      _clearSuccessMessage();\n\n      _clearError();\n    }\n  }, [serverError, serverSuccess, _clearSuccessMessage, _clearError]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }\n  }, props.children);\n};\n\nconst mapStateToProps = state => {\n  return {\n    serverError: selectors.getServerError(state),\n    serverSuccess: selectors.getServerSuccess(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  clearServerSuccessMessage,\n  clearServerError\n})(GlobalAlerts);","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/layout/GlobalAlerts.js"],"names":["message","React","useEffect","connect","selectors","clearServerError","clearServerSuccessMessage","GlobalAlerts","props","serverError","serverSuccess","_clearSuccessMessage","_clearError","error","success","children","mapStateToProps","state","getServerError","getServerSuccess"],"mappings":";AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SACEC,gBADF,EAEEC,yBAFF,QAGO,mCAHP;AAKA;;;;;;AAKA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAiCF,KAAvC;AACA,QAAMG,oBAAoB,GAAGH,KAAK,CAACF,yBAAnC;AACA,QAAMM,WAAW,GAAGJ,KAAK,CAACH,gBAA1B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,WAAJ,EAAiB;AACfT,MAAAA,OAAO,CAACa,KAAR,CAAcJ,WAAd;AACD;;AACD,QAAIC,aAAJ,EAAmB;AACjBV,MAAAA,OAAO,CAACc,OAAR,CAAgBJ,aAAhB;AACD;;AACD,QAAID,WAAW,IAAIC,aAAnB,EAAkC;AAChCC,MAAAA,oBAAoB;;AACpBC,MAAAA,WAAW;AACZ;AACF,GAXQ,EAWN,CAACH,WAAD,EAAcC,aAAd,EAA6BC,oBAA7B,EAAmDC,WAAnD,CAXM,CAAT;AAaA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMJ,KAAK,CAACO,QAAZ,CAAP;AACD,CAnBD;;AAqBA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLR,IAAAA,WAAW,EAAEL,SAAS,CAACc,cAAV,CAAyBD,KAAzB,CADR;AAELP,IAAAA,aAAa,EAAEN,SAAS,CAACe,gBAAV,CAA2BF,KAA3B;AAFV,GAAP;AAID,CALD;;AAOA,eAAed,OAAO,CAACa,eAAD,EAAkB;AACtCV,EAAAA,yBADsC;AAEtCD,EAAAA;AAFsC,CAAlB,CAAP,CAGZE,YAHY,CAAf","sourcesContent":["import { message } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../redux/selectors\";\nimport {\n  clearServerError,\n  clearServerSuccessMessage,\n} from \"../../redux/status/actionCreators\";\n\n/**\n * Wrap child components in an alert\n * Check redux for error state and if it exists display an alert\n * @param {Array} children\n */\nconst GlobalAlerts = (props) => {\n  const { serverError, serverSuccess } = props;\n  const _clearSuccessMessage = props.clearServerSuccessMessage;\n  const _clearError = props.clearServerError;\n\n  useEffect(() => {\n    if (serverError) {\n      message.error(serverError);\n    }\n    if (serverSuccess) {\n      message.success(serverSuccess);\n    }\n    if (serverError || serverSuccess) {\n      _clearSuccessMessage();\n      _clearError();\n    }\n  }, [serverError, serverSuccess, _clearSuccessMessage, _clearError]);\n\n  return <div>{props.children}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    serverError: selectors.getServerError(state),\n    serverSuccess: selectors.getServerSuccess(state),\n  };\n};\n\nexport default connect(mapStateToProps, {\n  clearServerSuccessMessage,\n  clearServerError,\n})(GlobalAlerts);\n"]},"metadata":{},"sourceType":"module"}