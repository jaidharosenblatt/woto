{"ast":null,"code":"/**\n * @function\n * Get current user\n * @param {Object} store - Redux store\n * @returns {Object} user\n */\nconst getUser = store => {\n  return store.auth.user;\n};\n/**\n * @function\n * Get current user's ID\n * @param {Object} store - Redux store\n * @returns {String} userID\n */\n\n\nconst getUserID = store => {\n  var _store$auth$user;\n\n  return (_store$auth$user = store.auth.user) === null || _store$auth$user === void 0 ? void 0 : _store$auth$user._id;\n};\n/**\n * @function\n * Get current user's name\n * @param {Object} store - Redux store\n * @returns {String} User's name\n */\n\n\nconst getUserName = store => {\n  var _store$auth$user2;\n\n  return (_store$auth$user2 = store.auth.user) === null || _store$auth$user2 === void 0 ? void 0 : _store$auth$user2.name;\n};\n/**\n * @function\n * Get current user's meeting URL\n * @param {Object} store - Redux store\n * @returns {String} User's meeting URL\n */\n\n\nconst getUserMeetingURL = store => {\n  var _store$auth$user3;\n\n  return (_store$auth$user3 = store.auth.user) === null || _store$auth$user3 === void 0 ? void 0 : _store$auth$user3.meetingURL;\n};\n/**\n * @function\n * Get whether user is authenticated\n * @param {Object} store - Redux store\n * @returns {Boolean} user is authenticated\n */\n\n\nconst getAuthenticationStatus = store => {\n  return store.auth.isAuthenticated;\n};\n/**\n * @function\n * Get whether user is verified\n * @param {Object} store - Redux store\n * @returns {Boolean} user is verified\n */\n\n\nconst getVerificationStatus = store => {\n  var _store$auth$user4;\n\n  return (_store$auth$user4 = store.auth.user) === null || _store$auth$user4 === void 0 ? void 0 : _store$auth$user4.verified;\n};\n/**\n * @function\n * Get whether user is student or instructor\n * @param {Object} store - Redux store\n * @returns {String} student or instructor\n */\n\n\nconst getUserType = store => {\n  return store.auth.userType;\n};\n/**\n * @function\n * Get whether of whether user is instructor\n * @param {Object} store - Redux store\n * @returns {Boolean} if user is an instructor\n */\n\n\nconst userIsInstructor = store => {\n  return store.auth.userType === \"instructor\";\n};\n\nexport default {\n  getUser,\n  getUserID,\n  getUserName,\n  getUserMeetingURL,\n  getAuthenticationStatus,\n  getUserType,\n  userIsInstructor,\n  getVerificationStatus\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/auth/authSelectors.js"],"names":["getUser","store","auth","user","getUserID","_id","getUserName","name","getUserMeetingURL","meetingURL","getAuthenticationStatus","isAuthenticated","getVerificationStatus","verified","getUserType","userType","userIsInstructor"],"mappings":"AAAA;;;;;;AAMA,MAAMA,OAAO,GAAIC,KAAD,IAAW;AACzB,SAAOA,KAAK,CAACC,IAAN,CAAWC,IAAlB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,SAAS,GAAIH,KAAD,IAAW;AAAA;;AAC3B,6BAAOA,KAAK,CAACC,IAAN,CAAWC,IAAlB,qDAAO,iBAAiBE,GAAxB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,WAAW,GAAIL,KAAD,IAAW;AAAA;;AAC7B,8BAAOA,KAAK,CAACC,IAAN,CAAWC,IAAlB,sDAAO,kBAAiBI,IAAxB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,iBAAiB,GAAIP,KAAD,IAAW;AAAA;;AACnC,8BAAOA,KAAK,CAACC,IAAN,CAAWC,IAAlB,sDAAO,kBAAiBM,UAAxB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,uBAAuB,GAAIT,KAAD,IAAW;AACzC,SAAOA,KAAK,CAACC,IAAN,CAAWS,eAAlB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,qBAAqB,GAAIX,KAAD,IAAW;AAAA;;AACvC,8BAAOA,KAAK,CAACC,IAAN,CAAWC,IAAlB,sDAAO,kBAAiBU,QAAxB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,WAAW,GAAIb,KAAD,IAAW;AAC7B,SAAOA,KAAK,CAACC,IAAN,CAAWa,QAAlB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,gBAAgB,GAAIf,KAAD,IAAW;AAClC,SAAOA,KAAK,CAACC,IAAN,CAAWa,QAAX,KAAwB,YAA/B;AACD,CAFD;;AAIA,eAAe;AACbf,EAAAA,OADa;AAEbI,EAAAA,SAFa;AAGbE,EAAAA,WAHa;AAIbE,EAAAA,iBAJa;AAKbE,EAAAA,uBALa;AAMbI,EAAAA,WANa;AAObE,EAAAA,gBAPa;AAQbJ,EAAAA;AARa,CAAf","sourcesContent":["/**\n * @function\n * Get current user\n * @param {Object} store - Redux store\n * @returns {Object} user\n */\nconst getUser = (store) => {\n  return store.auth.user;\n};\n\n/**\n * @function\n * Get current user's ID\n * @param {Object} store - Redux store\n * @returns {String} userID\n */\nconst getUserID = (store) => {\n  return store.auth.user?._id;\n};\n\n/**\n * @function\n * Get current user's name\n * @param {Object} store - Redux store\n * @returns {String} User's name\n */\nconst getUserName = (store) => {\n  return store.auth.user?.name;\n};\n\n/**\n * @function\n * Get current user's meeting URL\n * @param {Object} store - Redux store\n * @returns {String} User's meeting URL\n */\nconst getUserMeetingURL = (store) => {\n  return store.auth.user?.meetingURL;\n};\n\n/**\n * @function\n * Get whether user is authenticated\n * @param {Object} store - Redux store\n * @returns {Boolean} user is authenticated\n */\nconst getAuthenticationStatus = (store) => {\n  return store.auth.isAuthenticated;\n};\n\n/**\n * @function\n * Get whether user is verified\n * @param {Object} store - Redux store\n * @returns {Boolean} user is verified\n */\nconst getVerificationStatus = (store) => {\n  return store.auth.user?.verified;\n};\n\n/**\n * @function\n * Get whether user is student or instructor\n * @param {Object} store - Redux store\n * @returns {String} student or instructor\n */\nconst getUserType = (store) => {\n  return store.auth.userType;\n};\n\n/**\n * @function\n * Get whether of whether user is instructor\n * @param {Object} store - Redux store\n * @returns {Boolean} if user is an instructor\n */\nconst userIsInstructor = (store) => {\n  return store.auth.userType === \"instructor\";\n};\n\nexport default {\n  getUser,\n  getUserID,\n  getUserName,\n  getUserMeetingURL,\n  getAuthenticationStatus,\n  getUserType,\n  userIsInstructor,\n  getVerificationStatus,\n};\n"]},"metadata":{},"sourceType":"module"}