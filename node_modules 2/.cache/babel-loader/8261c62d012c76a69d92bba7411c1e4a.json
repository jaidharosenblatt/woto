{"ast":null,"code":"import actionTypes from \"./actionTypes\";\nconst initialState = {\n  loading: false,\n  pageLoading: true\n};\n/**\n * @function statusReducer\n * Holds state for loading and error\n * @param {Object} state - Current status of app\n * @param {Object} action - action to be reduced\n * @returns {Object} - new status of app\n */\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    case actionTypes.SET_SERVER_ERROR:\n      return { ...state,\n        serverError: action.payload\n      };\n\n    case actionTypes.CLEAR_ERROR:\n      return { ...state,\n        error: undefined\n      };\n\n    case actionTypes.START_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case actionTypes.STOP_LOADING:\n      return { ...state,\n        loading: false\n      };\n\n    case actionTypes.START_PAGE_LOADING:\n      return { ...state,\n        pageLoading: true\n      };\n\n    case actionTypes.STOP_PAGE_LOADING:\n      return { ...state,\n        pageLoading: false\n      };\n\n    case actionTypes.SET_SUCCESS:\n      return { ...state,\n        success: action.payload\n      };\n\n    case actionTypes.SET_SERVER_SUCCESS:\n      return { ...state,\n        serverSuccess: action.payload\n      };\n\n    case actionTypes.SET_ROSTER_STATUS:\n      return { ...state,\n        roster: action.payload\n      };\n\n    case actionTypes.SET_MODAL_KEY:\n      return { ...state,\n        modalKey: action.payload\n      };\n\n    case actionTypes.CLEAR_MODAL_KEY:\n      return { ...state,\n        modalKey: null,\n        blockModal: true\n      };\n\n    case actionTypes.BLOCK_MODAL:\n      return { ...state,\n        blockModal: true\n      };\n\n    case actionTypes.RESET:\n      return initialState;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/status/statusReducer.js"],"names":["actionTypes","initialState","loading","pageLoading","state","action","type","SET_ERROR","error","payload","SET_SERVER_ERROR","serverError","CLEAR_ERROR","undefined","START_LOADING","STOP_LOADING","START_PAGE_LOADING","STOP_PAGE_LOADING","SET_SUCCESS","success","SET_SERVER_SUCCESS","serverSuccess","SET_ROSTER_STATUS","roster","SET_MODAL_KEY","modalKey","CLEAR_MODAL_KEY","blockModal","BLOCK_MODAL","RESET"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;AAKA;;;;;;;;AAOA,gBAAe,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACO,SAAjB;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,KAAK,EAAEH,MAAM,CAACI;AAFT,OAAP;;AAIF,SAAKT,WAAW,CAACU,gBAAjB;AACE,aAAO,EACL,GAAGN,KADE;AAELO,QAAAA,WAAW,EAAEN,MAAM,CAACI;AAFf,OAAP;;AAIF,SAAKT,WAAW,CAACY,WAAjB;AACE,aAAO,EACL,GAAGR,KADE;AAELI,QAAAA,KAAK,EAAEK;AAFF,OAAP;;AAIF,SAAKb,WAAW,CAACc,aAAjB;AACE,aAAO,EACL,GAAGV,KADE;AAELF,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKF,WAAW,CAACe,YAAjB;AACE,aAAO,EACL,GAAGX,KADE;AAELF,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKF,WAAW,CAACgB,kBAAjB;AACE,aAAO,EACL,GAAGZ,KADE;AAELD,QAAAA,WAAW,EAAE;AAFR,OAAP;;AAIF,SAAKH,WAAW,CAACiB,iBAAjB;AACE,aAAO,EACL,GAAGb,KADE;AAELD,QAAAA,WAAW,EAAE;AAFR,OAAP;;AAIF,SAAKH,WAAW,CAACkB,WAAjB;AACE,aAAO,EACL,GAAGd,KADE;AAELe,QAAAA,OAAO,EAAEd,MAAM,CAACI;AAFX,OAAP;;AAIF,SAAKT,WAAW,CAACoB,kBAAjB;AACE,aAAO,EACL,GAAGhB,KADE;AAELiB,QAAAA,aAAa,EAAEhB,MAAM,CAACI;AAFjB,OAAP;;AAIF,SAAKT,WAAW,CAACsB,iBAAjB;AACE,aAAO,EACL,GAAGlB,KADE;AAELmB,QAAAA,MAAM,EAAElB,MAAM,CAACI;AAFV,OAAP;;AAIF,SAAKT,WAAW,CAACwB,aAAjB;AACE,aAAO,EACL,GAAGpB,KADE;AAELqB,QAAAA,QAAQ,EAAEpB,MAAM,CAACI;AAFZ,OAAP;;AAIF,SAAKT,WAAW,CAAC0B,eAAjB;AACE,aAAO,EACL,GAAGtB,KADE;AAELqB,QAAAA,QAAQ,EAAE,IAFL;AAGLE,QAAAA,UAAU,EAAE;AAHP,OAAP;;AAKF,SAAK3B,WAAW,CAAC4B,WAAjB;AACE,aAAO,EACL,GAAGxB,KADE;AAELuB,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIF,SAAK3B,WAAW,CAAC6B,KAAjB;AACE,aAAO5B,YAAP;;AACF;AACE,aAAOG,KAAP;AAtEJ;AAwED,CAzED","sourcesContent":["import actionTypes from \"./actionTypes\";\n\nconst initialState = {\n  loading: false,\n  pageLoading: true,\n};\n\n/**\n * @function statusReducer\n * Holds state for loading and error\n * @param {Object} state - Current status of app\n * @param {Object} action - action to be reduced\n * @returns {Object} - new status of app\n */\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case actionTypes.SET_SERVER_ERROR:\n      return {\n        ...state,\n        serverError: action.payload,\n      };\n    case actionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: undefined,\n      };\n    case actionTypes.START_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actionTypes.STOP_LOADING:\n      return {\n        ...state,\n        loading: false,\n      };\n    case actionTypes.START_PAGE_LOADING:\n      return {\n        ...state,\n        pageLoading: true,\n      };\n    case actionTypes.STOP_PAGE_LOADING:\n      return {\n        ...state,\n        pageLoading: false,\n      };\n    case actionTypes.SET_SUCCESS:\n      return {\n        ...state,\n        success: action.payload,\n      };\n    case actionTypes.SET_SERVER_SUCCESS:\n      return {\n        ...state,\n        serverSuccess: action.payload,\n      };\n    case actionTypes.SET_ROSTER_STATUS:\n      return {\n        ...state,\n        roster: action.payload,\n      };\n    case actionTypes.SET_MODAL_KEY:\n      return {\n        ...state,\n        modalKey: action.payload,\n      };\n    case actionTypes.CLEAR_MODAL_KEY:\n      return {\n        ...state,\n        modalKey: null,\n        blockModal: true,\n      };\n    case actionTypes.BLOCK_MODAL:\n      return {\n        ...state,\n        blockModal: true,\n      };\n    case actionTypes.RESET:\n      return initialState;\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}