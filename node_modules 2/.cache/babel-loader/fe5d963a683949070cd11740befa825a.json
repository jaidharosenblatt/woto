{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/user/verify/UnverifiedAccount.js\";\nimport React from \"react\";\nimport { Button } from \"antd\";\nimport ReverifyAccountForm from \"./ReverifyAccountForm\";\nimport { EmailImage, WaitingImage } from \"../../../static/LoadedImages\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../../redux/selectors\";\nimport { reverifyEmail } from \"../../../redux/auth/actionCreators\";\nimport PageCard from \"../../util-components/centeredpage/PageCard\";\nimport VerticalSpace from \"../../util-components/vertical-space/VerticalSpace\";\nimport ErrorSuccess from \"../../util-components/error-success/ErrorSuccess\";\n/**\n * Prompt user to verify their account\n * Use user object stored in state to provide email values or\n * allow user to enter email if no state\n */\n\nconst UnverifiedAccount = props => {\n  var _props$user, _props$user$name, _props$user2, _props$user3;\n\n  const name = (_props$user = props.user) === null || _props$user === void 0 ? void 0 : (_props$user$name = _props$user.name) === null || _props$user$name === void 0 ? void 0 : _props$user$name.split(\" \")[0];\n\n  const handleResetEmail = async () => {\n    await props.reverifyEmail(props.user.email);\n  };\n\n  const userIsUnverifiedInstructor = ((_props$user2 = props.user) === null || _props$user2 === void 0 ? void 0 : _props$user2.isOauthAuthenticated) && !((_props$user3 = props.user) === null || _props$user3 === void 0 ? void 0 : _props$user3.verified);\n\n  if (userIsUnverifiedInstructor) {\n    var _props$user4;\n\n    return /*#__PURE__*/React.createElement(PageCard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(VerticalSpace, {\n      centered: true,\n      style: {\n        maxWidth: 500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        fontSize: 24\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, name, \", you are not yet a verified instructor\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, \"Please email jrr59@duke.edu from \", (_props$user4 = props.user) === null || _props$user4 === void 0 ? void 0 : _props$user4.email, \" with proof that you are an accredited professor or faculty member to be verified. Please be patient, as we manually verify each instructor to ensure the safety of our users.\"), /*#__PURE__*/React.createElement(WaitingImage, {\n      className: \"small-hero-image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      target: \"_blank\",\n      href: \"mailto:jrr59@duke.edu\",\n      size: \"large\",\n      type: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, \"Email jrr59@duke.edu\")));\n  }\n\n  return /*#__PURE__*/React.createElement(PageCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(VerticalSpace, {\n    style: {\n      maxWidth: 550\n    },\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      fontSize: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, name ? `${name}, please verify your email` : \"Please verify your email\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, props.userIsInstructor ? \"You will need to verify your email before creating a course\" : \"You will need to verify your email before accessing or enrolling in courses\"), /*#__PURE__*/React.createElement(EmailImage, {\n    className: \"small-hero-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), props.user ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reverify-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"We sent \", props.user.email, \" a link to verify your account. If you have not received the email after a few minutes, please check your spam/promotions folder. Note that some universities take up to 10 minutes to process emails.\"), /*#__PURE__*/React.createElement(ErrorSuccess, {\n    showSuccess: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    block: true,\n    onClick: handleResetEmail,\n    size: \"large\",\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"Resend Email\")) : /*#__PURE__*/React.createElement(ReverifyAccountForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userIsInstructor: selectors.userIsInstructor(state),\n    user: selectors.getUser(state),\n    loading: selectors.getLoading(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  reverifyEmail\n})(UnverifiedAccount);","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/user/verify/UnverifiedAccount.js"],"names":["React","Button","ReverifyAccountForm","EmailImage","WaitingImage","connect","selectors","reverifyEmail","PageCard","VerticalSpace","ErrorSuccess","UnverifiedAccount","props","name","user","split","handleResetEmail","email","userIsUnverifiedInstructor","isOauthAuthenticated","verified","maxWidth","fontSize","userIsInstructor","mapStateToProps","state","getUser","loading","getLoading"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button } from \"antd\";\nimport ReverifyAccountForm from \"./ReverifyAccountForm\";\nimport { EmailImage, WaitingImage } from \"../../../static/LoadedImages\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../../redux/selectors\";\nimport { reverifyEmail } from \"../../../redux/auth/actionCreators\";\nimport PageCard from \"../../util-components/centeredpage/PageCard\";\nimport VerticalSpace from \"../../util-components/vertical-space/VerticalSpace\";\nimport ErrorSuccess from \"../../util-components/error-success/ErrorSuccess\";\n\n/**\n * Prompt user to verify their account\n * Use user object stored in state to provide email values or\n * allow user to enter email if no state\n */\nconst UnverifiedAccount = (props) => {\n  const name = props.user?.name?.split(\" \")[0];\n\n  const handleResetEmail = async () => {\n    await props.reverifyEmail(props.user.email);\n  };\n\n  const userIsUnverifiedInstructor = props.user?.isOauthAuthenticated && !props.user?.verified;\n  if (userIsUnverifiedInstructor) {\n    return (\n      <PageCard>\n        <VerticalSpace centered style={{ maxWidth: 500 }}>\n          <h2 style={{ fontSize: 24 }}>{name}, you are not yet a verified instructor</h2>\n          <p>\n            Please email jrr59@duke.edu from {props.user?.email} with proof that you are an\n            accredited professor or faculty member to be verified. Please be patient, as we manually\n            verify each instructor to ensure the safety of our users.\n          </p>\n          <WaitingImage className=\"small-hero-image\" />\n          <Button target=\"_blank\" href=\"mailto:jrr59@duke.edu\" size=\"large\" type=\"primary\">\n            Email jrr59@duke.edu\n          </Button>\n        </VerticalSpace>\n      </PageCard>\n    );\n  }\n\n  return (\n    <PageCard>\n      <VerticalSpace style={{ maxWidth: 550 }} centered>\n        <h2 style={{ fontSize: 24 }}>\n          {name ? `${name}, please verify your email` : \"Please verify your email\"}\n        </h2>\n        <p>\n          {props.userIsInstructor\n            ? \"You will need to verify your email before creating a course\"\n            : \"You will need to verify your email before accessing or enrolling in courses\"}\n        </p>\n\n        <EmailImage className=\"small-hero-image\" />\n\n        {props.user ? (\n          <div className=\"reverify-wrapper\">\n            <p>\n              We sent {props.user.email} a link to verify your account. If you have not received the\n              email after a few minutes, please check your spam/promotions folder. Note that some\n              universities take up to 10 minutes to process emails.\n            </p>\n            <ErrorSuccess showSuccess />\n            <Button block onClick={handleResetEmail} size=\"large\" type=\"primary\">\n              Resend Email\n            </Button>\n          </div>\n        ) : (\n          <ReverifyAccountForm />\n        )}\n      </VerticalSpace>\n    </PageCard>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    userIsInstructor: selectors.userIsInstructor(state),\n    user: selectors.getUser(state),\n    loading: selectors.getLoading(state),\n  };\n};\nexport default connect(mapStateToProps, { reverifyEmail })(UnverifiedAccount);\n"]},"metadata":{},"sourceType":"module"}