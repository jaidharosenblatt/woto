{"ast":null,"code":"import { defaultFields } from \"../../components/course/helpform/defaultFields\";\n/**\n * @function\n * Get course from courses store or sorted Courses\n * @param {Object} store - Redux store\n * @returns {Object} course\n */\n\nconst getCourse = store => {\n  const courseID = store.currentCourse;\n\n  if (courseID in store.courses) {\n    return store.courses[courseID];\n  } else {\n    return store.sortedCourses.find(course => course._id === courseID);\n  }\n};\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Object} Session or undefined if there is none\n */\n\n\nconst getSession = store => {\n  const course = getCourse(store);\n  return course === null || course === void 0 ? void 0 : course.session;\n};\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Object} Question\n */\n\n\nconst getActiveQuestion = store => {\n  var _getCourse;\n\n  return (_getCourse = getCourse(store)) === null || _getCourse === void 0 ? void 0 : _getCourse.activeQuestion;\n};\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Array} Discussions\n */\n\n\nconst getDiscussions = store => {\n  const course = getCourse(store);\n  return (course === null || course === void 0 ? void 0 : course.discussions) ? course === null || course === void 0 ? void 0 : course.discussions : [];\n};\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Array} Questions\n */\n\n\nconst getQuestions = store => {\n  const course = getCourse(store);\n  return (course === null || course === void 0 ? void 0 : course.questions) ? course === null || course === void 0 ? void 0 : course.questions : [];\n};\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Object} Discussion\n */\n\n\nconst getActiveDiscussion = store => {\n  var _getCourse2;\n\n  return (_getCourse2 = getCourse(store)) === null || _getCourse2 === void 0 ? void 0 : _getCourse2.activeDiscussion;\n};\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Object} Stats\n */\n\n\nconst getStats = store => {\n  var _getCourse3;\n\n  return (_getCourse3 = getCourse(store)) === null || _getCourse3 === void 0 ? void 0 : _getCourse3.stats;\n};\n/**\n * @function getQuestionTemplate Get question template for active course\n * Get session first, then course, then default fields\n * @param {Object} store - Redux store\n * @returns {Array} QuestionTemplate\n */\n\n\nconst getQuestionTemplate = store => {\n  var _course$questionTempl;\n\n  const course = getCourse(store);\n  return ((_course$questionTempl = course.questionTemplate) === null || _course$questionTempl === void 0 ? void 0 : _course$questionTempl.length) !== 0 ? course.questionTemplate : defaultFields;\n};\n/**\n * @function\n * Get description from either question or discussion\n * @param {Object} store - Redux store\n * @param {String} courseID\n * @returns {Object} Description\n */\n\n\nconst getDescription = store => {\n  const course = getCourse(store);\n  let description;\n\n  if (course === null || course === void 0 ? void 0 : course.activeDiscussion) {\n    var _course$activeDiscuss;\n\n    description = course === null || course === void 0 ? void 0 : (_course$activeDiscuss = course.activeDiscussion) === null || _course$activeDiscuss === void 0 ? void 0 : _course$activeDiscuss.description;\n  }\n\n  if (course === null || course === void 0 ? void 0 : course.activeQuestion) {\n    var _course$session, _course$session$activ;\n\n    description = course === null || course === void 0 ? void 0 : (_course$session = course.session) === null || _course$session === void 0 ? void 0 : (_course$session$activ = _course$session.activeQuestion) === null || _course$session$activ === void 0 ? void 0 : _course$session$activ.description;\n  }\n\n  return description;\n};\n/**\n * @function\n * Get the assistant object from the current question\n * @param {Object} store - Redux store\n * @returns {Object} assistant\n */\n\n\nconst getHelp = store => {\n  var _activeQuestion$helps;\n\n  const activeQuestion = getActiveQuestion(store);\n  const activeHelp = activeQuestion === null || activeQuestion === void 0 ? void 0 : (_activeQuestion$helps = activeQuestion.helps) === null || _activeQuestion$helps === void 0 ? void 0 : _activeQuestion$helps.filter(help => help.active).pop();\n  return activeHelp;\n};\n/**\n * @function\n * Get the assistant object from the current question\n * @param {Object} store - Redux store\n * @returns {Object} assistant\n */\n\n\nconst getAssistant = store => {\n  const help = getHelp(store);\n  return help === null || help === void 0 ? void 0 : help.assistant;\n};\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Array} of students\n */\n\n\nconst getStudentRoster = store => {\n  var _getCourse4;\n\n  return (_getCourse4 = getCourse(store)) === null || _getCourse4 === void 0 ? void 0 : _getCourse4.studentRoster;\n};\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Array} of tas\n */\n\n\nconst getTARoster = store => {\n  var _getCourse5;\n\n  return (_getCourse5 = getCourse(store)) === null || _getCourse5 === void 0 ? void 0 : _getCourse5.taRoster;\n};\n\nexport default {\n  getCourse,\n  getSession,\n  getActiveQuestion,\n  getActiveDiscussion,\n  getStats,\n  getHelp,\n  getDiscussions,\n  getQuestions,\n  getDescription,\n  getQuestionTemplate,\n  getAssistant,\n  getStudentRoster,\n  getTARoster\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/courses/coursesSelectors.js"],"names":["defaultFields","getCourse","store","courseID","currentCourse","courses","sortedCourses","find","course","_id","getSession","session","getActiveQuestion","activeQuestion","getDiscussions","discussions","getQuestions","questions","getActiveDiscussion","activeDiscussion","getStats","stats","getQuestionTemplate","questionTemplate","length","getDescription","description","getHelp","activeHelp","helps","filter","help","active","pop","getAssistant","assistant","getStudentRoster","studentRoster","getTARoster","taRoster"],"mappings":"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","sourcesContent":["import { defaultFields } from \"../../components/course/helpform/defaultFields\";\n\n/**\n * @function\n * Get course from courses store or sorted Courses\n * @param {Object} store - Redux store\n * @returns {Object} course\n */\nconst getCourse = (store) => {\n  const courseID = store.currentCourse;\n  if (courseID in store.courses) {\n    return store.courses[courseID];\n  } else {\n    return store.sortedCourses.find((course) => course._id === courseID);\n  }\n};\n\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Object} Session or undefined if there is none\n */\nconst getSession = (store) => {\n  const course = getCourse(store);\n  return course?.session;\n};\n\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Object} Question\n */\nconst getActiveQuestion = (store) => {\n  return getCourse(store)?.activeQuestion;\n};\n\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Array} Discussions\n */\nconst getDiscussions = (store) => {\n  const course = getCourse(store);\n  return course?.discussions ? course?.discussions : [];\n};\n\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Array} Questions\n */\nconst getQuestions = (store) => {\n  const course = getCourse(store);\n  return course?.questions ? course?.questions : [];\n};\n\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Object} Discussion\n */\nconst getActiveDiscussion = (store) => {\n  return getCourse(store)?.activeDiscussion;\n};\n\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Object} Stats\n */\nconst getStats = (store) => {\n  return getCourse(store)?.stats;\n};\n\n/**\n * @function getQuestionTemplate Get question template for active course\n * Get session first, then course, then default fields\n * @param {Object} store - Redux store\n * @returns {Array} QuestionTemplate\n */\nconst getQuestionTemplate = (store) => {\n  const course = getCourse(store);\n\n  return course.questionTemplate?.length !== 0\n    ? course.questionTemplate\n    : defaultFields;\n};\n\n/**\n * @function\n * Get description from either question or discussion\n * @param {Object} store - Redux store\n * @param {String} courseID\n * @returns {Object} Description\n */\nconst getDescription = (store) => {\n  const course = getCourse(store);\n  let description;\n  if (course?.activeDiscussion) {\n    description = course?.activeDiscussion?.description;\n  }\n  if (course?.activeQuestion) {\n    description = course?.session?.activeQuestion?.description;\n  }\n  return description;\n};\n\n/**\n * @function\n * Get the assistant object from the current question\n * @param {Object} store - Redux store\n * @returns {Object} assistant\n */\nconst getHelp = (store) => {\n  const activeQuestion = getActiveQuestion(store);\n  const activeHelp = activeQuestion?.helps?.filter((help) => help.active).pop();\n  return activeHelp;\n};\n\n/**\n * @function\n * Get the assistant object from the current question\n * @param {Object} store - Redux store\n * @returns {Object} assistant\n */\nconst getAssistant = (store) => {\n  const help = getHelp(store);\n  return help?.assistant;\n};\n\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Array} of students\n */\nconst getStudentRoster = (store) => {\n  return getCourse(store)?.studentRoster;\n};\n\n/**\n * @function\n * @param {Object} store - Redux store\n * @returns {Array} of tas\n */\nconst getTARoster = (store) => {\n  return getCourse(store)?.taRoster;\n};\n\nexport default {\n  getCourse,\n  getSession,\n  getActiveQuestion,\n  getActiveDiscussion,\n  getStats,\n  getHelp,\n  getDiscussions,\n  getQuestions,\n  getDescription,\n  getQuestionTemplate,\n  getAssistant,\n  getStudentRoster,\n  getTARoster,\n};\n"]},"metadata":{},"sourceType":"module"}