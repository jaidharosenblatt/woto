{"ast":null,"code":"import actionTypes from \"./actionTypes\";\nimport { fetchFullCourse } from \"../courses/actions/fetches\";\nimport { startPageLoading, stopPageLoading } from \"../status/actionCreators\";\n/**\n * Create a dispatch to stop page loading in redux\n * @returns {Object} function to dispatch\n */\n\nexport function setCurrentCourse(courseID) {\n  return {\n    type: actionTypes.SET_ACTIVE_COURSE,\n    payload: courseID\n  };\n}\n/**\n * Switch the currently viewed course and load all information about it\n * @param {String} courseID\n */\n\nexport const changeCourse = courseID => async dispatch => {\n  if (courseID === \"addcourse\") return; // ignore add course page\n\n  dispatch(setCurrentCourse(courseID));\n  dispatch(startPageLoading());\n  await dispatch(fetchFullCourse());\n  dispatch(stopPageLoading());\n};\n/**\n * Reset the current course state in redux\n * @returns {Object} to dispatch to redux\n */\n\nexport function resetCurrentCourse() {\n  return {\n    type: actionTypes.RESET\n  };\n}","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/current-course/actionCreators.js"],"names":["actionTypes","fetchFullCourse","startPageLoading","stopPageLoading","setCurrentCourse","courseID","type","SET_ACTIVE_COURSE","payload","changeCourse","dispatch","resetCurrentCourse","RESET"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,0BAAlD;AACA;;;;;AAIA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AACzC,SAAO;AACLC,IAAAA,IAAI,EAAEN,WAAW,CAACO,iBADb;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID;AAED;;;;;AAIA,OAAO,MAAMI,YAAY,GAAIJ,QAAD,IAAc,MAAOK,QAAP,IAAoB;AAC5D,MAAIL,QAAQ,KAAK,WAAjB,EAA8B,OAD8B,CACtB;;AAEtCK,EAAAA,QAAQ,CAACN,gBAAgB,CAACC,QAAD,CAAjB,CAAR;AACAK,EAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AAEA,QAAMQ,QAAQ,CAACT,eAAe,EAAhB,CAAd;AAEAS,EAAAA,QAAQ,CAACP,eAAe,EAAhB,CAAR;AACD,CATM;AAWP;;;;;AAIA,OAAO,SAASQ,kBAAT,GAA8B;AACnC,SAAO;AACLL,IAAAA,IAAI,EAAEN,WAAW,CAACY;AADb,GAAP;AAGD","sourcesContent":["import actionTypes from \"./actionTypes\";\nimport { fetchFullCourse } from \"../courses/actions/fetches\";\nimport { startPageLoading, stopPageLoading } from \"../status/actionCreators\";\n/**\n * Create a dispatch to stop page loading in redux\n * @returns {Object} function to dispatch\n */\nexport function setCurrentCourse(courseID) {\n  return {\n    type: actionTypes.SET_ACTIVE_COURSE,\n    payload: courseID,\n  };\n}\n\n/**\n * Switch the currently viewed course and load all information about it\n * @param {String} courseID\n */\nexport const changeCourse = (courseID) => async (dispatch) => {\n  if (courseID === \"addcourse\") return; // ignore add course page\n\n  dispatch(setCurrentCourse(courseID));\n  dispatch(startPageLoading());\n\n  await dispatch(fetchFullCourse());\n\n  dispatch(stopPageLoading());\n};\n\n/**\n * Reset the current course state in redux\n * @returns {Object} to dispatch to redux\n */\nexport function resetCurrentCourse() {\n  return {\n    type: actionTypes.RESET,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}