{"ast":null,"code":"import client from \"../axiosConfig\";\nimport { getToken, setToken, clearToken, setUserType, getUserType, clearUserType } from \"../tokenService\";\n/*\n  Return the proper endpoint directory for the provided user type\n  (\"student\" vs \"instructor\")\n*/\n\nconst typeTerm = type => {\n  return type === \"instructor\" ? \"instructors\" : \"students\";\n};\n/**\n * Create a new user\n * @param user contains userType, email, firstName,lastName, graduationYear, institution, password,\n * @param type student,ta or instructor\n */\n\n\nexport async function register(user, type) {\n  let {\n    data\n  } = await client.post(typeTerm(type), user);\n  setToken(data.token);\n  setUserType(type);\n  return { ...data,\n    verified: false\n  };\n}\n/**\n * Log in a user\n * @param {user} email\n * @param {user} password\n */\n\nexport async function logIn(user, type) {\n  let {\n    data\n  } = await client.post(`${typeTerm(type)}/login`, user);\n  setToken(data.token);\n  setUserType(type);\n  return data;\n}\n/**\n * Check if user's credentials are valid\n * @param {user} email\n * @param {user} password\n */\n\nexport async function confirmAcccount(user) {\n  const type = getUserType();\n  let {\n    data\n  } = await client.post(`${typeTerm(type)}/login`, user);\n  return data;\n}\n/**\n * Edit fields\n * @param changes an object of changes to the profile\n */\n\nexport async function editProfile(changes) {\n  const type = getUserType();\n  let {\n    data\n  } = await client.patch(`${typeTerm(type)}/me`, changes);\n  return data;\n}\n/**\n * Log out user and clear their token\n */\n\nexport async function logOut() {\n  const type = getUserType();\n  let {\n    data\n  } = await client.post(`${typeTerm(type)}/logout`);\n  clearUserType();\n  clearToken();\n  return data;\n}\n/* Get a user based on their JWT */\n\nexport async function loadUser() {\n  const type = getUserType();\n  const token = getToken();\n  if (!token) return null;else {\n    let {\n      data\n    } = await client.get(`${typeTerm(type)}/me`);\n    return data;\n  }\n}\n/**\n * Verify a user using their user type and a provided verification key\n * @param verificationKey ex b17da1d02e979a21c1b531e024b42d6f71d7deaa\n * @param type student or instructor\n */\n\nexport async function verifyUser(verificationKey, type) {\n  let {\n    data\n  } = await client.post(`${typeTerm(type)}/verify`, {\n    verificationKey\n  });\n  setToken(data.token);\n  setUserType(type);\n  return data;\n}\n/**\n * Reverify the user\n * @param email contains email to reverify\n * @param type student,ta, or instructor\n */\n\nexport async function reverify(email, type) {\n  let {\n    data\n  } = await client.post(`${typeTerm(type)}/reverify`, email);\n  return { ...data\n  };\n}\n/**\n * Request reset password for a given email\n * @param email contains email to reverify\n * @param type student,ta, or instructor\n */\n\nexport async function requestResetPassword(email, type) {\n  let {\n    data\n  } = await client.post(`${typeTerm(type)}/reset/request`, email);\n  return { ...data\n  };\n}\n/**\n * Reset password for a given email\n * @param {body} token key recieved in email\n * @param {body} newPassword new password for account\n * @param type student,ta, or instructor\n */\n\nexport async function resetPassword(body, type) {\n  let {\n    data\n  } = await client.post(`${typeTerm(type)}/reset/`, body);\n  return { ...data\n  };\n}\nexport default {\n  logIn,\n  loadUser,\n  logOut,\n  register,\n  confirmAcccount,\n  requestResetPassword,\n  resetPassword,\n  verifyUser,\n  reverify,\n  editProfile\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/api/endpoints/authEndpoints.js"],"names":["client","getToken","setToken","clearToken","setUserType","getUserType","clearUserType","typeTerm","type","register","user","data","post","token","verified","logIn","confirmAcccount","editProfile","changes","patch","logOut","loadUser","get","verifyUser","verificationKey","reverify","email","requestResetPassword","resetPassword","body"],"mappings":"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","sourcesContent":["import client from \"../axiosConfig\";\nimport {\n  getToken,\n  setToken,\n  clearToken,\n  setUserType,\n  getUserType,\n  clearUserType,\n} from \"../tokenService\";\n\n/*\n  Return the proper endpoint directory for the provided user type\n  (\"student\" vs \"instructor\")\n*/\nconst typeTerm = (type) => {\n  return type === \"instructor\" ? \"instructors\" : \"students\";\n};\n\n/**\n * Create a new user\n * @param user contains userType, email, firstName,lastName, graduationYear, institution, password,\n * @param type student,ta or instructor\n */\nexport async function register(user, type) {\n  let { data } = await client.post(typeTerm(type), user);\n  setToken(data.token);\n  setUserType(type);\n  return { ...data, verified: false };\n}\n\n/**\n * Log in a user\n * @param {user} email\n * @param {user} password\n */\nexport async function logIn(user, type) {\n  let { data } = await client.post(`${typeTerm(type)}/login`, user);\n  setToken(data.token);\n  setUserType(type);\n  return data;\n}\n\n/**\n * Check if user's credentials are valid\n * @param {user} email\n * @param {user} password\n */\nexport async function confirmAcccount(user) {\n  const type = getUserType();\n  let { data } = await client.post(`${typeTerm(type)}/login`, user);\n  return data;\n}\n\n/**\n * Edit fields\n * @param changes an object of changes to the profile\n */\nexport async function editProfile(changes) {\n  const type = getUserType();\n  let { data } = await client.patch(`${typeTerm(type)}/me`, changes);\n\n  return data;\n}\n\n/**\n * Log out user and clear their token\n */\nexport async function logOut() {\n  const type = getUserType();\n  let { data } = await client.post(`${typeTerm(type)}/logout`);\n  clearUserType();\n  clearToken();\n  return data;\n}\n\n/* Get a user based on their JWT */\nexport async function loadUser() {\n  const type = getUserType();\n  const token = getToken();\n  if (!token) return null;\n  else {\n    let { data } = await client.get(`${typeTerm(type)}/me`);\n    return data;\n  }\n}\n\n/**\n * Verify a user using their user type and a provided verification key\n * @param verificationKey ex b17da1d02e979a21c1b531e024b42d6f71d7deaa\n * @param type student or instructor\n */\nexport async function verifyUser(verificationKey, type) {\n  let { data } = await client.post(`${typeTerm(type)}/verify`, {\n    verificationKey,\n  });\n  setToken(data.token);\n  setUserType(type);\n  return data;\n}\n\n/**\n * Reverify the user\n * @param email contains email to reverify\n * @param type student,ta, or instructor\n */\nexport async function reverify(email, type) {\n  let { data } = await client.post(`${typeTerm(type)}/reverify`, email);\n  return { ...data };\n}\n\n/**\n * Request reset password for a given email\n * @param email contains email to reverify\n * @param type student,ta, or instructor\n */\nexport async function requestResetPassword(email, type) {\n  let { data } = await client.post(`${typeTerm(type)}/reset/request`, email);\n  return { ...data };\n}\n\n/**\n * Reset password for a given email\n * @param {body} token key recieved in email\n * @param {body} newPassword new password for account\n * @param type student,ta, or instructor\n */\nexport async function resetPassword(body, type) {\n  let { data } = await client.post(`${typeTerm(type)}/reset/`, body);\n  return { ...data };\n}\n\nexport default {\n  logIn,\n  loadUser,\n  logOut,\n  register,\n  confirmAcccount,\n  requestResetPassword,\n  resetPassword,\n  verifyUser,\n  reverify,\n  editProfile,\n};\n"]},"metadata":{},"sourceType":"module"}