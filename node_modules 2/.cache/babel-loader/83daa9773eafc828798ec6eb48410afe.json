{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/user/forgotpassword/ForgotPasswordForm.js\";\nimport React, { useState } from \"react\";\nimport { Space, Form, Input, Button } from \"antd\";\nimport UserTypeSegControl from \"../../form/UserTypeSegControl\";\nimport API from \"../../../api/API\"; // Update message and use trello pattern\n\nconst ForgotPasswordForm = () => {\n  const [error, setError] = useState(\"\");\n  const [email, setEmail] = useState(); //Send post request to login based on userType\n\n  const onFinish = async values => {\n    setError(\"\");\n\n    if (values.email) {\n      try {\n        await API.requestResetPassword({\n          email: values.email\n        }, values.userType);\n        setEmail(values.email);\n      } catch (e) {\n        setError(\"We couldn't find an account with that email address\");\n        console.log(e);\n      }\n    } else {\n      setError(\"Please enter an email\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Space, {\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    hideRequiredMark: true,\n    name: \"forgot\",\n    layout: \"vertical\",\n    initialValues: {\n      userType: \"student\"\n    },\n    onFinish: onFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Space, {\n    size: 16,\n    style: {\n      width: \"100%\"\n    },\n    align: \"center\",\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Reset Password\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, email ? \"We sent a recovery link to your email address\" : \"Enter your email and we’ll send you a link to reset your password.\"), email && /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }\n  }, email))), !email && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UserTypeSegControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"email\",\n    label: \"Email\",\n    help: error !== \"\" && error,\n    validateStatus: error !== \"\" && \"error\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    block: true,\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, \"Send Reset Link\")))));\n};\n\nexport default ForgotPasswordForm;","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/user/forgotpassword/ForgotPasswordForm.js"],"names":["React","useState","Space","Form","Input","Button","UserTypeSegControl","API","ForgotPasswordForm","error","setError","email","setEmail","onFinish","values","requestResetPassword","userType","e","console","log","width","required","margin"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Space, Form, Input, Button } from \"antd\";\nimport UserTypeSegControl from \"../../form/UserTypeSegControl\";\nimport API from \"../../../api/API\";\n\n// Update message and use trello pattern\nconst ForgotPasswordForm = () => {\n  const [error, setError] = useState(\"\");\n  const [email, setEmail] = useState();\n\n  //Send post request to login based on userType\n  const onFinish = async (values) => {\n    setError(\"\");\n    if (values.email) {\n      try {\n        await API.requestResetPassword(\n          { email: values.email },\n          values.userType\n        );\n        setEmail(values.email);\n      } catch (e) {\n        setError(\"We couldn't find an account with that email address\");\n        console.log(e);\n      }\n    } else {\n      setError(\"Please enter an email\");\n    }\n  };\n\n  return (\n    <Space direction=\"vertical\">\n      <Form\n        hideRequiredMark\n        name=\"forgot\"\n        layout=\"vertical\"\n        initialValues={{ userType: \"student\" }}\n        onFinish={onFinish}\n      >\n        <Form.Item>\n          <Space\n            size={16}\n            style={{ width: \"100%\" }}\n            align=\"center\"\n            direction=\"vertical\"\n          >\n            <h2>Reset Password</h2>\n            <p>\n              {email\n                ? \"We sent a recovery link to your email address\"\n                : \"Enter your email and we’ll send you a link to reset your password.\"}\n            </p>\n            {email && <h2>{email}</h2>}\n          </Space>\n        </Form.Item>\n\n        {!email && (\n          <>\n            <UserTypeSegControl />\n            <Form.Item\n              name=\"email\"\n              label=\"Email\"\n              help={error !== \"\" && error}\n              validateStatus={error !== \"\" && \"error\"}\n              rules={[{ required: true }]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item style={{ margin: 0 }}>\n              <Button type=\"primary\" block htmlType=\"submit\">\n                Send Reset Link\n              </Button>\n            </Form.Item>\n          </>\n        )}\n      </Form>\n    </Space>\n  );\n};\n\nexport default ForgotPasswordForm;\n"]},"metadata":{},"sourceType":"module"}