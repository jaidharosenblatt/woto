{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/course/tainteraction/TAInteractionInfo.js\";\nimport React from \"react\";\nimport { Button, Card, Space } from \"antd\";\nimport LocationTimeTag from \"../header/LocationTimeTag\";\nimport CollapsedQuestion from \"../collapsedquestion/CollapsedQuestion\";\nimport Timer from \"react-compound-timer\";\nimport util from \"../../../util\";\nimport LeftRightRow from \"../../util-components/leftrightrow/LeftRightRow\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../../redux/selectors\";\n/**\n * @matthewsclar Component for TAs to see Interaction details\n *\n */\n\nconst InteractionInfo = ({\n  course,\n  session,\n  question,\n  endInteraction,\n  help,\n  meetingURL\n}) => {\n  var _question$student, _help$assistant, _question$student2;\n\n  const notified = new Date(help === null || help === void 0 ? void 0 : help.createdAt);\n  const interactionLength = new Date() - notified;\n  const suggestedLength = course === null || course === void 0 ? void 0 : course.interactionLength;\n  return /*#__PURE__*/React.createElement(Card, {\n    style: {\n      margin: \"8px 0\"\n    },\n    title: /*#__PURE__*/React.createElement(LeftRightRow, {\n      left: question.archived ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      }, (_question$student = question.student) === null || _question$student === void 0 ? void 0 : _question$student.name), (help === null || help === void 0 ? void 0 : (_help$assistant = help.assistant) === null || _help$assistant === void 0 ? void 0 : _help$assistant.name) && /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 19\n        }\n      }, \"Helped by \", help.assistant.name)) : /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }\n      }, \"Helping \", (_question$student2 = question.student) === null || _question$student2 === void 0 ? void 0 : _question$student2.name),\n      right: /*#__PURE__*/React.createElement(Button, {\n        type: !question.archived && \"danger\",\n        onClick: endInteraction,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, question.archived ? \"Close\" : \"End Interaction\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeftRightRow, {\n    left: /*#__PURE__*/React.createElement(Space, {\n      direction: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(LocationTimeTag, {\n      location: session.location,\n      time: `${question.archived ? \"Helped\" : \"Notified\"} ${util.convertTimeAgoString(notified)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CollapsedQuestion, {\n      words: true,\n      details: question.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    })),\n    right: !question.archived && /*#__PURE__*/React.createElement(Space, {\n      direction: \"vertical\",\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, suggestedLength && /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"grey\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"Suggested Interaction Length: \", suggestedLength, \" mins\"), /*#__PURE__*/React.createElement(Timer, {\n      initialTime: interactionLength,\n      formatValue: value => `${value < 10 ? `0${value}` : value}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, \"Current Interaction Length: \", /*#__PURE__*/React.createElement(Timer.Minutes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 45\n      }\n    }), \":\", /*#__PURE__*/React.createElement(Timer.Seconds, {\n      formatValue: value => `${value < 10 ? `0${value}` : value}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = (state, prevProps) => {\n  return { ...prevProps,\n    help: selectors.getHelp(state),\n    question: selectors.getActiveQuestion(state),\n    meetingURL: selectors.getUserMeetingURL(state)\n  };\n};\n\nexport default connect(mapStateToProps)(InteractionInfo);","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/course/tainteraction/TAInteractionInfo.js"],"names":["React","Button","Card","Space","LocationTimeTag","CollapsedQuestion","Timer","util","LeftRightRow","connect","selectors","InteractionInfo","course","session","question","endInteraction","help","meetingURL","notified","Date","createdAt","interactionLength","suggestedLength","margin","archived","student","name","assistant","location","convertTimeAgoString","description","color","value","mapStateToProps","state","prevProps","getHelp","getActiveQuestion","getUserMeetingURL"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Card, Space } from \"antd\";\nimport LocationTimeTag from \"../header/LocationTimeTag\";\nimport CollapsedQuestion from \"../collapsedquestion/CollapsedQuestion\";\nimport Timer from \"react-compound-timer\";\nimport util from \"../../../util\";\nimport LeftRightRow from \"../../util-components/leftrightrow/LeftRightRow\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../../redux/selectors\";\n\n/**\n * @matthewsclar Component for TAs to see Interaction details\n *\n */\n\nconst InteractionInfo = ({\n  course,\n  session,\n  question,\n  endInteraction,\n  help,\n  meetingURL,\n}) => {\n  const notified = new Date(help?.createdAt);\n  const interactionLength = new Date() - notified;\n  const suggestedLength = course?.interactionLength;\n\n  return (\n    <Card\n      style={{ margin: \"8px 0\" }}\n      title={\n        <LeftRightRow\n          left={\n            question.archived ? (\n              <div>\n                <h2>{question.student?.name}</h2>\n                {help?.assistant?.name && (\n                  <p>Helped by {help.assistant.name}</p>\n                )}\n              </div>\n            ) : (\n              <h2>Helping {question.student?.name}</h2>\n            )\n          }\n          right={\n            <Button\n              type={!question.archived && \"danger\"}\n              onClick={endInteraction}\n            >\n              {question.archived ? \"Close\" : \"End Interaction\"}\n            </Button>\n          }\n        />\n      }\n    >\n      <LeftRightRow\n        left={\n          <Space direction=\"vertical\">\n            <LocationTimeTag\n              location={session.location}\n              time={`${\n                question.archived ? \"Helped\" : \"Notified\"\n              } ${util.convertTimeAgoString(notified)}`}\n            />\n            <CollapsedQuestion words details={question.description} />\n          </Space>\n        }\n        right={\n          !question.archived && (\n            <Space direction=\"vertical\" align=\"right\">\n              {suggestedLength && (\n                <p style={{ color: \"grey\" }}>\n                  Suggested Interaction Length: {suggestedLength} mins\n                </p>\n              )}\n              <Timer\n                initialTime={interactionLength}\n                formatValue={(value) => `${value < 10 ? `0${value}` : value}`}\n              >\n                Current Interaction Length: <Timer.Minutes />:\n                <Timer.Seconds\n                  formatValue={(value) => `${value < 10 ? `0${value}` : value}`}\n                />\n              </Timer>\n            </Space>\n          )\n        }\n      />\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state, prevProps) => {\n  return {\n    ...prevProps,\n    help: selectors.getHelp(state),\n    question: selectors.getActiveQuestion(state),\n    meetingURL: selectors.getUserMeetingURL(state),\n  };\n};\nexport default connect(mapStateToProps)(InteractionInfo);\n"]},"metadata":{},"sourceType":"module"}