{"ast":null,"code":"import { compareObjects } from \"./getCommonValues\";\nimport { getOrList } from \"./text\";\n/**\n * @function Sort discussions by first key then last active\n * @param {Array} discussions\n * @param {Object} description\n * @returns {Array} sorted discussions\n */\n\nfunction sortDiscussionsByDescription(discussions, description) {\n  if (!discussions || discussions.length === 0 || !description) {\n    return discussions;\n  }\n\n  const temp = [...discussions];\n  const key = Object.keys(description)[0];\n  temp.sort((a, b) => {\n    if (compareObjects(a.description, description, key) && !compareObjects(b.description, description, key)) {\n      return -1;\n    }\n\n    if (compareObjects(b.description, description, key) && !compareObjects(a.description, description, key)) {\n      return 1;\n    } else {\n      return a.updatedAt - b.updatedAt;\n    }\n  });\n  return temp;\n}\n/**\n * @function convertDiscussionsToColumns\n * Convert a discussions array into one that can be used by Ant Table\n * @param {Array} discussions\n * @param {String} userID from redux auth\n * @param {Array} questionTemplate\n * @returns {Array} new discussions\n */\n\n\nconst convertDiscussionsToColumns = (discussions, userID, questionTemplate) => {\n  const filtered = discussions.filter(discussion => !discussion.archived && !hasOldFields(questionTemplate, discussion));\n  return filtered.map((discussion, count) => {\n    const owner = discussion.owner !== null ? discussion.owner : {\n      _id: \"1234\",\n      name: \"Instructor\"\n    };\n    const isYou = (owner === null || owner === void 0 ? void 0 : owner._id) === userID;\n    const participants = discussion.participants.filter(item => item.active);\n    return {\n      key: count,\n      name: discussion.description.roomName,\n      owner,\n      id: discussion._id,\n      isYou: isYou,\n      lastActive: new Date(discussion.updatedAt),\n      size: participants.length,\n      participants: participants,\n      description: discussion.description,\n      discussion: discussion,\n      ...discussion.description\n    };\n  });\n};\n/**\n * @function hasOldFields\n * Check whether this discussion used an old questionTemplate\n * @param {Array} questionTemplate\n * @param {Object} discussion\n * @returns {Boolean} whether or not old fields exist\n */\n\n\nfunction hasOldFields(questionTemplate, discussion) {\n  if (!questionTemplate || questionTemplate.length === 0) {\n    return false;\n  }\n\n  const requiredFields = questionTemplate.filter(field => field.required);\n  let found = false;\n  requiredFields.forEach(field => {\n    var _field$label;\n\n    const label = field === null || field === void 0 ? void 0 : (_field$label = field.label) === null || _field$label === void 0 ? void 0 : _field$label.toLowerCase();\n    const questionKeys = Object.keys(discussion.description);\n\n    if (!questionKeys.includes(label)) {\n      found = true;\n    }\n  });\n  return found;\n}\n/**\n * Find out how many students share the first field to your question\n * @param {Object} description\n * @param {Object} valueMap\n * @param {Integer} questionsLength\n * @returns {String} message based on how many students share your question\n */\n\n\nfunction getWotoPrompt(description, valueMap, questionsLength) {\n  const firstKey = description && Object.keys(description)[0];\n  const firstValue = description && description[firstKey];\n  const valueString = getOrList(firstValue);\n  let total = 0;\n\n  if (Array.isArray(firstValue)) {\n    firstValue.forEach(value => {\n      if (valueMap[firstKey]) {\n        total += valueMap[firstKey][value];\n      }\n    });\n  }\n\n  if (firstKey in valueMap && firstValue in valueMap[firstKey]) {\n    total = valueMap[firstKey][firstValue];\n  } // 2 since total includes user's own question\n\n\n  if (total === 2) {\n    return `There is 1 other student who has a question on ${valueString}`;\n  }\n\n  if (total > 2) {\n    return `There are ${total - 1} students who have questions on ${valueString}`;\n  } // 2 since questionsLength includes user's own question\n\n\n  if (questionsLength === 2) {\n    return `There is 1 other student in the queue with you`;\n  }\n\n  if (questionsLength > 2) {\n    return `There are ${questionsLength - 1} students in the queue with you`;\n  }\n}\n\nexport default {\n  sortDiscussionsByDescription,\n  convertDiscussionsToColumns,\n  getWotoPrompt\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/util/wotos.js"],"names":["compareObjects","getOrList","sortDiscussionsByDescription","discussions","description","length","temp","key","Object","keys","sort","a","b","updatedAt","convertDiscussionsToColumns","userID","questionTemplate","filtered","filter","discussion","archived","hasOldFields","map","count","owner","_id","name","isYou","participants","item","active","roomName","id","lastActive","Date","size","requiredFields","field","required","found","forEach","label","toLowerCase","questionKeys","includes","getWotoPrompt","valueMap","questionsLength","firstKey","firstValue","valueString","total","Array","isArray","value"],"mappings":"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","sourcesContent":["import { compareObjects } from \"./getCommonValues\";\nimport { getOrList } from \"./text\";\n/**\n * @function Sort discussions by first key then last active\n * @param {Array} discussions\n * @param {Object} description\n * @returns {Array} sorted discussions\n */\nfunction sortDiscussionsByDescription(discussions, description) {\n  if (!discussions || discussions.length === 0 || !description) {\n    return discussions;\n  }\n  const temp = [...discussions];\n\n  const key = Object.keys(description)[0];\n\n  temp.sort((a, b) => {\n    if (\n      compareObjects(a.description, description, key) &&\n      !compareObjects(b.description, description, key)\n    ) {\n      return -1;\n    }\n    if (\n      compareObjects(b.description, description, key) &&\n      !compareObjects(a.description, description, key)\n    ) {\n      return 1;\n    } else {\n      return a.updatedAt - b.updatedAt;\n    }\n  });\n\n  return temp;\n}\n\n/**\n * @function convertDiscussionsToColumns\n * Convert a discussions array into one that can be used by Ant Table\n * @param {Array} discussions\n * @param {String} userID from redux auth\n * @param {Array} questionTemplate\n * @returns {Array} new discussions\n */\nconst convertDiscussionsToColumns = (discussions, userID, questionTemplate) => {\n  const filtered = discussions.filter(\n    (discussion) =>\n      !discussion.archived && !hasOldFields(questionTemplate, discussion)\n  );\n\n  return filtered.map((discussion, count) => {\n    const owner =\n      discussion.owner !== null\n        ? discussion.owner\n        : { _id: \"1234\", name: \"Instructor\" };\n    const isYou = owner?._id === userID;\n\n    const participants = discussion.participants.filter((item) => item.active);\n\n    return {\n      key: count,\n      name: discussion.description.roomName,\n      owner,\n      id: discussion._id,\n      isYou: isYou,\n      lastActive: new Date(discussion.updatedAt),\n      size: participants.length,\n      participants: participants,\n\n      description: discussion.description,\n      discussion: discussion,\n      ...discussion.description,\n    };\n  });\n};\n\n/**\n * @function hasOldFields\n * Check whether this discussion used an old questionTemplate\n * @param {Array} questionTemplate\n * @param {Object} discussion\n * @returns {Boolean} whether or not old fields exist\n */\nfunction hasOldFields(questionTemplate, discussion) {\n  if (!questionTemplate || questionTemplate.length === 0) {\n    return false;\n  }\n  const requiredFields = questionTemplate.filter((field) => field.required);\n  let found = false;\n  requiredFields.forEach((field) => {\n    const label = field?.label?.toLowerCase();\n    const questionKeys = Object.keys(discussion.description);\n    if (!questionKeys.includes(label)) {\n      found = true;\n    }\n  });\n\n  return found;\n}\n\n/**\n * Find out how many students share the first field to your question\n * @param {Object} description\n * @param {Object} valueMap\n * @param {Integer} questionsLength\n * @returns {String} message based on how many students share your question\n */\nfunction getWotoPrompt(description, valueMap, questionsLength) {\n  const firstKey = description && Object.keys(description)[0];\n  const firstValue = description && description[firstKey];\n  const valueString = getOrList(firstValue);\n\n  let total = 0;\n\n  if (Array.isArray(firstValue)) {\n    firstValue.forEach((value) => {\n      if (valueMap[firstKey]) {\n        total += valueMap[firstKey][value];\n      }\n    });\n  }\n\n  if (firstKey in valueMap && firstValue in valueMap[firstKey]) {\n    total = valueMap[firstKey][firstValue];\n  }\n  // 2 since total includes user's own question\n  if (total === 2) {\n    return `There is 1 other student who has a question on ${valueString}`;\n  }\n  if (total > 2) {\n    return `There are ${\n      total - 1\n    } students who have questions on ${valueString}`;\n  }\n  // 2 since questionsLength includes user's own question\n  if (questionsLength === 2) {\n    return `There is 1 other student in the queue with you`;\n  }\n  if (questionsLength > 2) {\n    return `There are ${questionsLength - 1} students in the queue with you`;\n  }\n}\n\nexport default {\n  sortDiscussionsByDescription,\n  convertDiscussionsToColumns,\n  getWotoPrompt,\n};\n"]},"metadata":{},"sourceType":"module"}