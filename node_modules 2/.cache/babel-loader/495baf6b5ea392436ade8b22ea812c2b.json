{"ast":null,"code":"import React from 'react';\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport Input from './Input';\n\nvar SingleSelector = function SingleSelector(props) {\n  var inputElement = props.inputElement,\n      prefixCls = props.prefixCls,\n      id = props.id,\n      inputRef = props.inputRef,\n      disabled = props.disabled,\n      autoFocus = props.autoFocus,\n      autoComplete = props.autoComplete,\n      accessibilityIndex = props.accessibilityIndex,\n      mode = props.mode,\n      open = props.open,\n      values = props.values,\n      placeholder = props.placeholder,\n      tabIndex = props.tabIndex,\n      showSearch = props.showSearch,\n      searchValue = props.searchValue,\n      activeValue = props.activeValue,\n      onInputKeyDown = props.onInputKeyDown,\n      onInputMouseDown = props.onInputMouseDown,\n      onInputChange = props.onInputChange,\n      onInputPaste = props.onInputPaste,\n      onCompositionStart = props.onCompositionStart,\n      onCompositionEnd = props.onCompositionEnd;\n  var combobox = mode === 'combobox';\n  var inputEditable = combobox || showSearch && open;\n  var item = values[0];\n\n  var getDisplayValue = function getDisplayValue(value) {\n    return value === null ? '' : String(value);\n  };\n\n  var inputValue = searchValue;\n\n  if (combobox) {\n    inputValue = item ? getDisplayValue(item.value) : activeValue || searchValue;\n  } // Not show text when closed expect combobox mode\n\n\n  var hasTextInput = mode !== 'combobox' && !open ? false : !!inputValue;\n  return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-selection-search\")\n  }, React.createElement(Input, {\n    ref: inputRef,\n    prefixCls: prefixCls,\n    id: id,\n    open: open,\n    inputElement: inputElement,\n    disabled: disabled,\n    autoFocus: autoFocus,\n    autoComplete: autoComplete,\n    editable: inputEditable,\n    accessibilityIndex: accessibilityIndex,\n    value: inputValue,\n    onKeyDown: onInputKeyDown,\n    onMouseDown: onInputMouseDown,\n    onChange: onInputChange,\n    onPaste: onInputPaste,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    tabIndex: tabIndex,\n    attrs: pickAttrs(props, true)\n  })), !combobox && item && !hasTextInput && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-selection-item\")\n  }, item.label), !item && !hasTextInput && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-selection-placeholder\")\n  }, placeholder));\n};\n\nexport default SingleSelector;","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/node_modules/rc-select/es/Selector/SingleSelector.js"],"names":["React","pickAttrs","Input","SingleSelector","props","inputElement","prefixCls","id","inputRef","disabled","autoFocus","autoComplete","accessibilityIndex","mode","open","values","placeholder","tabIndex","showSearch","searchValue","activeValue","onInputKeyDown","onInputMouseDown","onInputChange","onInputPaste","onCompositionStart","onCompositionEnd","combobox","inputEditable","item","getDisplayValue","value","String","inputValue","hasTextInput","createElement","Fragment","className","concat","ref","editable","onKeyDown","onMouseDown","onChange","onPaste","attrs","label"],"mappings":"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","sourcesContent":["import React from 'react';\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport Input from './Input';\n\nvar SingleSelector = function SingleSelector(props) {\n  var inputElement = props.inputElement,\n      prefixCls = props.prefixCls,\n      id = props.id,\n      inputRef = props.inputRef,\n      disabled = props.disabled,\n      autoFocus = props.autoFocus,\n      autoComplete = props.autoComplete,\n      accessibilityIndex = props.accessibilityIndex,\n      mode = props.mode,\n      open = props.open,\n      values = props.values,\n      placeholder = props.placeholder,\n      tabIndex = props.tabIndex,\n      showSearch = props.showSearch,\n      searchValue = props.searchValue,\n      activeValue = props.activeValue,\n      onInputKeyDown = props.onInputKeyDown,\n      onInputMouseDown = props.onInputMouseDown,\n      onInputChange = props.onInputChange,\n      onInputPaste = props.onInputPaste,\n      onCompositionStart = props.onCompositionStart,\n      onCompositionEnd = props.onCompositionEnd;\n  var combobox = mode === 'combobox';\n  var inputEditable = combobox || showSearch && open;\n  var item = values[0];\n\n  var getDisplayValue = function getDisplayValue(value) {\n    return value === null ? '' : String(value);\n  };\n\n  var inputValue = searchValue;\n\n  if (combobox) {\n    inputValue = item ? getDisplayValue(item.value) : activeValue || searchValue;\n  } // Not show text when closed expect combobox mode\n\n\n  var hasTextInput = mode !== 'combobox' && !open ? false : !!inputValue;\n  return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-selection-search\")\n  }, React.createElement(Input, {\n    ref: inputRef,\n    prefixCls: prefixCls,\n    id: id,\n    open: open,\n    inputElement: inputElement,\n    disabled: disabled,\n    autoFocus: autoFocus,\n    autoComplete: autoComplete,\n    editable: inputEditable,\n    accessibilityIndex: accessibilityIndex,\n    value: inputValue,\n    onKeyDown: onInputKeyDown,\n    onMouseDown: onInputMouseDown,\n    onChange: onInputChange,\n    onPaste: onInputPaste,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    tabIndex: tabIndex,\n    attrs: pickAttrs(props, true)\n  })), !combobox && item && !hasTextInput && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-selection-item\")\n  }, item.label), !item && !hasTextInput && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-selection-placeholder\")\n  }, placeholder));\n};\n\nexport default SingleSelector;"]},"metadata":{},"sourceType":"module"}