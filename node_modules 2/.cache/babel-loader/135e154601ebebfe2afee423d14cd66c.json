{"ast":null,"code":"// Fallback locale.\n// (when not a single one of the supplied \"preferred\" locales is available)\nvar defaultLocale = 'en'; // For all locales added\n// their relative time formatter messages will be stored here.\n\nvar localesData = {};\nexport function getDefaultLocale() {\n  return defaultLocale;\n}\nexport function setDefaultLocale(locale) {\n  defaultLocale = locale;\n} // export function isLocaleDataAvailable(locale) {\n//  return localesData.hasOwnProperty(locale)\n// }\n\nexport function getLocaleData(locale) {\n  return localesData[locale];\n}\nexport function addLocaleData(localeData) {\n  if (!localeData) {\n    throw new Error('No locale data passed');\n  } // This locale data is stored in a global variable\n  // and later used when calling `.format(time)`.\n\n\n  localesData[localeData.locale] = localeData;\n}","map":{"version":3,"sources":["../source/LocaleDataStore.js"],"names":["defaultLocale","localesData","localeData"],"mappings":"AAAA;AACA;AACA,IAAIA,aAAa,GAAjB,IAAA,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAjB,EAAA;AAEA,OAAO,SAAA,gBAAA,GAA4B;AACjC,SAAA,aAAA;AACD;AAED,OAAO,SAAA,gBAAA,CAAA,MAAA,EAAkC;AACvCD,EAAAA,aAAa,GAAbA,MAAAA;EAGF;AACA;AACA;;AAEA,OAAO,SAAA,aAAA,CAAA,MAAA,EAA+B;AACpC,SAAOC,WAAW,CAAlB,MAAkB,CAAlB;AACD;AAED,OAAO,SAAA,aAAA,CAAA,UAAA,EAAmC;AACxC,MAAI,CAAJ,UAAA,EAAiB;AACf,UAAM,IAAA,KAAA,CAAN,uBAAM,CAAN;AAFsC,GAAA,CAIxC;AACA;;;AACAA,EAAAA,WAAW,CAACC,UAAU,CAAtBD,MAAW,CAAXA,GAAAA,UAAAA;AACD","sourcesContent":["// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\nexport function getDefaultLocale() {\r\n  return defaultLocale\r\n}\r\n\r\nexport function setDefaultLocale(locale) {\r\n  defaultLocale = locale\r\n}\r\n\r\n// export function isLocaleDataAvailable(locale) {\r\n//  return localesData.hasOwnProperty(locale)\r\n// }\r\n\r\nexport function getLocaleData(locale) {\r\n  return localesData[locale]\r\n}\r\n\r\nexport function addLocaleData(localeData) {\r\n  if (!localeData) {\r\n    throw new Error('No locale data passed')\r\n  }\r\n  // This locale data is stored in a global variable\r\n  // and later used when calling `.format(time)`.\r\n  localesData[localeData.locale] = localeData\r\n}"]},"metadata":{},"sourceType":"module"}