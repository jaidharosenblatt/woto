{"ast":null,"code":"import API from \"../../../api/API\";\nimport { fetchDiscussions } from \"./fetches\";\nimport selectors from \"../../selectors\";\nimport { startLoading, stopLoading, clearError, setServerError } from \"../../status/actionCreators\";\nimport { setActiveDiscussion } from \"./actionCreators\";\nimport { editProfile } from \"../../auth/actionCreators\";\n/**\n * Load the discussions for a given course into cache\n * @param {*} courseID\n * @param {*} userID\n */\n\nexport const loadDiscussions = () => async dispatch => {\n  dispatch(startLoading());\n  await dispatch(fetchDiscussions());\n  dispatch(stopLoading());\n};\n/**\n * Post a discussion to a given course\n * @param {*} courseID\n * @param {*} userID\n * @param {*} description\n */\n\nexport const postDiscussion = (description, meetingURL) => async (dispatch, getState) => {\n  dispatch(startLoading());\n  const courseID = selectors.getCourseID(getState());\n\n  try {\n    console.log(meetingURL);\n\n    if (meetingURL) {\n      await dispatch(editProfile({\n        meetingURL\n      }, false));\n      console.log(\"profile edit call reached\");\n    }\n\n    await API.postDiscussion(courseID, {\n      description\n    });\n    await dispatch(fetchDiscussions());\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"posting your Woto Room\"));\n    console.error(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n/**\n * Close/archive a discussion\n * @param {*} courseID\n * @param {*} userID\n * @param {*} discussionID\n */\n\nexport const closeDiscussion = discussionID => async (dispatch, getState) => {\n  dispatch(startLoading());\n  const courseID = selectors.getCourseID(getState());\n\n  try {\n    await API.editDiscussion(discussionID, {\n      archived: true\n    });\n    dispatch(setActiveDiscussion(courseID, null));\n    await dispatch(fetchDiscussions());\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"closing your Woto Room\"));\n    console.error(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n/**\n * Add user as a participant to a discussion\n * @param {*} courseID\n * @param {*} userID\n * @param {Object} discussionID\n */\n\nexport const joinDiscussion = discussion => async dispatch => {\n  dispatch(startLoading());\n\n  try {\n    await API.joinDiscussion(discussion._id);\n    await dispatch(fetchDiscussions());\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"joining this Woto Room\"));\n    console.error(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n/**\n * Remove user from a discussion\n * @param {*} courseID\n * @param {*} userID\n * @param {*} discussionID\n */\n\nexport const leaveDiscussion = discussionID => async (dispatch, getState) => {\n  dispatch(startLoading());\n  const courseID = selectors.getCourseID(getState());\n\n  try {\n    await API.leaveDiscussion(discussionID);\n    dispatch(setActiveDiscussion(courseID, null));\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"leaving this Woto Room\"));\n    console.error(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n}; // // ***TODO***\n// export const markAway = async (state, dispatch, user) => {\n//     dispatch({ type: actions.SET_LOADING });\n//     const temp = state.discussion.participants.map((item) => {\n//         if (item.participant === user.participant) {\n//             return { ...item, active: false };\n//         }\n//         return item;\n//     });\n//     console.log(temp);\n//     try {\n//         const response = await API.editDiscussion(state.discussion._id, {\n//             participants: temp,\n//         });\n//         await setDiscussions(state, dispatch);\n//         dispatch({ type: actions.SET_DISCUSSION, payload: response });\n//     } catch (error) {\n//         console.error(error.response ? error.response.data.message : error);\n//     }\n// };","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/courses/actions/wotos.js"],"names":["API","fetchDiscussions","selectors","startLoading","stopLoading","clearError","setServerError","setActiveDiscussion","editProfile","loadDiscussions","dispatch","postDiscussion","description","meetingURL","getState","courseID","getCourseID","console","log","error","closeDiscussion","discussionID","editDiscussion","archived","joinDiscussion","discussion","_id","leaveDiscussion"],"mappings":"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","sourcesContent":["import API from \"../../../api/API\";\nimport { fetchDiscussions } from \"./fetches\";\nimport selectors from \"../../selectors\";\nimport {\n  startLoading,\n  stopLoading,\n  clearError,\n  setServerError,\n} from \"../../status/actionCreators\";\nimport { setActiveDiscussion } from \"./actionCreators\";\nimport { editProfile } from \"../../auth/actionCreators\";\n\n/**\n * Load the discussions for a given course into cache\n * @param {*} courseID\n * @param {*} userID\n */\nexport const loadDiscussions = () => async (dispatch) => {\n  dispatch(startLoading());\n\n  await dispatch(fetchDiscussions());\n\n  dispatch(stopLoading());\n};\n\n/**\n * Post a discussion to a given course\n * @param {*} courseID\n * @param {*} userID\n * @param {*} description\n */\nexport const postDiscussion = (description, meetingURL) => async (\n  dispatch,\n  getState\n) => {\n  dispatch(startLoading());\n  const courseID = selectors.getCourseID(getState());\n\n  try {\n    console.log(meetingURL);\n    if (meetingURL) {\n      await dispatch(editProfile({ meetingURL }, false));\n      console.log(\"profile edit call reached\");\n    }\n\n    await API.postDiscussion(courseID, { description });\n\n    await dispatch(fetchDiscussions());\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"posting your Woto Room\"));\n    console.error(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n\n/**\n * Close/archive a discussion\n * @param {*} courseID\n * @param {*} userID\n * @param {*} discussionID\n */\nexport const closeDiscussion = (discussionID) => async (dispatch, getState) => {\n  dispatch(startLoading());\n\n  const courseID = selectors.getCourseID(getState());\n  try {\n    await API.editDiscussion(discussionID, { archived: true });\n    dispatch(setActiveDiscussion(courseID, null));\n    await dispatch(fetchDiscussions());\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"closing your Woto Room\"));\n    console.error(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n\n/**\n * Add user as a participant to a discussion\n * @param {*} courseID\n * @param {*} userID\n * @param {Object} discussionID\n */\nexport const joinDiscussion = (discussion) => async (dispatch) => {\n  dispatch(startLoading());\n\n  try {\n    await API.joinDiscussion(discussion._id);\n    await dispatch(fetchDiscussions());\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"joining this Woto Room\"));\n    console.error(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n\n/**\n * Remove user from a discussion\n * @param {*} courseID\n * @param {*} userID\n * @param {*} discussionID\n */\nexport const leaveDiscussion = (discussionID) => async (dispatch, getState) => {\n  dispatch(startLoading());\n\n  const courseID = selectors.getCourseID(getState());\n  try {\n    await API.leaveDiscussion(discussionID);\n    dispatch(setActiveDiscussion(courseID, null));\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"leaving this Woto Room\"));\n    console.error(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n\n// // ***TODO***\n// export const markAway = async (state, dispatch, user) => {\n//     dispatch({ type: actions.SET_LOADING });\n//     const temp = state.discussion.participants.map((item) => {\n//         if (item.participant === user.participant) {\n//             return { ...item, active: false };\n//         }\n//         return item;\n//     });\n//     console.log(temp);\n\n//     try {\n//         const response = await API.editDiscussion(state.discussion._id, {\n//             participants: temp,\n//         });\n//         await setDiscussions(state, dispatch);\n//         dispatch({ type: actions.SET_DISCUSSION, payload: response });\n//     } catch (error) {\n//         console.error(error.response ? error.response.data.message : error);\n//     }\n// };\n"]},"metadata":{},"sourceType":"module"}