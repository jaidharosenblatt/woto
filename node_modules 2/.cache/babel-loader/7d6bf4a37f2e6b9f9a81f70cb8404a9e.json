{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/user/accountsettings/instructorPages/InstructorEditCourses.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Space, List, Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"../AccountSettings.css\";\nimport ArchiveCourseButton from \"../../../modals/buttons/ArchiveCourseButton\";\nimport ActivateCourseButton from \"../../../modals/buttons/ActivateCourseButton\";\nimport API from \"../../../../api/API\";\nimport LeftRightRow from \"../../../util-components/leftrightrow/LeftRightRow\";\nimport EmptyState from \"../EmptyState\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../../../redux/selectors\";\nimport { courseUnarchive, courseArchive } from \"../../../../redux/sorted-courses/actionCreators\";\n/**\n * View all courses for an instructor and change their archived status\n */\n\nconst EditCourses = props => {\n  const [archivedCourses, setArchivedCourses] = useState([]);\n  useEffect(() => {\n    async function getInactiveCourses() {\n      const res = await API.getCourses();\n      const inactiveCourses = res.filter(item => item.archived);\n      setArchivedCourses([...inactiveCourses]);\n      console.log(inactiveCourses);\n    }\n\n    getInactiveCourses();\n  }, []);\n\n  const handleArchive = async course => {\n    props.courseArchive(course);\n    setArchivedCourses([...archivedCourses, course]);\n  };\n\n  const handleActivate = async course => {\n    props.courseUnarchive(course);\n    const temp = archivedCourses.filter(item => item._id !== course._id);\n    setArchivedCourses([...temp]);\n  };\n\n  const getCourseList = listType => {\n    const courseList = listType === \"Active Courses\" ? props.courses : archivedCourses;\n    return courseList.length > 0 ? /*#__PURE__*/React.createElement(List, {\n      loading: props.loading,\n      itemLayout: \"horizontal\",\n      dataSource: courseList,\n      renderItem: course => /*#__PURE__*/React.createElement(List.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(List.Item.Meta, {\n        title: /*#__PURE__*/React.createElement(Link, {\n          to: course._id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }\n        }, course.code, \" \", course.role && `(${course.role})`),\n        description: /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 28\n          }\n        }, course.name),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }\n      }), listType === \"Active Courses\" ? /*#__PURE__*/React.createElement(ArchiveCourseButton, {\n        handleArchive: handleArchive,\n        course: course,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(ActivateCourseButton, {\n        handleActivate: handleActivate,\n        course: course,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(EmptyState, {\n      message: `You have no ${listType}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LeftRightRow, {\n    left: /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, \"Active Courses\"),\n    right: /*#__PURE__*/React.createElement(Link, {\n      to: \"/addcourse\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, \"Add New Course\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), getCourseList(\"Active Courses\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Archived Courses\"), getCourseList(\"Archived Courses\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    courses: selectors.getSortedCourses(state),\n    loading: selectors.getLoading(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  courseUnarchive,\n  courseArchive\n})(EditCourses);","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/user/accountsettings/instructorPages/InstructorEditCourses.js"],"names":["React","useEffect","useState","Space","List","Button","Link","ArchiveCourseButton","ActivateCourseButton","API","LeftRightRow","EmptyState","connect","selectors","courseUnarchive","courseArchive","EditCourses","props","archivedCourses","setArchivedCourses","getInactiveCourses","res","getCourses","inactiveCourses","filter","item","archived","console","log","handleArchive","course","handleActivate","temp","_id","getCourseList","listType","courseList","courses","length","loading","code","role","name","width","mapStateToProps","state","getSortedCourses","getLoading"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Space, List, Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"../AccountSettings.css\";\nimport ArchiveCourseButton from \"../../../modals/buttons/ArchiveCourseButton\";\nimport ActivateCourseButton from \"../../../modals/buttons/ActivateCourseButton\";\nimport API from \"../../../../api/API\";\nimport LeftRightRow from \"../../../util-components/leftrightrow/LeftRightRow\";\nimport EmptyState from \"../EmptyState\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../../../redux/selectors\";\nimport {\n  courseUnarchive,\n  courseArchive,\n} from \"../../../../redux/sorted-courses/actionCreators\";\n\n/**\n * View all courses for an instructor and change their archived status\n */\nconst EditCourses = (props) => {\n  const [archivedCourses, setArchivedCourses] = useState([]);\n\n  useEffect(() => {\n    async function getInactiveCourses() {\n      const res = await API.getCourses();\n      const inactiveCourses = res.filter((item) => item.archived);\n      setArchivedCourses([...inactiveCourses]);\n      console.log(inactiveCourses);\n    }\n    getInactiveCourses();\n  }, []);\n\n  const handleArchive = async (course) => {\n    props.courseArchive(course);\n    setArchivedCourses([...archivedCourses, course]);\n  };\n\n  const handleActivate = async (course) => {\n    props.courseUnarchive(course);\n    const temp = archivedCourses.filter((item) => item._id !== course._id);\n    setArchivedCourses([...temp]);\n  };\n\n  const getCourseList = (listType) => {\n    const courseList =\n      listType === \"Active Courses\" ? props.courses : archivedCourses;\n\n    return courseList.length > 0 ? (\n      <List\n        loading={props.loading}\n        itemLayout=\"horizontal\"\n        dataSource={courseList}\n        renderItem={(course) => (\n          <List.Item>\n            <List.Item.Meta\n              title={\n                <Link to={course._id}>\n                  {course.code} {course.role && `(${course.role})`}\n                </Link>\n              }\n              description={<h3>{course.name}</h3>}\n            />\n            {listType === \"Active Courses\" ? (\n              <ArchiveCourseButton\n                handleArchive={handleArchive}\n                course={course}\n              />\n            ) : (\n              <ActivateCourseButton\n                handleActivate={handleActivate}\n                course={course}\n              />\n            )}\n          </List.Item>\n        )}\n      />\n    ) : (\n      <EmptyState message={`You have no ${listType}`} />\n    );\n  };\n\n  return (\n    <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\n      <div>\n        <LeftRightRow\n          left={<h2>Active Courses</h2>}\n          right={\n            <Link to=\"/addcourse\">\n              <Button type=\"primary\">Add New Course</Button>\n            </Link>\n          }\n        />\n        {getCourseList(\"Active Courses\")}\n      </div>\n      <div>\n        <h2>Archived Courses</h2>\n        {getCourseList(\"Archived Courses\")}\n      </div>\n    </Space>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    courses: selectors.getSortedCourses(state),\n    loading: selectors.getLoading(state),\n  };\n};\n\nexport default connect(mapStateToProps, { courseUnarchive, courseArchive })(\n  EditCourses\n);\n"]},"metadata":{},"sourceType":"module"}