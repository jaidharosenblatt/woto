{"ast":null,"code":"/**\n * @function\n * Get whether or not app is locally loading\n * @param {Object} store - Redux store\n * @returns {Boolean} loading\n */\nconst getLoading = store => {\n  return store.status.loading;\n};\n/**\n * @function\n * Get whether or not app is globally loading\n * @param {Object} store - Redux store\n * @returns {Boolean} loading\n */\n\n\nconst getPageLoading = store => {\n  return store.status.pageLoading;\n};\n/**\n * @function\n * Get whether there is an error in the app\n * @param {Object} store - Redux store\n * @returns {String} error state of all courses\n */\n\n\nconst getError = store => {\n  return store.status.error;\n};\n/**\n * @function\n * Get whether there is an error in the app\n * @param {Object} store - Redux store\n * @returns {String} serverError state of all courses\n */\n\n\nconst getServerError = store => {\n  return store.status.serverError;\n};\n/**\n * @function\n * Get whether there is a success message in the app\n * @param {Object} store - Redux store\n * @returns {String} success message\n */\n\n\nconst getSuccessMessage = store => {\n  return store.status.success;\n};\n/**\n * @function\n * Get whether there is as server success message in the app\n * @param {Object} store - Redux store\n * @returns {String} success message\n */\n\n\nconst getServerSuccess = store => {\n  return store.status.serverSuccess;\n};\n/**\n * @function\n * Get whether there is a message (success or error)\n * @param {Object} store - Redux store\n * @returns {String} message\n */\n\n\nconst getMessage = store => {\n  if (getError(store)) {\n    return getError(store);\n  }\n\n  if (getSuccessMessage(store)) {\n    return getSuccessMessage(store);\n  }\n};\n/**\n * @function\n * Get whether there is a message (success or error)\n * @param {Object} store - Redux store\n * @returns {String} message type of Ant form\n */\n\n\nconst getMessageStatus = store => {\n  if (getError(store)) {\n    return \"error\";\n  }\n\n  if (getSuccessMessage(store)) {\n    return \"success\";\n  }\n\n  return \"validating\";\n};\n/**\n * @function\n * Get key of modal to render globally\n * @param {Object} store - Redux store\n * @returns {String} the string of modal or null\n */\n\n\nconst getModalKey = store => {\n  var _store$status;\n\n  return (_store$status = store.status) === null || _store$status === void 0 ? void 0 : _store$status.modalKey;\n};\n/**\n * @function\n * Check if the modal should be blocked\n * @param {Object} store - Redux store\n * @returns {Boolean} whether or not to block modal refreshes\n */\n\n\nconst getBlockModal = store => {\n  var _store$status2;\n\n  return (_store$status2 = store.status) === null || _store$status2 === void 0 ? void 0 : _store$status2.blockModal;\n};\n/**\n * @function\n * Check if the modal should be blocked\n * @param {Object} store - Redux store\n * @returns {Boolean} whether or not to block modal refreshes\n */\n\n\nconst getRosterStatus = store => {\n  var _store$status3;\n\n  return (_store$status3 = store.status) === null || _store$status3 === void 0 ? void 0 : _store$status3.roster;\n};\n\nexport default {\n  getLoading,\n  getPageLoading,\n  getError,\n  getServerError,\n  getSuccessMessage,\n  getServerSuccess,\n  getModalKey,\n  getBlockModal,\n  getMessage,\n  getMessageStatus,\n  getRosterStatus\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/status/statusSelectors.js"],"names":["getLoading","store","status","loading","getPageLoading","pageLoading","getError","error","getServerError","serverError","getSuccessMessage","success","getServerSuccess","serverSuccess","getMessage","getMessageStatus","getModalKey","modalKey","getBlockModal","blockModal","getRosterStatus","roster"],"mappings":"AAAA;;;;;;AAMA,MAAMA,UAAU,GAAIC,KAAD,IAAW;AAC5B,SAAOA,KAAK,CAACC,MAAN,CAAaC,OAApB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,cAAc,GAAIH,KAAD,IAAW;AAChC,SAAOA,KAAK,CAACC,MAAN,CAAaG,WAApB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,QAAQ,GAAIL,KAAD,IAAW;AAC1B,SAAOA,KAAK,CAACC,MAAN,CAAaK,KAApB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,cAAc,GAAIP,KAAD,IAAW;AAChC,SAAOA,KAAK,CAACC,MAAN,CAAaO,WAApB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,iBAAiB,GAAIT,KAAD,IAAW;AACnC,SAAOA,KAAK,CAACC,MAAN,CAAaS,OAApB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,gBAAgB,GAAIX,KAAD,IAAW;AAClC,SAAOA,KAAK,CAACC,MAAN,CAAaW,aAApB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,UAAU,GAAIb,KAAD,IAAW;AAC5B,MAAIK,QAAQ,CAACL,KAAD,CAAZ,EAAqB;AACnB,WAAOK,QAAQ,CAACL,KAAD,CAAf;AACD;;AACD,MAAIS,iBAAiB,CAACT,KAAD,CAArB,EAA8B;AAC5B,WAAOS,iBAAiB,CAACT,KAAD,CAAxB;AACD;AACF,CAPD;AASA;;;;;;;;AAMA,MAAMc,gBAAgB,GAAId,KAAD,IAAW;AAClC,MAAIK,QAAQ,CAACL,KAAD,CAAZ,EAAqB;AACnB,WAAO,OAAP;AACD;;AACD,MAAIS,iBAAiB,CAACT,KAAD,CAArB,EAA8B;AAC5B,WAAO,SAAP;AACD;;AACD,SAAO,YAAP;AACD,CARD;AAUA;;;;;;;;AAMA,MAAMe,WAAW,GAAIf,KAAD,IAAW;AAAA;;AAC7B,0BAAOA,KAAK,CAACC,MAAb,kDAAO,cAAce,QAArB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,aAAa,GAAIjB,KAAD,IAAW;AAAA;;AAC/B,2BAAOA,KAAK,CAACC,MAAb,mDAAO,eAAciB,UAArB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMC,eAAe,GAAInB,KAAD,IAAW;AAAA;;AACjC,2BAAOA,KAAK,CAACC,MAAb,mDAAO,eAAcmB,MAArB;AACD,CAFD;;AAIA,eAAe;AACbrB,EAAAA,UADa;AAEbI,EAAAA,cAFa;AAGbE,EAAAA,QAHa;AAIbE,EAAAA,cAJa;AAKbE,EAAAA,iBALa;AAMbE,EAAAA,gBANa;AAObI,EAAAA,WAPa;AAQbE,EAAAA,aARa;AASbJ,EAAAA,UATa;AAUbC,EAAAA,gBAVa;AAWbK,EAAAA;AAXa,CAAf","sourcesContent":["/**\n * @function\n * Get whether or not app is locally loading\n * @param {Object} store - Redux store\n * @returns {Boolean} loading\n */\nconst getLoading = (store) => {\n  return store.status.loading;\n};\n\n/**\n * @function\n * Get whether or not app is globally loading\n * @param {Object} store - Redux store\n * @returns {Boolean} loading\n */\nconst getPageLoading = (store) => {\n  return store.status.pageLoading;\n};\n\n/**\n * @function\n * Get whether there is an error in the app\n * @param {Object} store - Redux store\n * @returns {String} error state of all courses\n */\nconst getError = (store) => {\n  return store.status.error;\n};\n\n/**\n * @function\n * Get whether there is an error in the app\n * @param {Object} store - Redux store\n * @returns {String} serverError state of all courses\n */\nconst getServerError = (store) => {\n  return store.status.serverError;\n};\n\n/**\n * @function\n * Get whether there is a success message in the app\n * @param {Object} store - Redux store\n * @returns {String} success message\n */\nconst getSuccessMessage = (store) => {\n  return store.status.success;\n};\n\n/**\n * @function\n * Get whether there is as server success message in the app\n * @param {Object} store - Redux store\n * @returns {String} success message\n */\nconst getServerSuccess = (store) => {\n  return store.status.serverSuccess;\n};\n\n/**\n * @function\n * Get whether there is a message (success or error)\n * @param {Object} store - Redux store\n * @returns {String} message\n */\nconst getMessage = (store) => {\n  if (getError(store)) {\n    return getError(store);\n  }\n  if (getSuccessMessage(store)) {\n    return getSuccessMessage(store);\n  }\n};\n\n/**\n * @function\n * Get whether there is a message (success or error)\n * @param {Object} store - Redux store\n * @returns {String} message type of Ant form\n */\nconst getMessageStatus = (store) => {\n  if (getError(store)) {\n    return \"error\";\n  }\n  if (getSuccessMessage(store)) {\n    return \"success\";\n  }\n  return \"validating\";\n};\n\n/**\n * @function\n * Get key of modal to render globally\n * @param {Object} store - Redux store\n * @returns {String} the string of modal or null\n */\nconst getModalKey = (store) => {\n  return store.status?.modalKey;\n};\n\n/**\n * @function\n * Check if the modal should be blocked\n * @param {Object} store - Redux store\n * @returns {Boolean} whether or not to block modal refreshes\n */\nconst getBlockModal = (store) => {\n  return store.status?.blockModal;\n};\n\n/**\n * @function\n * Check if the modal should be blocked\n * @param {Object} store - Redux store\n * @returns {Boolean} whether or not to block modal refreshes\n */\nconst getRosterStatus = (store) => {\n  return store.status?.roster;\n};\n\nexport default {\n  getLoading,\n  getPageLoading,\n  getError,\n  getServerError,\n  getSuccessMessage,\n  getServerSuccess,\n  getModalKey,\n  getBlockModal,\n  getMessage,\n  getMessageStatus,\n  getRosterStatus,\n};\n"]},"metadata":{},"sourceType":"module"}