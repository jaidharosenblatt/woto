{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/user/addcourse/Form/StudentAddCourse.js\";\nimport React from \"react\";\nimport { Form, Input, Button, Space } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../addcourse.css\";\nimport selectors from \"../../../../redux/selectors\";\nimport { courseEnroll } from \"../../../../redux/sorted-courses/actionCreators\";\nimport { connect } from \"react-redux\";\nimport { setSuccessMessage } from \"../../../../redux/status/actionCreators\";\n/**\n * @MatthewSclar @jaidharosenblatt\n * Form for students to enroll in a new course\n * Makes a POST request to /courses/enroll with an inputted\n * verification key and handles errors. Upon a succesful enrol,\n * show the course that user has enrolled in and navigate back to home\n */\n\nconst AddCourseForm = props => {\n  const {\n    error,\n    course,\n    loading,\n    success\n  } = props;\n  const history = useHistory();\n\n  const startCourse = () => {\n    // clear success message\n    props.setSuccessMessage(undefined); // direct to newly added course\n\n    history.push(`/courses/${course._id}/session`);\n  };\n\n  return /*#__PURE__*/React.createElement(Space, {\n    align: \"center\",\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, success ? `Enrolled in ${course.name} (${course.code})` : \"Join a new course\"), /*#__PURE__*/React.createElement(Form, {\n    onFinish: ({\n      accessKey\n    }) => props.courseEnroll(accessKey),\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, !success && /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Course Code\",\n    name: \"accessKey\",\n    help: error,\n    validateStatus: error ? \"error\" : \"validating\",\n    colon: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Enter your 6 character code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  })), success ? /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    block: true,\n    onClick: startCourse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"Get Started\") : /*#__PURE__*/React.createElement(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    block: true,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Join Course\"))));\n};\n\nconst mapStateToProps = (state, prevState) => {\n  return { ...prevState,\n    loading: selectors.getLoading(state),\n    error: selectors.getError(state),\n    success: selectors.getSuccessMessage(state),\n    course: selectors.getCourse(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  courseEnroll,\n  setSuccessMessage\n})(AddCourseForm);","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/user/addcourse/Form/StudentAddCourse.js"],"names":["React","Form","Input","Button","Space","useHistory","selectors","courseEnroll","connect","setSuccessMessage","AddCourseForm","props","error","course","loading","success","history","startCourse","undefined","push","_id","name","code","accessKey","mapStateToProps","state","prevState","getLoading","getError","getSuccessMessage","getCourse"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Input, Button, Space } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../addcourse.css\";\nimport selectors from \"../../../../redux/selectors\";\nimport { courseEnroll } from \"../../../../redux/sorted-courses/actionCreators\";\n\nimport { connect } from \"react-redux\";\nimport { setSuccessMessage } from \"../../../../redux/status/actionCreators\";\n/**\n * @MatthewSclar @jaidharosenblatt\n * Form for students to enroll in a new course\n * Makes a POST request to /courses/enroll with an inputted\n * verification key and handles errors. Upon a succesful enrol,\n * show the course that user has enrolled in and navigate back to home\n */\n\nconst AddCourseForm = (props) => {\n  const { error, course, loading, success } = props;\n  const history = useHistory();\n\n  const startCourse = () => {\n    // clear success message\n    props.setSuccessMessage(undefined);\n\n    // direct to newly added course\n    history.push(`/courses/${course._id}/session`);\n  };\n\n  return (\n    <Space align=\"center\" direction=\"vertical\">\n      <h2>{success ? `Enrolled in ${course.name} (${course.code})` : \"Join a new course\"}</h2>\n\n      <Form onFinish={({ accessKey }) => props.courseEnroll(accessKey)} layout=\"vertical\">\n        {!success && (\n          <Form.Item\n            label=\"Course Code\"\n            name=\"accessKey\"\n            help={error}\n            validateStatus={error ? \"error\" : \"validating\"}\n            colon={false}\n          >\n            <Input placeholder=\"Enter your 6 character code\" />\n          </Form.Item>\n        )}\n        {success ? (\n          <Button type=\"primary\" block onClick={startCourse}>\n            Get Started\n          </Button>\n        ) : (\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" block loading={loading}>\n              Join Course\n            </Button>\n          </Form.Item>\n        )}\n      </Form>\n    </Space>\n  );\n};\n\nconst mapStateToProps = (state, prevState) => {\n  return {\n    ...prevState,\n    loading: selectors.getLoading(state),\n    error: selectors.getError(state),\n    success: selectors.getSuccessMessage(state),\n    course: selectors.getCourse(state),\n  };\n};\n\nexport default connect(mapStateToProps, { courseEnroll, setSuccessMessage })(AddCourseForm);\n"]},"metadata":{},"sourceType":"module"}