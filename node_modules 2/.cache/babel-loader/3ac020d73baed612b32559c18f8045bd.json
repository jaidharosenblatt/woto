{"ast":null,"code":"import { setServerError, clearError, startLoading, stopLoading, setSuccessMessage, startPageLoading, stopPageLoading, resetStatus, setError } from \"../status/actionCreators\";\nimport { resetCourses } from \"../courses/actions/actionCreators\";\nimport { resetSortedCourses } from \"../sorted-courses/actionCreators\";\nimport { resetCurrentCourse } from \"../current-course/actionCreators\";\nimport { loadCourses } from \"../courses/actions/student\";\nimport actionTypes from \"./actionTypes\";\nimport API from \"../../api/API\";\nimport selectors from \"../selectors\";\nimport { getToken } from \"../../api/tokenService\";\n/**\n * Returns Redux Thunk function that dispatches LOAD_USER action with user\n * @function loadUser\n * @returns {function} Redux thunk action\n */\n\nexport const loadUser = () => async dispatch => {\n  dispatch(startPageLoading());\n\n  try {\n    const user = await API.loadUser();\n\n    if (user != null) {\n      dispatch({\n        type: actionTypes.LOAD_USER,\n        payload: user\n      });\n    }\n\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"loading your profile\"));\n    console.error(error);\n    dispatch(resetAllStates());\n  } finally {\n    dispatch(stopPageLoading());\n  }\n};\n/**\n * Login a user\n * @param {Object} user email and password\n * @param {String} userType student or instructor\n * @returns {function} Redux thunk action\n */\n\nexport const login = (user, userType) => async dispatch => {\n  dispatch(startLoading());\n\n  try {\n    const res = await API.logIn(user, userType);\n    const loggedInUser = res[userType];\n\n    if (getToken() && loggedInUser.verified) {\n      await dispatch(loadCourses());\n    }\n\n    if (loggedInUser != null) {\n      dispatch({\n        type: actionTypes.LOGIN_USER,\n        payload: {\n          user: loggedInUser,\n          userType\n        }\n      });\n    }\n\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setError(error));\n  } finally {\n    dispatch(stopLoading());\n    dispatch(stopPageLoading());\n  }\n};\n/**\n * Sign up a new user\n * @param {Object} user registration form fields\n * @param {String} userType student or instructor\n * @returns {function} Redux thunk action\n */\n\nexport const register = (user, userType) => async dispatch => {\n  dispatch(startLoading());\n\n  try {\n    const newUser = await API.register(user, userType);\n\n    if (newUser != null) {\n      dispatch({\n        type: actionTypes.REGISTER_USER,\n        payload: {\n          user: newUser,\n          userType\n        }\n      });\n    }\n\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setError(error));\n  } finally {\n    dispatch(stopLoading());\n    dispatch(stopPageLoading());\n  }\n};\n/**\n * Edit profile for signed in user\n * @param {Object} changes edit form fields\n * @returns {function} Redux thunk action\n */\n\nexport const editProfile = (changes, loading = true) => async dispatch => {\n  loading && dispatch(startLoading());\n\n  try {\n    const newUser = await API.editProfile(changes);\n\n    if (newUser != null) {\n      dispatch({\n        type: actionTypes.EDIT_USER,\n        payload: newUser\n      });\n    }\n\n    dispatch(clearError());\n    dispatch(setSuccessMessage(\"Profile updated\"));\n  } catch (error) {\n    dispatch(setError(error));\n  }\n\n  loading && dispatch(stopLoading());\n};\n/**\n * Sign out the signed in user\n * @returns {function} Redux thunk action\n */\n\nexport const logout = () => async dispatch => {\n  dispatch(startLoading());\n\n  try {\n    await API.logOut();\n  } catch (error) {\n    console.error(error);\n  } finally {\n    dispatch(resetAllStates());\n  }\n};\n/**\n * Send reverification email\n * @param {Object} values\n * @returns {function} Redux thunk action\n */\n\nexport const reverifyEmail = email => async (dispatch, getState) => {\n  dispatch(startLoading());\n  const userType = selectors.getUserType(getState());\n\n  try {\n    await API.reverify({\n      email\n    }, userType);\n    dispatch(setSuccessMessage(`Reverification email sent to ${email}`));\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setError(error));\n  }\n\n  dispatch(stopLoading());\n};\n/**\n * Send reverification email\n * @param {Object} values\n * @returns {function} Redux thunk action\n */\n\nexport const verifyUser = (verificationKey, userType) => async dispatch => {\n  dispatch(startPageLoading());\n\n  try {\n    const res = await API.verifyUser(verificationKey, userType);\n    const user = res[userType];\n\n    if (user != null) {\n      dispatch({\n        type: actionTypes.LOAD_USER,\n        payload: user\n      });\n    }\n\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setError(error));\n  }\n\n  dispatch(stopPageLoading());\n};\n/**\n * Call the Oauth API and dispatch the user (new or existing)\n * @param {String} code from oauth callback\n * @param {String} type either 'instructor' or 'student' (Default)\n * @returns {function} Redux thunk action\n */\n\nexport const authenticateWithOauth = (code, userType) => async dispatch => {\n  try {\n    let user;\n\n    if (userType === \"instructor\") {\n      user = await API.authenticateInstructor(code);\n    } else {\n      user = await API.authenticateStudent(code);\n    }\n\n    dispatch({\n      type: actionTypes.LOAD_USER,\n      payload: user\n    });\n  } catch (error) {\n    dispatch(setError(error));\n  }\n};\n/**\n * Reset all of redux states (courses, auth, sortedCourses, selectedCourse)\n */\n\nconst resetAllStates = () => dispatch => {\n  dispatch(resetStatus());\n  dispatch(resetCourses());\n  dispatch(resetAuth());\n  dispatch(resetSortedCourses());\n  dispatch(resetCurrentCourse());\n};\n/**\n * Reset the auth state in redux\n * @returns {Object} to dispatch to redux\n */\n\n\nexport function resetAuth() {\n  return {\n    type: actionTypes.RESET\n  };\n}","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/auth/actionCreators.js"],"names":["setServerError","clearError","startLoading","stopLoading","setSuccessMessage","startPageLoading","stopPageLoading","resetStatus","setError","resetCourses","resetSortedCourses","resetCurrentCourse","loadCourses","actionTypes","API","selectors","getToken","loadUser","dispatch","user","type","LOAD_USER","payload","error","console","resetAllStates","login","userType","res","logIn","loggedInUser","verified","LOGIN_USER","register","newUser","REGISTER_USER","editProfile","changes","loading","EDIT_USER","logout","logOut","reverifyEmail","email","getState","getUserType","reverify","verifyUser","verificationKey","authenticateWithOauth","code","authenticateInstructor","authenticateStudent","resetAuth","RESET"],"mappings":"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","sourcesContent":["import {\n  setServerError,\n  clearError,\n  startLoading,\n  stopLoading,\n  setSuccessMessage,\n  startPageLoading,\n  stopPageLoading,\n  resetStatus,\n  setError,\n} from \"../status/actionCreators\";\nimport { resetCourses } from \"../courses/actions/actionCreators\";\nimport { resetSortedCourses } from \"../sorted-courses/actionCreators\";\nimport { resetCurrentCourse } from \"../current-course/actionCreators\";\nimport { loadCourses } from \"../courses/actions/student\";\nimport actionTypes from \"./actionTypes\";\nimport API from \"../../api/API\";\nimport selectors from \"../selectors\";\nimport { getToken } from \"../../api/tokenService\";\n\n/**\n * Returns Redux Thunk function that dispatches LOAD_USER action with user\n * @function loadUser\n * @returns {function} Redux thunk action\n */\nexport const loadUser = () => async (dispatch) => {\n  dispatch(startPageLoading());\n  try {\n    const user = await API.loadUser();\n\n    if (user != null) {\n      dispatch({\n        type: actionTypes.LOAD_USER,\n        payload: user,\n      });\n    }\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setServerError(\"loading your profile\"));\n    console.error(error);\n    dispatch(resetAllStates());\n  } finally {\n    dispatch(stopPageLoading());\n  }\n};\n\n/**\n * Login a user\n * @param {Object} user email and password\n * @param {String} userType student or instructor\n * @returns {function} Redux thunk action\n */\nexport const login = (user, userType) => async (dispatch) => {\n  dispatch(startLoading());\n\n  try {\n    const res = await API.logIn(user, userType);\n    const loggedInUser = res[userType];\n\n    if (getToken() && loggedInUser.verified) {\n      await dispatch(loadCourses());\n    }\n\n    if (loggedInUser != null) {\n      dispatch({\n        type: actionTypes.LOGIN_USER,\n        payload: { user: loggedInUser, userType },\n      });\n    }\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setError(error));\n  } finally {\n    dispatch(stopLoading());\n    dispatch(stopPageLoading());\n  }\n};\n\n/**\n * Sign up a new user\n * @param {Object} user registration form fields\n * @param {String} userType student or instructor\n * @returns {function} Redux thunk action\n */\nexport const register = (user, userType) => async (dispatch) => {\n  dispatch(startLoading());\n  try {\n    const newUser = await API.register(user, userType);\n\n    if (newUser != null) {\n      dispatch({\n        type: actionTypes.REGISTER_USER,\n        payload: { user: newUser, userType },\n      });\n    }\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setError(error));\n  } finally {\n    dispatch(stopLoading());\n    dispatch(stopPageLoading());\n  }\n};\n\n/**\n * Edit profile for signed in user\n * @param {Object} changes edit form fields\n * @returns {function} Redux thunk action\n */\nexport const editProfile = (changes, loading = true) => async (dispatch) => {\n  loading && dispatch(startLoading());\n\n  try {\n    const newUser = await API.editProfile(changes);\n\n    if (newUser != null) {\n      dispatch({\n        type: actionTypes.EDIT_USER,\n        payload: newUser,\n      });\n    }\n    dispatch(clearError());\n    dispatch(setSuccessMessage(\"Profile updated\"));\n  } catch (error) {\n    dispatch(setError(error));\n  }\n\n  loading && dispatch(stopLoading());\n};\n\n/**\n * Sign out the signed in user\n * @returns {function} Redux thunk action\n */\nexport const logout = () => async (dispatch) => {\n  dispatch(startLoading());\n  try {\n    await API.logOut();\n  } catch (error) {\n    console.error(error);\n  } finally {\n    dispatch(resetAllStates());\n  }\n};\n\n/**\n * Send reverification email\n * @param {Object} values\n * @returns {function} Redux thunk action\n */\nexport const reverifyEmail = (email) => async (dispatch, getState) => {\n  dispatch(startLoading());\n  const userType = selectors.getUserType(getState());\n  try {\n    await API.reverify({ email }, userType);\n    dispatch(setSuccessMessage(`Reverification email sent to ${email}`));\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setError(error));\n  }\n  dispatch(stopLoading());\n};\n\n/**\n * Send reverification email\n * @param {Object} values\n * @returns {function} Redux thunk action\n */\nexport const verifyUser = (verificationKey, userType) => async (dispatch) => {\n  dispatch(startPageLoading());\n  try {\n    const res = await API.verifyUser(verificationKey, userType);\n    const user = res[userType];\n\n    if (user != null) {\n      dispatch({\n        type: actionTypes.LOAD_USER,\n        payload: user,\n      });\n    }\n    dispatch(clearError());\n  } catch (error) {\n    dispatch(setError(error));\n  }\n  dispatch(stopPageLoading());\n};\n\n/**\n * Call the Oauth API and dispatch the user (new or existing)\n * @param {String} code from oauth callback\n * @param {String} type either 'instructor' or 'student' (Default)\n * @returns {function} Redux thunk action\n */\nexport const authenticateWithOauth = (code, userType) => async (dispatch) => {\n  try {\n    let user;\n    if (userType === \"instructor\") {\n      user = await API.authenticateInstructor(code);\n    } else {\n      user = await API.authenticateStudent(code);\n    }\n    dispatch({\n      type: actionTypes.LOAD_USER,\n      payload: user,\n    });\n  } catch (error) {\n    dispatch(setError(error));\n  }\n};\n\n/**\n * Reset all of redux states (courses, auth, sortedCourses, selectedCourse)\n */\nconst resetAllStates = () => (dispatch) => {\n  dispatch(resetStatus());\n  dispatch(resetCourses());\n  dispatch(resetAuth());\n  dispatch(resetSortedCourses());\n  dispatch(resetCurrentCourse());\n};\n\n/**\n * Reset the auth state in redux\n * @returns {Object} to dispatch to redux\n */\nexport function resetAuth() {\n  return {\n    type: actionTypes.RESET,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}