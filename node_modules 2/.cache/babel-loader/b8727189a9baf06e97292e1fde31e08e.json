{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/form/SelectWithAdd.js\";\nimport React, { useState } from \"react\";\nimport { Select } from \"antd\";\nimport TrieSearch from \"trie-search\";\n/**\n * Render a select field that allows searching of items and additional options\n * It's a shame that Ant.design doesn't support this already...\n * @param {Array} options list of options to render\n * @param {Object} propsWithoutOptions any other props passed in\n */\n\nexport default function SelectWithAdd(props) {\n  const {\n    options,\n    ...propsWithoutOptions\n  } = props;\n  const [optionsWithSearch, setOptionsWithSearch] = useState(options); // use a trie package to get quick checks for prefixes\n\n  const optionsTree = new TrieSearch(\"value\");\n  optionsTree.addAll(options.map(option => {\n    return {\n      value: option\n    };\n  })); // add the current search value to options if it doesn't already exist\n\n  const handleSearch = search => {\n    const existsInOptions = optionsTree.get(search).length > 0;\n\n    if (!existsInOptions && (search === null || search === void 0 ? void 0 : search.length) > 0) {\n      setOptionsWithSearch(options.concat(search));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Select, Object.assign({}, propsWithoutOptions, {\n    showSearch: true,\n    onSearch: handleSearch,\n    notFoundContent: \"Enter a new option\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }), optionsWithSearch.map((option, i) => /*#__PURE__*/React.createElement(Select.Option, {\n    key: i,\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, option)));\n}","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/form/SelectWithAdd.js"],"names":["React","useState","Select","TrieSearch","SelectWithAdd","props","options","propsWithoutOptions","optionsWithSearch","setOptionsWithSearch","optionsTree","addAll","map","option","value","handleSearch","search","existsInOptions","get","length","concat","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA;;;;;;;AAMA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC3C,QAAM;AAAEC,IAAAA,OAAF;AAAW,OAAGC;AAAd,MAAsCF,KAA5C;AACA,QAAM,CAACG,iBAAD,EAAoBC,oBAApB,IAA4CR,QAAQ,CAACK,OAAD,CAA1D,CAF2C,CAI3C;;AACA,QAAMI,WAAW,GAAG,IAAIP,UAAJ,CAAe,OAAf,CAApB;AACAO,EAAAA,WAAW,CAACC,MAAZ,CACEL,OAAO,CAACM,GAAR,CAAaC,MAAD,IAAY;AACtB,WAAO;AAAEC,MAAAA,KAAK,EAAED;AAAT,KAAP;AACD,GAFD,CADF,EAN2C,CAY3C;;AACA,QAAME,YAAY,GAAIC,MAAD,IAAY;AAC/B,UAAMC,eAAe,GAAGP,WAAW,CAACQ,GAAZ,CAAgBF,MAAhB,EAAwBG,MAAxB,GAAiC,CAAzD;;AACA,QAAI,CAACF,eAAD,IAAoB,CAAAD,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,MAAR,IAAiB,CAAzC,EAA4C;AAC1CV,MAAAA,oBAAoB,CAACH,OAAO,CAACc,MAAR,CAAeJ,MAAf,CAAD,CAApB;AACD;AACF,GALD;;AAMA,sBACE,oBAAC,MAAD,oBACMT,mBADN;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,QAAQ,EAAEQ,YAHZ;AAIE,IAAA,eAAe,EAAC,oBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMGP,iBAAiB,CAACI,GAAlB,CAAsB,CAACC,MAAD,EAASQ,CAAT,kBACrB,oBAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,GAAG,EAAEA,CAApB;AAAuB,IAAA,KAAK,EAAER,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MADH,CADD,CANH,CADF;AAcD","sourcesContent":["import React, { useState } from \"react\";\nimport { Select } from \"antd\";\nimport TrieSearch from \"trie-search\";\n\n/**\n * Render a select field that allows searching of items and additional options\n * It's a shame that Ant.design doesn't support this already...\n * @param {Array} options list of options to render\n * @param {Object} propsWithoutOptions any other props passed in\n */\nexport default function SelectWithAdd(props) {\n  const { options, ...propsWithoutOptions } = props;\n  const [optionsWithSearch, setOptionsWithSearch] = useState(options);\n\n  // use a trie package to get quick checks for prefixes\n  const optionsTree = new TrieSearch(\"value\");\n  optionsTree.addAll(\n    options.map((option) => {\n      return { value: option };\n    })\n  );\n\n  // add the current search value to options if it doesn't already exist\n  const handleSearch = (search) => {\n    const existsInOptions = optionsTree.get(search).length > 0;\n    if (!existsInOptions && search?.length > 0) {\n      setOptionsWithSearch(options.concat(search));\n    }\n  };\n  return (\n    <Select\n      {...propsWithoutOptions}\n      showSearch\n      onSearch={handleSearch}\n      notFoundContent=\"Enter a new option\"\n    >\n      {optionsWithSearch.map((option, i) => (\n        <Select.Option key={i} value={option}>\n          {option}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}