{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/form/SegmentedControl.js\";\nimport React from \"react\";\nimport { Form, Radio, Col } from \"antd\";\n/**\n * @matthewsclar @jaidharosenblatt Segmented control with a variable options\n * and conditional rendering for text on mobile/desktop\n * @param name the name of the field to output\n * @param label the label of the radio group\n * @param onChange function to call on click\n *  @param initialValue default value when in controlled form\n * @param maxWidth of the whole component\n * @param {options} label the default label to display\n * @param {options} labelMobile (optional) the label to display an option on mobile (if null then render normal label)\n * @param {options} value the value of an option\n *\n * Example usage\n * options={[\n    {\n      label: \"This is a very long option\",\n      labelMobile: \"Shorter Option\",\n      value: true,\n    },\n    {\n      label: \"Short Option\",\n      value: false,\n    },\n  ]}\n */\n\nconst SegmentedControl = ({\n  name,\n  label,\n  onChange,\n  options,\n  initialValue,\n  maxWidth\n}) => {\n  const buttonWidth = 100 / options.length + \"%\"; //Creating an array of Radio buttons with text according to viewport\n\n  const mobileOptions = [];\n  const desktopOptions = [];\n  options.forEach(option => {\n    mobileOptions.push( /*#__PURE__*/React.createElement(Radio.Button, {\n      key: option.value,\n      style: {\n        width: buttonWidth\n      },\n      value: option.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, option.labelMobile == null ? option.label : option.labelMobile));\n    desktopOptions.push( /*#__PURE__*/React.createElement(Radio.Button, {\n      key: option.value,\n      style: {\n        width: buttonWidth\n      },\n      value: option.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, option.label));\n  });\n  return /*#__PURE__*/React.createElement(Form.Item, {\n    initialValue: initialValue,\n    name: name,\n    label: label,\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    style: {\n      maxWidth: maxWidth\n    },\n    buttonStyle: \"solid\",\n    className: \"SegmentedController\",\n    onChange: onChange,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 0,\n    lg: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, desktopOptions), /*#__PURE__*/React.createElement(Col, {\n    xs: 24,\n    lg: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, mobileOptions)));\n};\n\nexport default SegmentedControl;","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/form/SegmentedControl.js"],"names":["React","Form","Radio","Col","SegmentedControl","name","label","onChange","options","initialValue","maxWidth","buttonWidth","length","mobileOptions","desktopOptions","forEach","option","push","value","width","labelMobile","required"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,QAAiC,MAAjC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAMC,gBAAgB,GAAG,CAAC;AACxBC,EAAAA,IADwB;AAExBC,EAAAA,KAFwB;AAGxBC,EAAAA,QAHwB;AAIxBC,EAAAA,OAJwB;AAKxBC,EAAAA,YALwB;AAMxBC,EAAAA;AANwB,CAAD,KAOnB;AACJ,QAAMC,WAAW,GAAG,MAAMH,OAAO,CAACI,MAAd,GAAuB,GAA3C,CADI,CAGJ;;AACA,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACAN,EAAAA,OAAO,CAACO,OAAR,CAAiBC,MAAD,IAAY;AAC1BH,IAAAA,aAAa,CAACI,IAAd,eACE,oBAAC,KAAD,CAAO,MAAP;AACE,MAAA,GAAG,EAAED,MAAM,CAACE,KADd;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAER;AAAT,OAFT;AAGE,MAAA,KAAK,EAAEK,MAAM,CAACE,KAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGF,MAAM,CAACI,WAAP,IAAsB,IAAtB,GAA6BJ,MAAM,CAACV,KAApC,GAA4CU,MAAM,CAACI,WALtD,CADF;AASAN,IAAAA,cAAc,CAACG,IAAf,eACE,oBAAC,KAAD,CAAO,MAAP;AACE,MAAA,GAAG,EAAED,MAAM,CAACE,KADd;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAER;AAAT,OAFT;AAGE,MAAA,KAAK,EAAEK,MAAM,CAACE,KAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGF,MAAM,CAACV,KALV,CADF;AASD,GAnBD;AAqBA,sBACE,oBAAC,IAAD,CAAM,IAAN;AACE,IAAA,YAAY,EAAEG,YADhB;AAEE,IAAA,IAAI,EAAEJ,IAFR;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,KAAK,EAAE,CAAC;AAAEe,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,KAAD,CAAO,KAAP;AACE,IAAA,KAAK,EAAE;AAAEX,MAAAA,QAAQ,EAAEA;AAAZ,KADT;AAEE,IAAA,WAAW,EAAC,OAFd;AAGE,IAAA,SAAS,EAAC,qBAHZ;AAIE,IAAA,QAAQ,EAAEH,QAJZ;AAKE,IAAA,IAAI,EAAEF,IALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,cADH,CAPF,eAUE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,aADH,CAVF,CANF,CADF;AAuBD,CAzDD;;AA2DA,eAAeT,gBAAf","sourcesContent":["import React from \"react\";\nimport { Form, Radio, Col } from \"antd\";\n\n/**\n * @matthewsclar @jaidharosenblatt Segmented control with a variable options\n * and conditional rendering for text on mobile/desktop\n * @param name the name of the field to output\n * @param label the label of the radio group\n * @param onChange function to call on click\n *  @param initialValue default value when in controlled form\n * @param maxWidth of the whole component\n * @param {options} label the default label to display\n * @param {options} labelMobile (optional) the label to display an option on mobile (if null then render normal label)\n * @param {options} value the value of an option\n *\n * Example usage\n * options={[\n    {\n      label: \"This is a very long option\",\n      labelMobile: \"Shorter Option\",\n      value: true,\n    },\n    {\n      label: \"Short Option\",\n      value: false,\n    },\n  ]}\n */\n\nconst SegmentedControl = ({\n  name,\n  label,\n  onChange,\n  options,\n  initialValue,\n  maxWidth,\n}) => {\n  const buttonWidth = 100 / options.length + \"%\";\n\n  //Creating an array of Radio buttons with text according to viewport\n  const mobileOptions = [];\n  const desktopOptions = [];\n  options.forEach((option) => {\n    mobileOptions.push(\n      <Radio.Button\n        key={option.value}\n        style={{ width: buttonWidth }}\n        value={option.value}\n      >\n        {option.labelMobile == null ? option.label : option.labelMobile}\n      </Radio.Button>\n    );\n    desktopOptions.push(\n      <Radio.Button\n        key={option.value}\n        style={{ width: buttonWidth }}\n        value={option.value}\n      >\n        {option.label}\n      </Radio.Button>\n    );\n  });\n\n  return (\n    <Form.Item\n      initialValue={initialValue}\n      name={name}\n      label={label}\n      rules={[{ required: true }]}\n    >\n      <Radio.Group\n        style={{ maxWidth: maxWidth }}\n        buttonStyle=\"solid\"\n        className=\"SegmentedController\"\n        onChange={onChange}\n        name={name}\n      >\n        <Col xs={0} lg={24}>\n          {desktopOptions}\n        </Col>\n        <Col xs={24} lg={0}>\n          {mobileOptions}\n        </Col>\n      </Radio.Group>\n    </Form.Item>\n  );\n};\n\nexport default SegmentedControl;\n"]},"metadata":{},"sourceType":"module"}