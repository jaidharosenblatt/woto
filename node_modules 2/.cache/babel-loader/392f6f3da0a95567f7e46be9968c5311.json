{"ast":null,"code":"import client from \"../axiosConfig\";\nimport { getUserType } from \"../tokenService\";\n\nconst typeTerm = type => {\n  return type === \"instructor\" ? \"instructors\" : \"students\";\n};\n\nconst getCourses = async () => {\n  const type = getUserType();\n  let {\n    data\n  } = await client.get(`/${typeTerm(type)}/courses/`);\n  return data;\n};\n/**\n * Unenroll from a course based on its id\n * @param {*} courseId\n */\n\n\nconst unenroll = async courseId => {\n  let {\n    data\n  } = await client.delete(`/courses/${courseId}/unenroll/`);\n  return data;\n};\n\nconst inviteEmails = async (courseid, emails) => {\n  let {\n    data\n  } = await client.post(`/courses/${courseid}/invite`, emails);\n  return data;\n};\n/**\n * Get a course from ID\n * @param {*} courseId\n */\n\n\nconst getCourse = async courseid => {\n  let {\n    data\n  } = await client.get(`/courses/admin/${courseid}`);\n  return data;\n};\n/**\n * Update the questionTemplate attritbute for courses\n * @param {*} courseId\n */\n\n\nconst updateTemplate = async (courseid, template) => {\n  let {\n    data\n  } = await client.patch(`/courses/admin/${courseid}`, template);\n  return data;\n};\n/**\n * Update a course from course settings\n * @param {*} courseId\n */\n\n\nconst editCourse = async (courseid, newSettings) => {\n  let {\n    data\n  } = await client.patch(`/courses/admin/${courseid}`, newSettings);\n  return data;\n};\n/**\n * Get a courses GENERAL KEY from database\n * @param {*} courseId\n */\n\n\nconst getGeneralKey = async courseid => {\n  let {\n    data\n  } = await client.get(`/courses/admin/generalkey/${courseid}`);\n  return data;\n};\n/**\n * Get students for a course\n * @param {*} courseId\n */\n\n\nconst getStudents = async courseId => {\n  let {\n    data\n  } = await client.get(`/courses/${courseId}/students`);\n  return data;\n};\n/**\n * Get students for a course\n * @param {*} courseId\n */\n\n\nconst promoteAssistant = async (courseId, studentId) => {\n  let {\n    data\n  } = await client.post(`/courses/${courseId}/assistants`, [{\n    assistant_id: studentId\n  }]);\n  return data;\n};\n/**\n * Add students for a course\n * @param {ObjectId} courseId\n * @param {Array} students to add\n */\n\n\nconst inviteDukeStudents = async (courseId, students) => {\n  let {\n    data\n  } = await client.post(`/courses/${courseId}/inviteDuke`, {\n    students\n  });\n  return data;\n};\n/**\n * Remove a student for a course\n * @param {ObjectId} courseId\n * @param {ObjectId} studentId to remove\n */\n\n\nconst removeStudents = async (courseId, studentId) => {\n  const studentsToDelete = [studentId];\n  console.log(studentsToDelete);\n  let {\n    data\n  } = await client.delete(`/courses/admin/${courseId}/unenroll`, {\n    data: {\n      studentsToDelete\n    }\n  });\n  return data;\n};\n/**\n * Demote a TA to a student\n * @param {ObjectId} courseId\n * @param {ObjectId} taId to remove\n */\n\n\nconst demoteAssistants = async (courseId, taId) => {\n  let {\n    data\n  } = await client.post(`/courses/${courseId}/demoteAssistants`, [{\n    assistant_id: taId\n  }]);\n  return data;\n};\n/**\n * Make an announcement for a course\n * @param {*} courseId\n * @param {*} message - message user wishes to display\n * @param {*} ownerName - name of the user making the announcement\n * @param {*} meetingURL - URL for a video room\n */\n\n\nconst makeAnnouncement = async (courseId, message, ownerName, meetingURL) => {\n  let {\n    data\n  } = await client.post(`/courses/${courseId}/announcements`, {\n    announcement: message,\n    meetingURL,\n    ownerName\n  });\n  return data;\n};\n/**\n * Pin an announcment\n * @param {*} announcementId\n */\n\n\nconst pinAnnouncement = async announcementId => {\n  let {\n    data\n  } = await client.patch(`/announcements/${announcementId}`, {\n    pinned: true\n  });\n  return data;\n};\n/**\n * Unpin an announcement\n * @param {*} announcementId\n */\n\n\nconst unpinAnnouncement = async announcementId => {\n  let {\n    data\n  } = await client.patch(`/announcements/${announcementId}`, {\n    pinned: false\n  });\n  return data;\n};\n/**\n * Close an announcement\n * @param {*} announcementId\n */\n\n\nconst closeAnnouncement = async announcementId => {\n  let {\n    data\n  } = await client.patch(`/announcements/${announcementId}`, {\n    active: false\n  });\n  return data;\n};\n\nexport default {\n  getCourses,\n  inviteEmails,\n  unenroll,\n  updateTemplate,\n  inviteDukeStudents,\n  editCourse,\n  getGeneralKey,\n  removeStudents,\n  demoteAssistants,\n  getCourse,\n  getStudents,\n  promoteAssistant,\n  makeAnnouncement,\n  pinAnnouncement,\n  unpinAnnouncement,\n  closeAnnouncement\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/api/endpoints/courseEndpoints.js"],"names":["client","getUserType","typeTerm","type","getCourses","data","get","unenroll","courseId","delete","inviteEmails","courseid","emails","post","getCourse","updateTemplate","template","patch","editCourse","newSettings","getGeneralKey","getStudents","promoteAssistant","studentId","assistant_id","inviteDukeStudents","students","removeStudents","studentsToDelete","console","log","demoteAssistants","taId","makeAnnouncement","message","ownerName","meetingURL","announcement","pinAnnouncement","announcementId","pinned","unpinAnnouncement","closeAnnouncement","active"],"mappings":"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","sourcesContent":["import client from \"../axiosConfig\";\nimport { getUserType } from \"../tokenService\";\n\nconst typeTerm = (type) => {\n  return type === \"instructor\" ? \"instructors\" : \"students\";\n};\n\nconst getCourses = async () => {\n  const type = getUserType();\n  let { data } = await client.get(`/${typeTerm(type)}/courses/`);\n  return data;\n};\n\n/**\n * Unenroll from a course based on its id\n * @param {*} courseId\n */\nconst unenroll = async (courseId) => {\n  let { data } = await client.delete(`/courses/${courseId}/unenroll/`);\n  return data;\n};\n\nconst inviteEmails = async (courseid, emails) => {\n  let { data } = await client.post(`/courses/${courseid}/invite`, emails);\n  return data;\n};\n\n/**\n * Get a course from ID\n * @param {*} courseId\n */\nconst getCourse = async (courseid) => {\n  let { data } = await client.get(`/courses/admin/${courseid}`);\n  return data;\n};\n\n/**\n * Update the questionTemplate attritbute for courses\n * @param {*} courseId\n */\nconst updateTemplate = async (courseid, template) => {\n  let { data } = await client.patch(`/courses/admin/${courseid}`, template);\n  return data;\n};\n\n/**\n * Update a course from course settings\n * @param {*} courseId\n */\nconst editCourse = async (courseid, newSettings) => {\n  let { data } = await client.patch(`/courses/admin/${courseid}`, newSettings);\n  return data;\n};\n\n/**\n * Get a courses GENERAL KEY from database\n * @param {*} courseId\n */\nconst getGeneralKey = async (courseid) => {\n  let { data } = await client.get(`/courses/admin/generalkey/${courseid}`);\n  return data;\n};\n\n/**\n * Get students for a course\n * @param {*} courseId\n */\nconst getStudents = async (courseId) => {\n  let { data } = await client.get(`/courses/${courseId}/students`);\n  return data;\n};\n\n/**\n * Get students for a course\n * @param {*} courseId\n */\nconst promoteAssistant = async (courseId, studentId) => {\n  let { data } = await client.post(`/courses/${courseId}/assistants`, [\n    {\n      assistant_id: studentId,\n    },\n  ]);\n  return data;\n};\n\n/**\n * Add students for a course\n * @param {ObjectId} courseId\n * @param {Array} students to add\n */\nconst inviteDukeStudents = async (courseId, students) => {\n  let { data } = await client.post(`/courses/${courseId}/inviteDuke`, {\n    students,\n  });\n  return data;\n};\n\n/**\n * Remove a student for a course\n * @param {ObjectId} courseId\n * @param {ObjectId} studentId to remove\n */\nconst removeStudents = async (courseId, studentId) => {\n  const studentsToDelete = [studentId];\n  console.log(studentsToDelete);\n  let { data } = await client.delete(`/courses/admin/${courseId}/unenroll`, {\n    data: { studentsToDelete },\n  });\n  return data;\n};\n\n/**\n * Demote a TA to a student\n * @param {ObjectId} courseId\n * @param {ObjectId} taId to remove\n */\nconst demoteAssistants = async (courseId, taId) => {\n  let { data } = await client.post(`/courses/${courseId}/demoteAssistants`, [\n    { assistant_id: taId },\n  ]);\n  return data;\n};\n\n/**\n * Make an announcement for a course\n * @param {*} courseId\n * @param {*} message - message user wishes to display\n * @param {*} ownerName - name of the user making the announcement\n * @param {*} meetingURL - URL for a video room\n */\nconst makeAnnouncement = async (courseId, message, ownerName, meetingURL) => {\n  let { data } = await client.post(`/courses/${courseId}/announcements`, {\n    announcement: message,\n    meetingURL,\n    ownerName,\n  });\n  return data;\n};\n\n/**\n * Pin an announcment\n * @param {*} announcementId\n */\nconst pinAnnouncement = async (announcementId) => {\n  let { data } = await client.patch(`/announcements/${announcementId}`, {\n    pinned: true,\n  });\n  return data;\n};\n\n/**\n * Unpin an announcement\n * @param {*} announcementId\n */\nconst unpinAnnouncement = async (announcementId) => {\n  let { data } = await client.patch(`/announcements/${announcementId}`, {\n    pinned: false,\n  });\n  return data;\n};\n\n/**\n * Close an announcement\n * @param {*} announcementId\n */\nconst closeAnnouncement = async (announcementId) => {\n  let { data } = await client.patch(`/announcements/${announcementId}`, {\n    active: false,\n  });\n\n  return data;\n};\n\nexport default {\n  getCourses,\n  inviteEmails,\n  unenroll,\n  updateTemplate,\n  inviteDukeStudents,\n  editCourse,\n  getGeneralKey,\n  removeStudents,\n  demoteAssistants,\n  getCourse,\n  getStudents,\n  promoteAssistant,\n  makeAnnouncement,\n  pinAnnouncement,\n  unpinAnnouncement,\n  closeAnnouncement,\n};\n"]},"metadata":{},"sourceType":"module"}