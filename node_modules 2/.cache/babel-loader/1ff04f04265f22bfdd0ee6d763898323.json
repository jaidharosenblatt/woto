{"ast":null,"code":"/**\n * jclass v1.1.9\n * https://github.com/riga/jclass\n *\n * Marcel Rieger, 2015\n * MIT licensed, http://www.opensource.org/licenses/mit-license\n */\n(function (factory) {\n  /**\n   * Make jclass available in any context.\n   */\n  if (typeof define == \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports == \"object\") {\n    // CommonJS\n    exports = factory();\n\n    if (typeof module == \"object\") {\n      // NodeJS\n      module.exports = exports;\n    }\n  } else if (window) {\n    // Browser\n    window.JClass = factory();\n  } else if (typeof console == \"object\" && console.error instanceof Function) {\n    // error case\n    console.error(\"cannot determine environment\");\n  }\n})(function () {\n  /**\n   * Helper functions.\n   */\n\n  /**\n   * Checks whether a passed object is a function.\n   *\n   * @param obj - The object to check.\n   * @returns {boolean}\n   */\n  var isFn = function (obj) {\n    return obj instanceof Function;\n  };\n  /**\n   * Extends a target object by one or more source objects with shallow key comparisons. Note that\n   * the extension is done in-place.\n   *\n   * @param {object} target - The target object to extend.\n   * @param {...object} source - Source objects.\n   * @returns {object} The extended object.\n   */\n\n\n  var extend = function (target) {\n    var sources = Array.prototype.slice.call(arguments, 1); // loop through all sources\n\n    for (var i in sources) {\n      var source = sources[i]; // object check\n\n      if (typeof source != \"object\") {\n        continue;\n      } // loop through all source attributes\n\n\n      for (var key in source) {\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  };\n  /**\n   * Default options.\n   */\n\n\n  var defaultOptions = {\n    // internal object for indicating that class objects don't have a class object themselves,\n    // may not be used by users\n    _isClassObject: false\n  };\n  /**\n   * Flags.\n   */\n  // flag to distinguish between prototype and class instantiation \n\n  var initializing = false;\n  /**\n   * Base class definition.\n   */\n  // empty BaseClass implementation\n\n  var BaseClass = function () {}; // add the _subClasses entry\n\n\n  BaseClass._subClasses = []; // empty init method\n\n  BaseClass.prototype.init = function () {};\n  /**\n   * Extend mechanism. Returns a derived class.\n   *\n   * @param {object} instanceMembers - Members that will be owned by instances.\n   * @param {object} classMembers - Members that will be owned by the class itself.\n   * @returns {JClass}\n   */\n\n\n  BaseClass._extend = function (instanceMembers, classMembers, options) {\n    // default arguments\n    if (instanceMembers === undefined) {\n      instanceMembers = {};\n    }\n\n    if (classMembers === undefined) {\n      classMembers = {};\n    }\n\n    if (options === undefined) {\n      options = {};\n    } // mixin default options\n\n\n    options = extend({}, defaultOptions, options); // sub class dummy constructor\n\n    var JClass = function () {\n      // nothing happens here when we are initializing\n      if (initializing) {\n        return;\n      } // store a reference to the class itself\n\n\n      this._class = JClass; // all construction is actually done in the init method\n\n      if (this.init instanceof Function) {\n        this.init.apply(this, arguments);\n      }\n    }; // alias for readability\n\n\n    var SuperClass = this; // create an instance of the super class via new\n    // the flag sandwich prevents a call to the init method\n\n    initializing = true;\n    var prototype = new SuperClass();\n    initializing = false; // get the prototype of the super class\n\n    var superPrototype = SuperClass.prototype; // the instance of the super class is our new prototype\n\n    JClass.prototype = prototype; // enforce the constructor to be what we expect\n    // calls to the constructor will invoke the init method (see above)\n\n    JClass.prototype.constructor = JClass; // store a reference to the super class\n\n    JClass._superClass = SuperClass; // store references to all extending classes\n\n    JClass._subClasses = [];\n\n    SuperClass._subClasses.push(JClass); // make this class extendable as well\n\n\n    JClass._extend = SuperClass._extend; // _extends returns true if the class itself extended \"target\"\n    // in any hierarchy, e.g. every class extends \"JClass\" itself\n\n    JClass._extends = function (target) {\n      // this function operates recursive, so stop when the super class is our BaseClass\n      if (this._superClass == BaseClass) {\n        return false;\n      } // success case\n\n\n      if (target == this._superClass || target == BaseClass) {\n        return true;\n      } // continue with the next super class\n\n\n      return this._superClass._extends(target);\n    }; // propagate instance members directly to the created protoype,\n    // the member is either a normal member or a descriptor\n\n\n    for (var key in instanceMembers) {\n      var property = Object.getOwnPropertyDescriptor(instanceMembers, key);\n      var member = property.value; // descriptor flag set?\n\n      if (member !== null && typeof member == \"object\" && member.descriptor) {\n        Object.defineProperty(prototype, key, member); // getter/setter syntax\n      } else if (!(\"value\" in property) && (\"set\" in property || \"get\" in property)) {\n        Object.defineProperty(prototype, key, property); // normal member, simple assignment\n      } else {\n        prototype[key] = member; // if both member and the super member are distinct functions\n        // add the super member to the member as \"_super\"\n\n        var superMember = superPrototype[key];\n\n        if (isFn(member) && isFn(superMember) && member !== superMember) {\n          member._super = superMember;\n        }\n      }\n    } // propagate class members to the _members object\n\n\n    if (!options._isClassObject) {\n      // try to find the super class of the _members object \n      var ClassMembersSuperClass = SuperClass._members === undefined ? BaseClass : SuperClass._members._class; // create the actual class of the _members instance\n      // with an updated version of our options\n\n      var opts = extend({}, options, {\n        _isClassObject: true\n      });\n\n      var ClassMembersClass = ClassMembersSuperClass._extend(classMembers, {}, opts); // store the actual JClass in ClassMembersClass\n\n\n      ClassMembersClass._instanceClass = JClass; // create the _members instance\n\n      JClass._members = new ClassMembersClass();\n    } // return the new class\n\n\n    return JClass;\n  };\n  /**\n   * Converts arbitrary protoype-style classes to our JClass definition.\n   *\n   * @param {function} cls - The class to convert.\n   * @returns {JClass}\n   */\n\n\n  BaseClass._convert = function (cls, options) {\n    // the properties consist of the class' prototype\n    var instanceMembers = cls.prototype; // add the constructor function\n\n    instanceMembers.init = function () {\n      // simply create an instance of our target class\n      var origin = this._origin = BaseClass._construct(cls, arguments); // add properties for each own property in _origin\n\n\n      Object.keys(origin).forEach(function (key) {\n        if (!origin.hasOwnProperty(key)) {\n          return;\n        }\n\n        Object.defineProperty(this, key, {\n          get: function () {\n            return origin[key];\n          }\n        });\n      }, this);\n    }; // finally, create and return our new class\n\n\n    return BaseClass._extend(instanceMembers, {}, options);\n  };\n  /**\n   * Returns an instance of a class with a list of arguments. This provides an apply-like\n   * constructor usage. Note that this approach does not work with native constructors (e.g. String\n   * or Boolean).\n   *\n   * @param {Class|JClass} cls - The class to instantiate. This may be a JClass or a prototype-based\n   *   class.\n   * @param {array} [args=[]] - Arguments to pass to the constructor.\n   * @returns {instance}\n   */\n\n\n  BaseClass._construct = function (cls, args) {\n    // empty default args\n    if (args === undefined) {\n      args = [];\n    } // create a class wrapper that calls cls like a function\n\n\n    var Class = function () {\n      return cls.apply(this, args);\n    }; // copy the prototype\n\n\n    Class.prototype = cls.prototype; // return a new instance\n\n    return new Class();\n  };\n  /**\n   * Returns a property descriptor of the super class.\n   *\n   * @param {JClass|instance} cls - A JClass or an instance of a JClass to retrieve the property\n   *   descriptor from.\n   * @param {string} prop - The name of the property descriptor to get.\n   * @returns {object}\n   */\n\n\n  BaseClass._superDescriptor = function (cls, prop) {\n    // if cls is an instance, use its class\n    if (\"_class\" in cls && cls instanceof cls._class) {\n      cls = cls._class;\n    } // a JClass?\n\n\n    if (\"_extends\" in cls && cls._extends instanceof Function && cls._extends(this)) {\n      return Object.getOwnPropertyDescriptor(cls._superClass.prototype, prop);\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * Return the BaseClass.\n   */\n\n\n  return BaseClass;\n});","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/node_modules/jclass/index.js"],"names":["factory","define","amd","exports","module","window","JClass","console","error","Function","isFn","obj","extend","target","sources","Array","prototype","slice","call","arguments","i","source","key","defaultOptions","_isClassObject","initializing","BaseClass","_subClasses","init","_extend","instanceMembers","classMembers","options","undefined","_class","apply","SuperClass","superPrototype","constructor","_superClass","push","_extends","property","Object","getOwnPropertyDescriptor","member","value","descriptor","defineProperty","superMember","_super","ClassMembersSuperClass","_members","opts","ClassMembersClass","_instanceClass","_convert","cls","origin","_origin","_construct","keys","forEach","hasOwnProperty","get","args","Class","_superDescriptor","prop"],"mappings":"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","sourcesContent":["/**\n * jclass v1.1.9\n * https://github.com/riga/jclass\n *\n * Marcel Rieger, 2015\n * MIT licensed, http://www.opensource.org/licenses/mit-license\n */\n\n(function(factory) {\n\n  /**\n   * Make jclass available in any context.\n   */\n\n  if (typeof(define) == \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n\n  } else if (typeof(exports) == \"object\") {\n    // CommonJS\n    exports = factory();\n\n    if (typeof(module) == \"object\") {\n      // NodeJS\n      module.exports = exports;\n    }\n\n  } else if (window) {\n    // Browser\n    window.JClass = factory();\n\n  } else if (typeof(console) == \"object\" && console.error instanceof Function) {\n    // error case\n    console.error(\"cannot determine environment\");\n  }\n\n})(function() {\n\n  /**\n   * Helper functions.\n   */\n\n  /**\n   * Checks whether a passed object is a function.\n   *\n   * @param obj - The object to check.\n   * @returns {boolean}\n   */\n  var isFn = function(obj) {\n    return obj instanceof Function;\n  };\n\n  /**\n   * Extends a target object by one or more source objects with shallow key comparisons. Note that\n   * the extension is done in-place.\n   *\n   * @param {object} target - The target object to extend.\n   * @param {...object} source - Source objects.\n   * @returns {object} The extended object.\n   */\n  var extend = function(target) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n\n    // loop through all sources\n    for (var i in sources) {\n      var source = sources[i];\n\n      // object check\n      if (typeof(source) != \"object\") {\n        continue;\n      }\n\n      // loop through all source attributes\n      for (var key in source) {\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  };\n\n\n  /**\n   * Default options.\n   */\n\n  var defaultOptions = {\n    // internal object for indicating that class objects don't have a class object themselves,\n    // may not be used by users\n    _isClassObject: false\n  };\n\n\n  /**\n   * Flags.\n   */\n\n  // flag to distinguish between prototype and class instantiation \n  var initializing = false;\n\n\n  /**\n   * Base class definition.\n   */\n\n  // empty BaseClass implementation\n  var BaseClass = function(){};\n\n  // add the _subClasses entry\n  BaseClass._subClasses = [];\n\n  // empty init method\n  BaseClass.prototype.init = function(){};\n\n\n  /**\n   * Extend mechanism. Returns a derived class.\n   *\n   * @param {object} instanceMembers - Members that will be owned by instances.\n   * @param {object} classMembers - Members that will be owned by the class itself.\n   * @returns {JClass}\n   */\n  BaseClass._extend = function(instanceMembers, classMembers, options) {\n\n    // default arguments\n    if (instanceMembers === undefined) {\n      instanceMembers = {};\n    }\n    if (classMembers === undefined) {\n      classMembers = {};\n    }\n    if (options === undefined) {\n      options = {};\n    }\n\n    // mixin default options\n    options = extend({}, defaultOptions, options);\n\n\n    // sub class dummy constructor\n    var JClass = function() {\n      // nothing happens here when we are initializing\n      if (initializing) {\n        return;\n      }\n\n      // store a reference to the class itself\n      this._class = JClass;\n\n      // all construction is actually done in the init method\n      if (this.init instanceof Function) {\n        this.init.apply(this, arguments);\n      }\n    };\n\n\n    // alias for readability\n    var SuperClass = this;\n\n    // create an instance of the super class via new\n    // the flag sandwich prevents a call to the init method\n    initializing = true;\n    var prototype = new SuperClass();\n    initializing = false;\n\n    // get the prototype of the super class\n    var superPrototype = SuperClass.prototype;\n\n    // the instance of the super class is our new prototype\n    JClass.prototype = prototype;\n\n    // enforce the constructor to be what we expect\n    // calls to the constructor will invoke the init method (see above)\n    JClass.prototype.constructor = JClass;\n\n    // store a reference to the super class\n    JClass._superClass = SuperClass;\n\n    // store references to all extending classes\n    JClass._subClasses = [];\n    SuperClass._subClasses.push(JClass);\n\n    // make this class extendable as well\n    JClass._extend = SuperClass._extend;\n\n\n    // _extends returns true if the class itself extended \"target\"\n    // in any hierarchy, e.g. every class extends \"JClass\" itself\n    JClass._extends = function(target) {\n      // this function operates recursive, so stop when the super class is our BaseClass\n      if (this._superClass == BaseClass) {\n        return false;\n      }\n\n      // success case\n      if (target == this._superClass || target == BaseClass) {\n        return true;\n      }\n\n      // continue with the next super class\n      return this._superClass._extends(target);\n    };\n\n\n    // propagate instance members directly to the created protoype,\n    // the member is either a normal member or a descriptor\n    for (var key in instanceMembers) {\n      var property = Object.getOwnPropertyDescriptor(instanceMembers, key);\n      var member   = property.value;\n\n      // descriptor flag set?\n      if (member !== null && typeof(member) == \"object\" && member.descriptor) {\n        Object.defineProperty(prototype, key, member);\n\n      // getter/setter syntax\n      } else if (!(\"value\" in property) && (\"set\" in property || \"get\" in property)) {\n        Object.defineProperty(prototype, key, property);\n\n      // normal member, simple assignment\n      } else {\n        prototype[key] = member;\n\n        // if both member and the super member are distinct functions\n        // add the super member to the member as \"_super\"\n        var superMember = superPrototype[key];\n        if (isFn(member) && isFn(superMember) && member !== superMember) {\n          member._super = superMember;\n        }\n      }\n    }\n\n\n    // propagate class members to the _members object\n    if (!options._isClassObject) {\n      // try to find the super class of the _members object \n      var ClassMembersSuperClass = SuperClass._members === undefined ?\n        BaseClass : SuperClass._members._class;\n\n      // create the actual class of the _members instance\n      // with an updated version of our options\n      var opts = extend({}, options, { _isClassObject: true });\n      var ClassMembersClass = ClassMembersSuperClass._extend(classMembers, {}, opts);\n\n      // store the actual JClass in ClassMembersClass\n      ClassMembersClass._instanceClass = JClass;\n\n      // create the _members instance\n      JClass._members = new ClassMembersClass();\n    }\n\n\n    // return the new class\n    return JClass;\n  };\n\n\n  /**\n   * Converts arbitrary protoype-style classes to our JClass definition.\n   *\n   * @param {function} cls - The class to convert.\n   * @returns {JClass}\n   */\n  BaseClass._convert = function(cls, options) {\n    // the properties consist of the class' prototype\n    var instanceMembers = cls.prototype;\n\n    // add the constructor function\n    instanceMembers.init = function() {\n      // simply create an instance of our target class\n      var origin = this._origin = BaseClass._construct(cls, arguments);\n\n      // add properties for each own property in _origin\n      Object.keys(origin).forEach(function(key) {\n        if (!origin.hasOwnProperty(key)) {\n          return;\n        }\n\n        Object.defineProperty(this, key, {\n          get: function() {\n            return origin[key];\n          }\n        });\n      }, this);\n    };\n\n    // finally, create and return our new class\n    return BaseClass._extend(instanceMembers, {}, options);\n  };\n\n\n  /**\n   * Returns an instance of a class with a list of arguments. This provides an apply-like\n   * constructor usage. Note that this approach does not work with native constructors (e.g. String\n   * or Boolean).\n   *\n   * @param {Class|JClass} cls - The class to instantiate. This may be a JClass or a prototype-based\n   *   class.\n   * @param {array} [args=[]] - Arguments to pass to the constructor.\n   * @returns {instance}\n   */\n  BaseClass._construct = function(cls, args) {\n    // empty default args\n    if (args === undefined) {\n      args = [];\n    }\n\n    // create a class wrapper that calls cls like a function\n    var Class = function() {\n      return cls.apply(this, args);\n    };\n\n    // copy the prototype\n    Class.prototype = cls.prototype;\n\n    // return a new instance\n    return new Class();\n  };\n\n\n  /**\n   * Returns a property descriptor of the super class.\n   *\n   * @param {JClass|instance} cls - A JClass or an instance of a JClass to retrieve the property\n   *   descriptor from.\n   * @param {string} prop - The name of the property descriptor to get.\n   * @returns {object}\n   */\n  BaseClass._superDescriptor = function(cls, prop) {\n    // if cls is an instance, use its class\n    if (\"_class\" in cls && cls instanceof cls._class) {\n      cls = cls._class;\n    }\n\n    // a JClass?\n    if (\"_extends\" in cls && cls._extends instanceof Function && cls._extends(this)) {\n      return Object.getOwnPropertyDescriptor(cls._superClass.prototype, prop);\n    } else {\n      return undefined;\n    }\n  };\n\n\n  /**\n   * Return the BaseClass.\n   */\n\n  return BaseClass;\n});\n"]},"metadata":{},"sourceType":"script"}