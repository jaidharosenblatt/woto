{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/components/util-components/error-success/ErrorSuccess.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../../redux/selectors\";\nimport { clearSuccessMessage, clearError } from \"../../../redux/status/actionCreators\";\nimport \"./error-success.css\";\n/**\n * Display the current error or success message from redux\n * Uses a transition to have success/error slide up and down and fade\n * @param {Boolean} showSuccess whether or not to display success messages\n */\n\nconst ErrorSuccess = props => {\n  const {\n    success,\n    error,\n    showSuccess\n  } = props; // needed so that async clearMessage calls don't stack\n\n  const [clearStarted, setClearStarted] = useState(false); // message comes from redux\n\n  let message;\n  let className;\n\n  if (success && showSuccess) {\n    message = success;\n    className = \"success-message\";\n  }\n\n  if (error) {\n    className = \"error-message\";\n    message = error;\n  }\n\n  const _clearSuccessMessage = props.clearSuccessMessage;\n  const _clearError = props.clearError;\n  useEffect(() => {\n    async function clearMessage() {\n      // clear message after 3 seconds (needs to match css transition)\n      setClearStarted(true);\n      setTimeout(() => {\n        _clearSuccessMessage();\n\n        _clearError();\n\n        setClearStarted(false);\n      }, 3000);\n    }\n\n    if (!clearStarted && message) {\n      clearMessage();\n    }\n  }, [_clearSuccessMessage, _clearError, clearStarted, setClearStarted, error, success, message]);\n\n  if (!message) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }\n  }, message);\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: selectors.getError(state),\n    success: selectors.getSuccessMessage(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  clearSuccessMessage,\n  clearError\n})(ErrorSuccess);","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/components/util-components/error-success/ErrorSuccess.js"],"names":["React","useEffect","useState","connect","selectors","clearSuccessMessage","clearError","ErrorSuccess","props","success","error","showSuccess","clearStarted","setClearStarted","message","className","_clearSuccessMessage","_clearError","clearMessage","setTimeout","mapStateToProps","state","getError","getSuccessMessage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SACEC,mBADF,EAEEC,UAFF,QAGO,sCAHP;AAIA,OAAO,qBAAP;AACA;;;;;;AAKA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAAkCH,KAAxC,CAD8B,CAE9B;;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD,CAH8B,CAK9B;;AACA,MAAIY,OAAJ;AACA,MAAIC,SAAJ;;AACA,MAAIN,OAAO,IAAIE,WAAf,EAA4B;AAC1BG,IAAAA,OAAO,GAAGL,OAAV;AACAM,IAAAA,SAAS,GAAG,iBAAZ;AACD;;AACD,MAAIL,KAAJ,EAAW;AACTK,IAAAA,SAAS,GAAG,eAAZ;AACAD,IAAAA,OAAO,GAAGJ,KAAV;AACD;;AACD,QAAMM,oBAAoB,GAAGR,KAAK,CAACH,mBAAnC;AACA,QAAMY,WAAW,GAAGT,KAAK,CAACF,UAA1B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeiB,YAAf,GAA8B;AAC5B;AACAL,MAAAA,eAAe,CAAC,IAAD,CAAf;AAEAM,MAAAA,UAAU,CAAC,MAAM;AACfH,QAAAA,oBAAoB;;AACpBC,QAAAA,WAAW;;AACXJ,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD,OAJS,EAIP,IAJO,CAAV;AAKD;;AACD,QAAI,CAACD,YAAD,IAAiBE,OAArB,EAA8B;AAC5BI,MAAAA,YAAY;AACb;AACF,GAdQ,EAcN,CACDF,oBADC,EAEDC,WAFC,EAGDL,YAHC,EAIDC,eAJC,EAKDH,KALC,EAMDD,OANC,EAODK,OAPC,CAdM,CAAT;;AAwBA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,sBAAO;AAAG,IAAA,SAAS,EAAEC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BD,OAA1B,CAAP;AACD,CAhDD;;AAkDA,MAAMM,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLX,IAAAA,KAAK,EAAEN,SAAS,CAACkB,QAAV,CAAmBD,KAAnB,CADF;AAELZ,IAAAA,OAAO,EAAEL,SAAS,CAACmB,iBAAV,CAA4BF,KAA5B;AAFJ,GAAP;AAID,CALD;;AAOA,eAAelB,OAAO,CAACiB,eAAD,EAAkB;AAAEf,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,CAAlB,CAAP,CACbC,YADa,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../../redux/selectors\";\nimport {\n  clearSuccessMessage,\n  clearError,\n} from \"../../../redux/status/actionCreators\";\nimport \"./error-success.css\";\n/**\n * Display the current error or success message from redux\n * Uses a transition to have success/error slide up and down and fade\n * @param {Boolean} showSuccess whether or not to display success messages\n */\nconst ErrorSuccess = (props) => {\n  const { success, error, showSuccess } = props;\n  // needed so that async clearMessage calls don't stack\n  const [clearStarted, setClearStarted] = useState(false);\n\n  // message comes from redux\n  let message;\n  let className;\n  if (success && showSuccess) {\n    message = success;\n    className = \"success-message\";\n  }\n  if (error) {\n    className = \"error-message\";\n    message = error;\n  }\n  const _clearSuccessMessage = props.clearSuccessMessage;\n  const _clearError = props.clearError;\n\n  useEffect(() => {\n    async function clearMessage() {\n      // clear message after 3 seconds (needs to match css transition)\n      setClearStarted(true);\n\n      setTimeout(() => {\n        _clearSuccessMessage();\n        _clearError();\n        setClearStarted(false);\n      }, 3000);\n    }\n    if (!clearStarted && message) {\n      clearMessage();\n    }\n  }, [\n    _clearSuccessMessage,\n    _clearError,\n    clearStarted,\n    setClearStarted,\n    error,\n    success,\n    message,\n  ]);\n\n  if (!message) {\n    return null;\n  }\n\n  return <p className={className}>{message}</p>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    error: selectors.getError(state),\n    success: selectors.getSuccessMessage(state),\n  };\n};\n\nexport default connect(mapStateToProps, { clearSuccessMessage, clearError })(\n  ErrorSuccess\n);\n"]},"metadata":{},"sourceType":"module"}