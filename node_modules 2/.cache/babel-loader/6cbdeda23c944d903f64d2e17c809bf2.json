{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar time_estimates;\ntime_estimates = {\n  estimate_attack_times: function (guesses) {\n    var crack_times_display, crack_times_seconds, scenario, seconds;\n    crack_times_seconds = {\n      online_throttling_100_per_hour: guesses / (100 / 3600),\n      online_no_throttling_10_per_second: guesses / 10,\n      offline_slow_hashing_1e4_per_second: guesses / 1e4,\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n    };\n    crack_times_display = {};\n\n    for (scenario in crack_times_seconds) {\n      seconds = crack_times_seconds[scenario];\n      crack_times_display[scenario] = this.display_time(seconds);\n    }\n\n    return {\n      crack_times_seconds: crack_times_seconds,\n      crack_times_display: crack_times_display,\n      score: this.guesses_to_score(guesses)\n    };\n  },\n  guesses_to_score: function (guesses) {\n    var DELTA;\n    DELTA = 5;\n\n    if (guesses < 1e3 + DELTA) {\n      return 0;\n    } else if (guesses < 1e6 + DELTA) {\n      return 1;\n    } else if (guesses < 1e8 + DELTA) {\n      return 2;\n    } else if (guesses < 1e10 + DELTA) {\n      return 3;\n    } else {\n      return 4;\n    }\n  },\n  display_time: function (seconds) {\n    var base, century, day, display_num, display_str, hour, minute, month, ref, year;\n    minute = 60;\n    hour = minute * 60;\n    day = hour * 24;\n    month = day * 31;\n    year = month * 12;\n    century = year * 100;\n    ref = seconds < 1 ? [null, 'less than a second'] : seconds < minute ? (base = Math.round(seconds), [base, base + \" second\"]) : seconds < hour ? (base = Math.round(seconds / minute), [base, base + \" minute\"]) : seconds < day ? (base = Math.round(seconds / hour), [base, base + \" hour\"]) : seconds < month ? (base = Math.round(seconds / day), [base, base + \" day\"]) : seconds < year ? (base = Math.round(seconds / month), [base, base + \" month\"]) : seconds < century ? (base = Math.round(seconds / year), [base, base + \" year\"]) : [null, 'centuries'], display_num = ref[0], display_str = ref[1];\n\n    if (display_num != null && display_num !== 1) {\n      display_str += 's';\n    }\n\n    return display_str;\n  }\n};\nmodule.exports = time_estimates;","map":{"version":3,"sources":["src/time_estimates.coffee"],"names":[],"mappings":"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","sourceRoot":"..","sourcesContent":["// Generated by CoffeeScript 1.10.0\nvar time_estimates;\n\ntime_estimates = {\n  estimate_attack_times: function(guesses) {\n    var crack_times_display, crack_times_seconds, scenario, seconds;\n    crack_times_seconds = {\n      online_throttling_100_per_hour: guesses / (100 / 3600),\n      online_no_throttling_10_per_second: guesses / 10,\n      offline_slow_hashing_1e4_per_second: guesses / 1e4,\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n    };\n    crack_times_display = {};\n    for (scenario in crack_times_seconds) {\n      seconds = crack_times_seconds[scenario];\n      crack_times_display[scenario] = this.display_time(seconds);\n    }\n    return {\n      crack_times_seconds: crack_times_seconds,\n      crack_times_display: crack_times_display,\n      score: this.guesses_to_score(guesses)\n    };\n  },\n  guesses_to_score: function(guesses) {\n    var DELTA;\n    DELTA = 5;\n    if (guesses < 1e3 + DELTA) {\n      return 0;\n    } else if (guesses < 1e6 + DELTA) {\n      return 1;\n    } else if (guesses < 1e8 + DELTA) {\n      return 2;\n    } else if (guesses < 1e10 + DELTA) {\n      return 3;\n    } else {\n      return 4;\n    }\n  },\n  display_time: function(seconds) {\n    var base, century, day, display_num, display_str, hour, minute, month, ref, year;\n    minute = 60;\n    hour = minute * 60;\n    day = hour * 24;\n    month = day * 31;\n    year = month * 12;\n    century = year * 100;\n    ref = seconds < 1 ? [null, 'less than a second'] : seconds < minute ? (base = Math.round(seconds), [base, base + \" second\"]) : seconds < hour ? (base = Math.round(seconds / minute), [base, base + \" minute\"]) : seconds < day ? (base = Math.round(seconds / hour), [base, base + \" hour\"]) : seconds < month ? (base = Math.round(seconds / day), [base, base + \" day\"]) : seconds < year ? (base = Math.round(seconds / month), [base, base + \" month\"]) : seconds < century ? (base = Math.round(seconds / year), [base, base + \" year\"]) : [null, 'centuries'], display_num = ref[0], display_str = ref[1];\n    if ((display_num != null) && display_num !== 1) {\n      display_str += 's';\n    }\n    return display_str;\n  }\n};\n\nmodule.exports = time_estimates;\n\n//# sourceMappingURL=time_estimates.js.map\n"]},"metadata":{},"sourceType":"script"}