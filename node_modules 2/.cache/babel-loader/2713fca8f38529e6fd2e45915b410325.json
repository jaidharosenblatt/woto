{"ast":null,"code":"import API from \"../../../api/API\";\nimport Papa from \"papaparse\";\nimport selectors from \"../../selectors\";\nimport actionsTypes from \"../actionsTypes\";\n\nconst {\n  setError,\n  setServerSuccessMessage,\n  startPageLoading,\n  stopPageLoading,\n  startLoading,\n  stopLoading,\n  setCustomServerError,\n  setRosterStatus\n} = require(\"../../status/actionCreators\");\n\nexport const fetchRoster = () => async dispatch => {\n  dispatch(startPageLoading());\n  await dispatch(refetchRoster());\n  dispatch(stopPageLoading());\n};\nexport const refetchRoster = () => async (dispatch, getState) => {\n  const courseID = selectors.getCourseID(getState());\n  dispatch(startLoading());\n\n  try {\n    const res = await API.getStudents(courseID);\n    const students = cleanData([...res.students]);\n    const assistants = cleanData([...res.assistants]);\n    dispatch({\n      type: actionsTypes.SET_STUDENT_ROSTER,\n      courseID,\n      payload: students\n    });\n    dispatch({\n      type: actionsTypes.SET_TA_ROSTER,\n      courseID,\n      payload: assistants\n    });\n  } catch (error) {\n    setCustomServerError(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n/**\n * Add a student for the given course\n * @param {Object} student netId, name, and role\n */\n\nexport const addStudent = student => async (dispatch, getState) => {\n  const courseID = selectors.getCourseID(getState());\n  const students = [student];\n\n  try {\n    var _res$failures$, _res$successes$;\n\n    const res = await API.inviteDukeStudents(courseID, students);\n    const error = (_res$failures$ = res.failures[0]) === null || _res$failures$ === void 0 ? void 0 : _res$failures$.message;\n    const success = (_res$successes$ = res.successes[0]) === null || _res$successes$ === void 0 ? void 0 : _res$successes$.message;\n    error && dispatch(setCustomServerError(error));\n    success && dispatch(setServerSuccessMessage(success));\n\n    if (!error) {\n      await dispatch(refetchRoster());\n    }\n  } catch (error) {\n    dispatch(setError(error));\n  }\n};\n/**\n * Remove a student for the given course\n * @param {ObjectId} studentId netId, name, and role\n */\n\nexport const removeStudent = (studentId, isStudent) => async (dispatch, getState) => {\n  const courseID = selectors.getCourseID(getState());\n\n  try {\n    // remote student first\n    if (!isStudent) {\n      await API.demoteAssistants(courseID, studentId);\n    }\n\n    await API.removeStudents(courseID, studentId);\n    await dispatch(refetchRoster());\n    dispatch(setServerSuccessMessage(`${isStudent ? \"Student\" : \"Teaching assistant\"} removed`));\n  } catch (error) {\n    dispatch(setError(error));\n  }\n};\n/**\n * Add a student for the given course by parsing CSV data\n * @param {CSV} file\n */\n\nexport const csvToStudents = file => async (dispatch, getState) => {\n  const csvCallback = async ({\n    data\n  }) => {\n    const courseID = selectors.getCourseID(getState());\n    const students = csvToObject(data);\n\n    try {\n      const status = await API.inviteDukeStudents(courseID, students);\n      dispatch(setRosterStatus(status));\n      await dispatch(refetchRoster());\n    } catch (error) {\n      dispatch(setError(error));\n    }\n  };\n\n  const errorCallback = () => dispatch(setCustomServerError(\"Unable to parse CSV\"));\n\n  Papa.parse(file, {\n    error: errorCallback,\n    complete: csvCallback\n  });\n};\n/**\n * Convert CSV array into a Js object\n * @param {Array} data\n * @returns {Object}\n */\n\nconst csvToObject = data => {\n  let students = [];\n  const header = data[0];\n  data.slice(1).forEach(row => {\n    let student = {};\n    header.forEach((key, i) => {\n      student[key.toLowerCase()] = row[i];\n    });\n    students.push(student);\n  });\n  return students;\n};\n/**\n * Add key to data for use in columns\n * @param {Array} data\n * @returns {Array} data\n */\n\n\nconst cleanData = data => {\n  return data.map(item => {\n    return {\n      key: item._id,\n      ...item\n    };\n  });\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/redux/courses/actions/roster.js"],"names":["API","Papa","selectors","actionsTypes","setError","setServerSuccessMessage","startPageLoading","stopPageLoading","startLoading","stopLoading","setCustomServerError","setRosterStatus","require","fetchRoster","dispatch","refetchRoster","getState","courseID","getCourseID","res","getStudents","students","cleanData","assistants","type","SET_STUDENT_ROSTER","payload","SET_TA_ROSTER","error","addStudent","student","inviteDukeStudents","failures","message","success","successes","removeStudent","studentId","isStudent","demoteAssistants","removeStudents","csvToStudents","file","csvCallback","data","csvToObject","status","errorCallback","parse","complete","header","slice","forEach","row","key","i","toLowerCase","push","map","item","_id"],"mappings":"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","sourcesContent":["import API from \"../../../api/API\";\nimport Papa from \"papaparse\";\n\nimport selectors from \"../../selectors\";\nimport actionsTypes from \"../actionsTypes\";\nconst {\n  setError,\n  setServerSuccessMessage,\n  startPageLoading,\n  stopPageLoading,\n  startLoading,\n  stopLoading,\n  setCustomServerError,\n  setRosterStatus,\n} = require(\"../../status/actionCreators\");\n\nexport const fetchRoster = () => async (dispatch) => {\n  dispatch(startPageLoading());\n  await dispatch(refetchRoster());\n  dispatch(stopPageLoading());\n};\n\nexport const refetchRoster = () => async (dispatch, getState) => {\n  const courseID = selectors.getCourseID(getState());\n  dispatch(startLoading());\n  try {\n    const res = await API.getStudents(courseID);\n    const students = cleanData([...res.students]);\n    const assistants = cleanData([...res.assistants]);\n    dispatch({\n      type: actionsTypes.SET_STUDENT_ROSTER,\n      courseID,\n      payload: students,\n    });\n    dispatch({\n      type: actionsTypes.SET_TA_ROSTER,\n      courseID,\n      payload: assistants,\n    });\n  } catch (error) {\n    setCustomServerError(error);\n  } finally {\n    dispatch(stopLoading());\n  }\n};\n\n/**\n * Add a student for the given course\n * @param {Object} student netId, name, and role\n */\nexport const addStudent = (student) => async (dispatch, getState) => {\n  const courseID = selectors.getCourseID(getState());\n  const students = [student];\n  try {\n    const res = await API.inviteDukeStudents(courseID, students);\n    const error = res.failures[0]?.message;\n    const success = res.successes[0]?.message;\n    error && dispatch(setCustomServerError(error));\n    success && dispatch(setServerSuccessMessage(success));\n    if (!error) {\n      await dispatch(refetchRoster());\n    }\n  } catch (error) {\n    dispatch(setError(error));\n  }\n};\n\n/**\n * Remove a student for the given course\n * @param {ObjectId} studentId netId, name, and role\n */\nexport const removeStudent = (studentId, isStudent) => async (\n  dispatch,\n  getState\n) => {\n  const courseID = selectors.getCourseID(getState());\n  try {\n    // remote student first\n    if (!isStudent) {\n      await API.demoteAssistants(courseID, studentId);\n    }\n    await API.removeStudents(courseID, studentId);\n    await dispatch(refetchRoster());\n    dispatch(\n      setServerSuccessMessage(\n        `${isStudent ? \"Student\" : \"Teaching assistant\"} removed`\n      )\n    );\n  } catch (error) {\n    dispatch(setError(error));\n  }\n};\n\n/**\n * Add a student for the given course by parsing CSV data\n * @param {CSV} file\n */\nexport const csvToStudents = (file) => async (dispatch, getState) => {\n  const csvCallback = async ({ data }) => {\n    const courseID = selectors.getCourseID(getState());\n    const students = csvToObject(data);\n\n    try {\n      const status = await API.inviteDukeStudents(courseID, students);\n      dispatch(setRosterStatus(status));\n      await dispatch(refetchRoster());\n    } catch (error) {\n      dispatch(setError(error));\n    }\n  };\n\n  const errorCallback = () =>\n    dispatch(setCustomServerError(\"Unable to parse CSV\"));\n\n  Papa.parse(file, { error: errorCallback, complete: csvCallback });\n};\n\n/**\n * Convert CSV array into a Js object\n * @param {Array} data\n * @returns {Object}\n */\nconst csvToObject = (data) => {\n  let students = [];\n  const header = data[0];\n  data.slice(1).forEach((row) => {\n    let student = {};\n    header.forEach((key, i) => {\n      student[key.toLowerCase()] = row[i];\n    });\n    students.push(student);\n  });\n  return students;\n};\n\n/**\n * Add key to data for use in columns\n * @param {Array} data\n * @returns {Array} data\n */\nconst cleanData = (data) => {\n  return data.map((item) => {\n    return { key: item._id, ...item };\n  });\n};\n"]},"metadata":{},"sourceType":"module"}