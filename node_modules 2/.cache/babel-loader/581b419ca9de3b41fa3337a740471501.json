{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar feedback, scoring;\nscoring = require('./scoring');\nfeedback = {\n  default_feedback: {\n    warning: '',\n    suggestions: [\"Use a few words, avoid common phrases\", \"No need for symbols, digits, or uppercase letters\"]\n  },\n  get_feedback: function (score, sequence) {\n    var extra_feedback, i, len, longest_match, match, ref;\n\n    if (sequence.length === 0) {\n      return this.default_feedback;\n    }\n\n    if (score > 2) {\n      return {\n        warning: '',\n        suggestions: []\n      };\n    }\n\n    longest_match = sequence[0];\n    ref = sequence.slice(1);\n\n    for (i = 0, len = ref.length; i < len; i++) {\n      match = ref[i];\n\n      if (match.token.length > longest_match.token.length) {\n        longest_match = match;\n      }\n    }\n\n    feedback = this.get_match_feedback(longest_match, sequence.length === 1);\n    extra_feedback = 'Add another word or two. Uncommon words are better.';\n\n    if (feedback != null) {\n      feedback.suggestions.unshift(extra_feedback);\n\n      if (feedback.warning == null) {\n        feedback.warning = '';\n      }\n    } else {\n      feedback = {\n        warning: '',\n        suggestions: [extra_feedback]\n      };\n    }\n\n    return feedback;\n  },\n  get_match_feedback: function (match, is_sole_match) {\n    var layout, warning;\n\n    switch (match.pattern) {\n      case 'dictionary':\n        return this.get_dictionary_match_feedback(match, is_sole_match);\n\n      case 'spatial':\n        layout = match.graph.toUpperCase();\n        warning = match.turns === 1 ? 'Straight rows of keys are easy to guess' : 'Short keyboard patterns are easy to guess';\n        return {\n          warning: warning,\n          suggestions: ['Use a longer keyboard pattern with more turns']\n        };\n\n      case 'repeat':\n        warning = match.base_token.length === 1 ? 'Repeats like \"aaa\" are easy to guess' : 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"';\n        return {\n          warning: warning,\n          suggestions: ['Avoid repeated words and characters']\n        };\n\n      case 'sequence':\n        return {\n          warning: \"Sequences like abc or 6543 are easy to guess\",\n          suggestions: ['Avoid sequences']\n        };\n\n      case 'regex':\n        if (match.regex_name === 'recent_year') {\n          return {\n            warning: \"Recent years are easy to guess\",\n            suggestions: ['Avoid recent years', 'Avoid years that are associated with you']\n          };\n        }\n\n        break;\n\n      case 'date':\n        return {\n          warning: \"Dates are often easy to guess\",\n          suggestions: ['Avoid dates and years that are associated with you']\n        };\n    }\n  },\n  get_dictionary_match_feedback: function (match, is_sole_match) {\n    var ref, result, suggestions, warning, word;\n    warning = match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'This is a top-10 common password' : match.rank <= 100 ? 'This is a top-100 common password' : 'This is a very common password' : match.guesses_log10 <= 4 ? 'This is similar to a commonly used password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'A word by itself is easy to guess' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'Names and surnames by themselves are easy to guess' : 'Common names and surnames are easy to guess' : '';\n    suggestions = [];\n    word = match.token;\n\n    if (word.match(scoring.START_UPPER)) {\n      suggestions.push(\"Capitalization doesn't help very much\");\n    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {\n      suggestions.push(\"All-uppercase is almost as easy to guess as all-lowercase\");\n    }\n\n    if (match.reversed && match.token.length >= 4) {\n      suggestions.push(\"Reversed words aren't much harder to guess\");\n    }\n\n    if (match.l33t) {\n      suggestions.push(\"Predictable substitutions like '@' instead of 'a' don't help very much\");\n    }\n\n    result = {\n      warning: warning,\n      suggestions: suggestions\n    };\n    return result;\n  }\n};\nmodule.exports = feedback;","map":{"version":3,"sources":["src/feedback.coffee"],"names":[],"mappings":"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","sourceRoot":"..","sourcesContent":["// Generated by CoffeeScript 1.10.0\nvar feedback, scoring;\n\nscoring = require('./scoring');\n\nfeedback = {\n  default_feedback: {\n    warning: '',\n    suggestions: [\"Use a few words, avoid common phrases\", \"No need for symbols, digits, or uppercase letters\"]\n  },\n  get_feedback: function(score, sequence) {\n    var extra_feedback, i, len, longest_match, match, ref;\n    if (sequence.length === 0) {\n      return this.default_feedback;\n    }\n    if (score > 2) {\n      return {\n        warning: '',\n        suggestions: []\n      };\n    }\n    longest_match = sequence[0];\n    ref = sequence.slice(1);\n    for (i = 0, len = ref.length; i < len; i++) {\n      match = ref[i];\n      if (match.token.length > longest_match.token.length) {\n        longest_match = match;\n      }\n    }\n    feedback = this.get_match_feedback(longest_match, sequence.length === 1);\n    extra_feedback = 'Add another word or two. Uncommon words are better.';\n    if (feedback != null) {\n      feedback.suggestions.unshift(extra_feedback);\n      if (feedback.warning == null) {\n        feedback.warning = '';\n      }\n    } else {\n      feedback = {\n        warning: '',\n        suggestions: [extra_feedback]\n      };\n    }\n    return feedback;\n  },\n  get_match_feedback: function(match, is_sole_match) {\n    var layout, warning;\n    switch (match.pattern) {\n      case 'dictionary':\n        return this.get_dictionary_match_feedback(match, is_sole_match);\n      case 'spatial':\n        layout = match.graph.toUpperCase();\n        warning = match.turns === 1 ? 'Straight rows of keys are easy to guess' : 'Short keyboard patterns are easy to guess';\n        return {\n          warning: warning,\n          suggestions: ['Use a longer keyboard pattern with more turns']\n        };\n      case 'repeat':\n        warning = match.base_token.length === 1 ? 'Repeats like \"aaa\" are easy to guess' : 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"';\n        return {\n          warning: warning,\n          suggestions: ['Avoid repeated words and characters']\n        };\n      case 'sequence':\n        return {\n          warning: \"Sequences like abc or 6543 are easy to guess\",\n          suggestions: ['Avoid sequences']\n        };\n      case 'regex':\n        if (match.regex_name === 'recent_year') {\n          return {\n            warning: \"Recent years are easy to guess\",\n            suggestions: ['Avoid recent years', 'Avoid years that are associated with you']\n          };\n        }\n        break;\n      case 'date':\n        return {\n          warning: \"Dates are often easy to guess\",\n          suggestions: ['Avoid dates and years that are associated with you']\n        };\n    }\n  },\n  get_dictionary_match_feedback: function(match, is_sole_match) {\n    var ref, result, suggestions, warning, word;\n    warning = match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'This is a top-10 common password' : match.rank <= 100 ? 'This is a top-100 common password' : 'This is a very common password' : match.guesses_log10 <= 4 ? 'This is similar to a commonly used password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'A word by itself is easy to guess' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'Names and surnames by themselves are easy to guess' : 'Common names and surnames are easy to guess' : '';\n    suggestions = [];\n    word = match.token;\n    if (word.match(scoring.START_UPPER)) {\n      suggestions.push(\"Capitalization doesn't help very much\");\n    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {\n      suggestions.push(\"All-uppercase is almost as easy to guess as all-lowercase\");\n    }\n    if (match.reversed && match.token.length >= 4) {\n      suggestions.push(\"Reversed words aren't much harder to guess\");\n    }\n    if (match.l33t) {\n      suggestions.push(\"Predictable substitutions like '@' instead of 'a' don't help very much\");\n    }\n    result = {\n      warning: warning,\n      suggestions: suggestions\n    };\n    return result;\n  }\n};\n\nmodule.exports = feedback;\n\n//# sourceMappingURL=feedback.js.map\n"]},"metadata":{},"sourceType":"script"}