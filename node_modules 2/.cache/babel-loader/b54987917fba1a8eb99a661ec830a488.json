{"ast":null,"code":"var _jsxFileName = \"/Users/jasmineharris/Desktop/Elite/woto/src/util/getCommonValues.js\";\nimport React from \"react\";\nimport { Tag } from \"antd\"; // Filter out discussions that don't have matching key to description\n// Get # students matching\n\nexport const getStudentCountByKey = (discussions, description, key) => {\n  var studentCount = 0;\n\n  if (!discussions || discussions.length === 0 || !description) {\n    return studentCount;\n  }\n\n  discussions.forEach(discussion => {\n    if (compareObjects(discussion.description, description, key)) {\n      studentCount += discussion.participants.length;\n    }\n  });\n  return studentCount;\n}; // Check if overlap between two values for first key\n\nexport function compareObjects(object, object1, key) {\n  if (Array.isArray(object[key])) {\n    const intersect = object[key].filter(value => object1[key].includes(value));\n    return intersect.length > 0;\n  } else if (object[key] === object1[key]) {\n    return true;\n  }\n\n  return false;\n} // Find overlapping values between two question\n\nexport const getCommonValues = (myQuestion, theirQuestion) => {\n  const blockedValues = [\"NA\"];\n  const commonValues = [];\n\n  if (!myQuestion || !theirQuestion) {\n    return commonValues;\n  }\n\n  const discussionKeys = Object.keys(myQuestion);\n  discussionKeys.forEach(key => {\n    let myValue = myQuestion[key];\n    let theirValue = theirQuestion[key]; // if array then check each value\n\n    if (Array.isArray(myValue) && theirValue && Array.isArray(theirValue)) {\n      let intersect = myValue.filter(value => theirValue.includes(value) && !blockedValues.includes(myValue)); // if overlap then add value\n\n      if (intersect.length > 0) {\n        commonValues.push(...intersect);\n      }\n    } // if not an array then check exact value\n    else if (myValue === theirValue && !blockedValues.includes(myValue)) {\n        commonValues.push(myValue);\n      }\n  });\n  return commonValues;\n}; // Render tags or text in blue if common\n\nexport const renderCommonItem = (item, highlightedValues) => {\n  if (!highlightedValues) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item);\n  }\n\n  if (typeof value === \"object\") {\n    return null;\n  }\n\n  if (Array.isArray(item)) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item.map((option, i) => {\n      return /*#__PURE__*/React.createElement(Tag, {\n        style: {\n          marginBottom: 4\n        },\n        key: i,\n        color: highlightedValues.includes(option) ? \"blue\" : \"default\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }\n      }, option);\n    }));\n  }\n\n  if (highlightedValues.includes(item)) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"#40A9FF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, item);\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, item);\n  }\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/util/getCommonValues.js"],"names":["React","Tag","getStudentCountByKey","discussions","description","key","studentCount","length","forEach","discussion","compareObjects","participants","object","object1","Array","isArray","intersect","filter","value","includes","getCommonValues","myQuestion","theirQuestion","blockedValues","commonValues","discussionKeys","Object","keys","myValue","theirValue","push","renderCommonItem","item","highlightedValues","map","option","i","marginBottom","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Tag } from \"antd\";\n\n// Filter out discussions that don't have matching key to description\n// Get # students matching\nexport const getStudentCountByKey = (discussions, description, key) => {\n  var studentCount = 0;\n  if (!discussions || discussions.length === 0 || !description) {\n    return studentCount;\n  }\n  discussions.forEach((discussion) => {\n    if (compareObjects(discussion.description, description, key)) {\n      studentCount += discussion.participants.length;\n    }\n  });\n  return studentCount;\n};\n\n// Check if overlap between two values for first key\nexport function compareObjects(object, object1, key) {\n  if (Array.isArray(object[key])) {\n    const intersect = object[key].filter((value) =>\n      object1[key].includes(value)\n    );\n    return intersect.length > 0;\n  } else if (object[key] === object1[key]) {\n    return true;\n  }\n  return false;\n}\n\n// Find overlapping values between two question\nexport const getCommonValues = (myQuestion, theirQuestion) => {\n  const blockedValues = [\"NA\"];\n  const commonValues = [];\n\n  if (!myQuestion || !theirQuestion) {\n    return commonValues;\n  }\n\n  const discussionKeys = Object.keys(myQuestion);\n  discussionKeys.forEach((key) => {\n    let myValue = myQuestion[key];\n    let theirValue = theirQuestion[key];\n\n    // if array then check each value\n    if (Array.isArray(myValue) && theirValue && Array.isArray(theirValue)) {\n      let intersect = myValue.filter(\n        (value) =>\n          theirValue.includes(value) && !blockedValues.includes(myValue)\n      );\n      // if overlap then add value\n      if (intersect.length > 0) {\n        commonValues.push(...intersect);\n      }\n    }\n    // if not an array then check exact value\n    else if (myValue === theirValue && !blockedValues.includes(myValue)) {\n      commonValues.push(myValue);\n    }\n  });\n  return commonValues;\n};\n\n// Render tags or text in blue if common\nexport const renderCommonItem = (item, highlightedValues) => {\n  if (!highlightedValues) {\n    return <>{item}</>;\n  }\n  if (typeof value === \"object\") {\n    return null;\n  }\n  if (Array.isArray(item)) {\n    return (\n      <>\n        {item.map((option, i) => {\n          return (\n            <Tag\n              style={{ marginBottom: 4 }}\n              key={i}\n              color={highlightedValues.includes(option) ? \"blue\" : \"default\"}\n            >\n              {option}\n            </Tag>\n          );\n        })}\n      </>\n    );\n  }\n  if (highlightedValues.includes(item)) {\n    return <p style={{ color: \"#40A9FF\" }}>{item}</p>;\n  } else {\n    return <>{item}</>;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}