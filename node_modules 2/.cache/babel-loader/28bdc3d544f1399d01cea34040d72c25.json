{"ast":null,"code":"import client from \"../axiosConfig\";\n/**\n * Open a new session for a course by its id\n * @param {*} courseid\n * @param {*} session session object with start and end time of session\n */\n\nexport const openSession = async (courseid, session) => {\n  let {\n    data\n  } = await client.post(`/courses/${courseid}/sessions`, session);\n  return data;\n};\n/**\n * Get session for a course\n * @param {*} courseid\n */\n\nexport const getSession = async courseid => {\n  let {\n    data\n  } = await client.get(`/courses/${courseid}/sessions`);\n  return data;\n};\n/**\n * Join an existing session for a course\n * @param {*} courseid\n */\n\nexport const joinSessionAsStaffer = async courseid => {\n  let {\n    data\n  } = await client.post(`/courses/${courseid}/joinsessionAsStaffer`);\n  return data;\n};\n/**\n * Join an existing session for a course\n * @param {*} courseid\n */\n\nexport const leaveSessionAsStaffer = async courseid => {\n  let {\n    data\n  } = await client.patch(`/courses/${courseid}/leavesessionAsStaffer`);\n  return data;\n};\n/**\n * Archive a course's active session\n * @param {*} courseid\n */\n\nexport const closeSession = async courseid => {\n  let {\n    data\n  } = await client.post(`/courses/${courseid}/closesession`);\n  return data;\n};\n/**\n * Edit session information for a course's active session\n * @param {*} courseid\n * @param {*} changes validated changed to the session\n */\n\nexport const editSession = async (courseid, changes) => {\n  let {\n    data\n  } = await client.patch(`/courses/${courseid}/sessions`, changes);\n  return data;\n};\n/**\n * Join the questions queue for a course\n * @param {*} courseid\n */\n\nexport const postQuestion = async courseid => {\n  let {\n    data\n  } = await client.post(`/courses/${courseid}/questions`, {});\n  return data;\n};\n/**\n * Join the questions queue for a course\n * @param {*} courseid\n */\n\nexport const patchQuestion = async (questionId, changes) => {\n  let {\n    data\n  } = await client.patch(`/questions/${questionId}`, changes);\n  return data;\n};\n/**\n * Close this question\n * @param {ObjectId} questionId\n * @returns {Question} removed\n */\n\nexport const closeQuestion = async questionId => {\n  let {\n    data\n  } = await client.patch(`/questions/${questionId}/close`);\n  return data;\n};\n/**\n * Help a student\n * @param {ObjectId} questionId question to help\n * @returns {Question} with help added\n */\n\nexport const helpStudent = async questionId => {\n  let {\n    data\n  } = await client.patch(`/questions/${questionId}/help`);\n  return data;\n};\n/**\n * Requeue a student's question (TA could not answer properly)\n * @param {ObjectId} questionId question to requeue\n * @returns {Question} edited\n */\n\nexport const requeueStudent = async questionId => {\n  let {\n    data\n  } = await client.patch(`/questions/${questionId}/requeue`);\n  return data;\n};\n/**\n * Created joinedAt field for current help\n * @param {ObjectId} questionId question to requeue\n * @returns {Question} edited\n */\n\nexport const joinTALink = async questionId => {\n  let {\n    data\n  } = await client.patch(`/questions/${questionId}/joinHelp`);\n  return data;\n};\n/**\n * Get questions user asked for this sesison\n * @param {*} courseid\n */\n\nexport const getMyQuestion = async courseid => {\n  let {\n    data\n  } = await client.get(`/courses/${courseid}/questions/me`);\n  return data;\n};\n/**\n * Get questions asked in this session\n * @param {*} sessionId\n */\n\nexport const getQuestions = async sessionId => {\n  let {\n    data\n  } = await client.get(`/sessions/${sessionId}/questions/`);\n  return data;\n};\n/**\n * Get stats for this session\n * @param {ObjectId} sessionId\n */\n\nexport const getStats = async sessionId => {\n  let {\n    data\n  } = await client.get(`/sessions/${sessionId}/stats/`);\n  return data;\n};\nexport default {\n  openSession,\n  getSession,\n  joinSessionAsStaffer,\n  closeSession,\n  editSession,\n  postQuestion,\n  patchQuestion,\n  getMyQuestion,\n  getQuestions\n};","map":{"version":3,"sources":["/Users/jasmineharris/Desktop/Elite/woto/src/api/endpoints/sessionEndpoints.js"],"names":["client","openSession","courseid","session","data","post","getSession","get","joinSessionAsStaffer","leaveSessionAsStaffer","patch","closeSession","editSession","changes","postQuestion","patchQuestion","questionId","closeQuestion","helpStudent","requeueStudent","joinTALink","getMyQuestion","getQuestions","sessionId","getStats"],"mappings":"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","sourcesContent":["import client from \"../axiosConfig\";\n\n/**\n * Open a new session for a course by its id\n * @param {*} courseid\n * @param {*} session session object with start and end time of session\n */\nexport const openSession = async (courseid, session) => {\n  let { data } = await client.post(`/courses/${courseid}/sessions`, session);\n  return data;\n};\n\n/**\n * Get session for a course\n * @param {*} courseid\n */\nexport const getSession = async (courseid) => {\n  let { data } = await client.get(`/courses/${courseid}/sessions`);\n  return data;\n};\n\n/**\n * Join an existing session for a course\n * @param {*} courseid\n */\nexport const joinSessionAsStaffer = async (courseid) => {\n  let { data } = await client.post(`/courses/${courseid}/joinsessionAsStaffer`);\n  return data;\n};\n\n\n/**\n * Join an existing session for a course\n * @param {*} courseid\n */\nexport const leaveSessionAsStaffer = async (courseid) => {\n  let { data } = await client.patch(`/courses/${courseid}/leavesessionAsStaffer`);\n  return data;\n};\n\n/**\n * Archive a course's active session\n * @param {*} courseid\n */\nexport const closeSession = async (courseid) => {\n  let { data } = await client.post(`/courses/${courseid}/closesession`);\n  return data;\n};\n\n/**\n * Edit session information for a course's active session\n * @param {*} courseid\n * @param {*} changes validated changed to the session\n */\nexport const editSession = async (courseid, changes) => {\n  let { data } = await client.patch(`/courses/${courseid}/sessions`, changes);\n  return data;\n};\n\n/**\n * Join the questions queue for a course\n * @param {*} courseid\n */\nexport const postQuestion = async (courseid) => {\n  let { data } = await client.post(`/courses/${courseid}/questions`, {});\n  return data;\n};\n\n/**\n * Join the questions queue for a course\n * @param {*} courseid\n */\nexport const patchQuestion = async (questionId, changes) => {\n  let { data } = await client.patch(`/questions/${questionId}`, changes);\n  return data;\n};\n\n/**\n * Close this question\n * @param {ObjectId} questionId\n * @returns {Question} removed\n */\nexport const closeQuestion = async (questionId) => {\n  let { data } = await client.patch(`/questions/${questionId}/close`);\n  return data;\n};\n\n/**\n * Help a student\n * @param {ObjectId} questionId question to help\n * @returns {Question} with help added\n */\nexport const helpStudent = async (questionId) => {\n  let { data } = await client.patch(`/questions/${questionId}/help`);\n  return data;\n};\n\n/**\n * Requeue a student's question (TA could not answer properly)\n * @param {ObjectId} questionId question to requeue\n * @returns {Question} edited\n */\nexport const requeueStudent = async (questionId) => {\n  let { data } = await client.patch(`/questions/${questionId}/requeue`);\n  return data;\n};\n\n/**\n * Created joinedAt field for current help\n * @param {ObjectId} questionId question to requeue\n * @returns {Question} edited\n */\nexport const joinTALink = async (questionId) => {\n  let { data } = await client.patch(`/questions/${questionId}/joinHelp`);\n  return data;\n};\n\n\n/**\n * Get questions user asked for this sesison\n * @param {*} courseid\n */\nexport const getMyQuestion = async (courseid) => {\n  let { data } = await client.get(`/courses/${courseid}/questions/me`);\n  return data;\n};\n\n/**\n * Get questions asked in this session\n * @param {*} sessionId\n */\nexport const getQuestions = async (sessionId) => {\n  let { data } = await client.get(`/sessions/${sessionId}/questions/`);\n  return data;\n};\n\n/**\n * Get stats for this session\n * @param {ObjectId} sessionId\n */\nexport const getStats = async (sessionId) => {\n  let { data } = await client.get(`/sessions/${sessionId}/stats/`);\n  return data;\n};\n\nexport default {\n  openSession,\n  getSession,\n  joinSessionAsStaffer,\n  closeSession,\n  editSession,\n  postQuestion,\n  patchQuestion,\n  getMyQuestion,\n  getQuestions,\n};\n"]},"metadata":{},"sourceType":"module"}