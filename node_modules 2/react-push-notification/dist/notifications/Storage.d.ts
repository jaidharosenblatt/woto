/// <reference types="react" />
export declare type Color = 'light' | 'darkblue' | 'red' | undefined;
declare type voidFunc = () => void;
export declare type eventFunc = (e: any) => void;
export declare type onClickType = voidFunc | eventFunc | undefined;
/**
* Add a new notification.
* Must pass an object with the params to the function.
 * @type {Options}
 * @property {string} options.title - Title of the push notification.
 * @property {string} [options.subtitle] - Subtitle of the push notification.
 * @property {string} [options.message] - Message of the push notification.
 * @property {('darkblue'|'red'|'light')} [options.theme=undefined] - Theme of the push notification.
 * @property {number} [options.duration=3000] - duration of the push notification in ms.
 * @property {string} [options.backgroundTop=undefined] - Background color of the top container of push notification.
 * @property {string} [options.backgroundBottom=undefined] - Background color of the bottom container of push notification.
 * @property {string} [options.colorTop=undefined] - Color of the top text of push notification.
 * @property {string} [options.colorBottom=undefined] - Color of the bottom text of push notification.
 * @property {(string|JSX.Element)} [options.closeButton="close"] - Color of the bottom text of push notification.
 * @property {boolean} [options.native=false] - Uses native browser notifications. Will prompt for user permission if not granted.
 * @property {string} [options.icon] - Native only. Link to image to show in notification.
 * @property {boolean} [options.silent] - Native only. Makes the notification silent.
 * @property {(number|numer[])} [options.vibrate] - Native only. Makes the notification vibrate.
 *
*/
export declare type Options = {
    title: string;
    subtitle?: string;
    message?: string;
    onClick?: onClickType;
    theme?: Color;
    duration?: number;
    backgroundTop?: string;
    backgroundBottom?: string;
    colorTop?: string;
    colorBottom?: string;
    closeButton?: JSX.Element | string;
    native?: boolean;
    icon?: string;
    vibrate?: number | number[];
    silent?: boolean;
};
export declare type Styling = {
    backgroundTop?: string;
    backgroundBottom?: string;
    colorTop?: string;
    colorBottom?: string;
};
export interface PushNotificationObject {
    title: string;
    subtitle?: string;
    message?: string;
    theme?: Color;
    styling?: Styling;
    closeButton?: JSX.Element | string;
    onClick?: onClickType;
}
export declare class PushNotification {
    title: string;
    subtitle?: string;
    message?: string;
    theme?: Color;
    id: number;
    styling?: Styling;
    closeButton?: JSX.Element | string;
    onClick?: onClickType;
    constructor(op: PushNotificationObject);
}
declare class Storage {
    Storage: Array<PushNotification>;
    Listener: (storage: any) => void;
    popAndPush: (NotificationId: number) => void;
    setTimer: (NotificationId: number, duration: number) => void;
    addListener: (listener: (v: PushNotification[]) => void) => void;
    addNativeNotification: (options: Options) => Promise<void>;
    addWebNotification: (options: Options) => void;
    addNotification: (options: Options) => Promise<void>;
}
declare const _default: Storage;
export default _default;
